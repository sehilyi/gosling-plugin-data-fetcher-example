/*! For license information please see main.ce22009c.chunk.js.LICENSE.txt */
(this["webpackJsonpgosling-plugin-datafetcher-example"]=this["webpackJsonpgosling-plugin-datafetcher-example"]||[]).push([[0],{201:function(I,g,C){"use strict";(function(I,A){C.d(g,"a",(function(){return Am}));var i=C(14),e=C(31),l=C(13),o=C(10),t=C(16),c=C(17),n=C(32),d=C(21),s=C(18),a=C(28),Z=C(29),m=C(2),b=C(11),r=C(9),h=C(129),G=C(43),u=C(138),y=C(108),B=C(137),V=C(135),p=C(219),X=C(205),W=C(38),H=C(350),Y=C(353),R=C(136),f=C(217),K=C(22),w=C(167),J=C(348),S=C(349),F=C(218),N=C(340),v=C(351),k=C(341),D=C(342),z=C(343),M=C(344),U=C(345),x=C(346),T=C(53),Q=C(166),P=C(207),O=C.n(P),j=C(352),L=C(347),E=C(70),_=C.n(E),$=C(212),q=C(134),II=C(120),gI=C.n(II),CI=C(160),AI=C.n(CI),iI=C(106),eI=C(220),lI=C(15),oI=C.n(lI),tI=(C(116),C(208)),cI={$ref:"#/definitions/GoslingSpec",$schema:"http://json-schema.org/draft-07/schema#",definitions:{Aggregate:{enum:["max","min","mean","bin","count"],type:"string"},Assembly:{enum:["hg38","hg19","hg18","hg17","hg16","mm10","mm9","unknown"],type:"string"},AxisPosition:{enum:["none","top","bottom","left","right"],type:"string"},BAMData:{additionalProperties:!1,description:"Binary Alignment Map (BAM) is the comprehensive raw data of genome sequencing; it consists of the lossless, compressed binary representation of the Sequence Alignment Map-files.",properties:{extractJunction:{description:"Determine whether to extract exon-to-exon junctions. __Default__: `false`",type:"boolean"},indexUrl:{description:"URL link to the index file of the BAM file",type:"string"},junctionMinCoverage:{description:"Determine the threshold of coverage when extracting exon-to-exon junctions. __Default__: `1`",type:"number"},loadMates:{description:"Load mates that are located in the same chromosome. __Default__: `false`",type:"boolean"},maxInsertSize:{description:"Determines the threshold of insert sizes for determining the structural variants. __Default__: `5000`",type:"number"},type:{const:"bam",type:"string"},url:{description:"URL link to the BAM data file",type:"string"}},required:["type","url","indexUrl"],type:"object"},BEDDBData:{additionalProperties:!1,description:"Regular BED or similar files can be pre-aggregated for the scalable data exploration. Find our more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bed-files).",properties:{exonIntervalFields:{description:"experimental",items:[{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"},{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"}],maxItems:2,minItems:2,type:"array"},genomicFields:{description:"Specify the name of genomic data fields.",items:{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"}},required:["index","name"],type:"object"},type:"array"},type:{const:"beddb",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},valueFields:{description:"Specify the column indexes, field names, and field types.",items:{additionalProperties:!1,properties:{index:{type:"number"},name:{type:"string"},type:{enum:["nominal","quantitative"],type:"string"}},required:["index","name","type"],type:"object"},type:"array"}},required:["type","url","genomicFields"],type:"object"},BIGWIGData:{additionalProperties:!1,properties:{aggregation:{$ref:"#/definitions/BinAggregate",description:'Determine aggregation function to apply within bins. __Default__: `"mean"`'},binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"bigwig",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","value"],type:"object"},BinAggregate:{enum:["mean","sum"],type:"string"},CSVData:{additionalProperties:!1,description:'Any small enough tabular data files, such as tsv, csv, BED, BEDPE, and GFF, can be loaded using "csv" data specification.',properties:{chromosomeField:{description:"Specify the name of chromosome data fields.",type:"string"},chromosomePrefix:{description:"experimental",type:"string"},genomicFields:{description:"Specify the name of genomic data fields.",items:{type:"string"},type:"array"},genomicFieldsToConvert:{description:"experimental",items:{additionalProperties:!1,properties:{chromosomeField:{type:"string"},genomicFields:{items:{type:"string"},type:"array"}},required:["chromosomeField","genomicFields"],type:"object"},type:"array"},headerNames:{description:"Specify the names of data fields if a CSV file does not contain a header.",items:{type:"string"},type:"array"},longToWideId:{description:"experimental",type:"string"},sampleLength:{description:"Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",type:"number"},separator:{description:"Specify file separator, __Default:__ ','",type:"string"},type:{const:"csv",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"}},required:["type","url"],type:"object"},Channel:{anyOf:[{$ref:"#/definitions/ChannelDeep"},{$ref:"#/definitions/ChannelValue"}]},ChannelDeep:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/Y"},{$ref:"#/definitions/Row"},{$ref:"#/definitions/Color"},{$ref:"#/definitions/Size"},{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/Text"}]},ChannelValue:{additionalProperties:!1,properties:{value:{description:"Assign a constant value for a visual channel.",type:["number","string"]}},required:["value"],type:"object"},Chromosome:{enum:["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y","M","chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY","chrM"],type:"string"},Color:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},range:{$ref:"#/definitions/Range",description:"Determine the colors that should be bound to data value. Default properties are determined considering the field type."},scale:{enum:["linear","log"],type:"string"},scaleOffset:{description:"Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"},title:{description:"Title of the legend. __Default__: `undefined`",type:"string"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},CoverageTransform:{additionalProperties:!1,description:"Aggregate rows and calculate coverage",properties:{endField:{type:"string"},groupField:{description:"The name of a nominal field to group rows by in prior to piling-up",type:"string"},newField:{type:"string"},startField:{type:"string"},type:{const:"coverage",type:"string"}},required:["type","startField","endField"],type:"object"},DataDeep:{anyOf:[{$ref:"#/definitions/JSONData"},{$ref:"#/definitions/CSVData"},{$ref:"#/definitions/BIGWIGData"},{$ref:"#/definitions/MultivecData"},{$ref:"#/definitions/BEDDBData"},{$ref:"#/definitions/VectorData"},{$ref:"#/definitions/MatrixData"},{$ref:"#/definitions/BAMData"},{$ref:"#/definitions/VCFData"},{$ref:"#/definitions/PluginData"}]},DataTrack:{additionalProperties:!1,description:"Partial specification of `BasicSingleTrack` to use default visual encoding predefined by data type.",properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},data:{$ref:"#/definitions/DataDeep"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},width:{description:"Specify the track width in pixels.",type:"number"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","width"],type:"object"},DataTransform:{anyOf:[{$ref:"#/definitions/FilterTransform"},{$ref:"#/definitions/StrConcatTransform"},{$ref:"#/definitions/StrReplaceTransform"},{$ref:"#/definitions/LogTransform"},{$ref:"#/definitions/DisplaceTransform"},{$ref:"#/definitions/ExonSplitTransform"},{$ref:"#/definitions/GenomicLengthTransform"},{$ref:"#/definitions/SvTypeTransform"},{$ref:"#/definitions/CoverageTransform"},{$ref:"#/definitions/JSONParseTransform"}]},Datum:{additionalProperties:{type:["number","string"]},description:"Values in the form of JSON.",type:"object"},DisplaceTransform:{additionalProperties:!1,properties:{boundingBox:{additionalProperties:!1,properties:{endField:{description:"The name of a quantitative field that represents the end position.",type:"string"},groupField:{description:"The name of a nominal field to group rows by in prior to piling-up.",type:"string"},isPaddingBP:{description:"Whether to consider `padding` as the bp length.",type:"boolean"},padding:{description:"The padding around visual lements. Either px or bp",type:"number"},startField:{description:"The name of a quantitative field that represents the start position.",type:"string"}},required:["startField","endField"],type:"object"},maxRows:{description:"Specify maximum rows to be generated (default has no limit).",type:"number"},method:{$ref:"#/definitions/DisplacementType",description:"A string that specifies the type of displacement."},newField:{type:"string"},type:{const:"displace",type:"string"}},required:["type","boundingBox","method","newField"],type:"object"},Displacement:{additionalProperties:!1,properties:{padding:{type:"number"},type:{$ref:"#/definitions/DisplacementType"}},required:["type"],type:"object"},DisplacementType:{enum:["pile","spread"],type:"string"},DomainChr:{additionalProperties:!1,properties:{chromosome:{$ref:"#/definitions/Chromosome"}},required:["chromosome"],type:"object"},DomainChrInterval:{additionalProperties:!1,properties:{chromosome:{$ref:"#/definitions/Chromosome",description:"If specified, only showing a certain interval in a chromosome."},interval:{items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"}},required:["chromosome","interval"],type:"object"},DomainGene:{additionalProperties:!1,properties:{gene:{anyOf:[{type:"string"},{items:[{type:"string"},{type:"string"}],maxItems:2,minItems:2,type:"array"}]}},required:["gene"],type:"object"},DomainInterval:{additionalProperties:!1,properties:{interval:{description:"Show a certain interval within entire chromosome",items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"}},required:["interval"],type:"object"},EventStyle:{additionalProperties:!1,description:"The styles defined here will be applied to the target marks of mouse events, such as a point mark after the user clicks on it.",properties:{arrange:{description:"Show event effects behind or in front of marks.",enum:["behind","front"],type:"string"},color:{description:"color of the marks when mouse events are triggered",type:"string"},opacity:{description:"opacity of the marks when mouse events are triggered",type:"number"},stroke:{description:"stroke color of the marks when mouse events are triggered",type:"string"},strokeOpacity:{type:"number"},strokeWidth:{description:"stroke width of the marks when mouse events are triggered",type:"number"}},type:"object"},ExonSplitTransform:{additionalProperties:!1,properties:{fields:{items:{additionalProperties:!1,properties:{chrField:{type:"string"},field:{type:"string"},newField:{type:"string"},type:{$ref:"#/definitions/FieldType"}},required:["field","type","newField","chrField"],type:"object"},type:"array"},flag:{additionalProperties:!1,properties:{field:{type:"string"},value:{type:["number","string"]}},required:["field","value"],type:"object"},separator:{type:"string"},type:{const:"exonSplit",type:"string"}},required:["type","separator","flag","fields"],type:"object"},FieldType:{enum:["genomic","nominal","quantitative"],type:"string"},FilterTransform:{anyOf:[{$ref:"#/definitions/OneOfFilter"},{$ref:"#/definitions/RangeFilter"},{$ref:"#/definitions/IncludeFilter"}]},GenomicDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"},{$ref:"#/definitions/DomainGene"}]},GenomicLengthTransform:{additionalProperties:!1,description:"Calculate genomic length using two genomic fields",properties:{endField:{type:"string"},newField:{type:"string"},startField:{type:"string"},type:{const:"genomicLength",type:"string"}},required:["type","startField","endField","newField"],type:"object"},GoslingSpec:{anyOf:[{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"overlay",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},description:{type:"string"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},responsiveSize:{$ref:"#/definitions/ResponsiveSize",description:"Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{$ref:"#/definitions/PartialTrack"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["alignment","height","tracks","width"],type:"object"},{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"stack",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},description:{type:"string"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},responsiveSize:{$ref:"#/definitions/ResponsiveSize",description:"Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},description:{type:"string"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},responsiveSize:{$ref:"#/definitions/ResponsiveSize",description:"Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{type:"string"},tracks:{items:{$ref:"#/definitions/Track"},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},arrangement:{description:"Specify how multiple views are arranged.",enum:["parallel","serial","horizontal","vertical"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},description:{type:"string"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},responsiveSize:{$ref:"#/definitions/ResponsiveSize",description:"Determine whether to make the size of `GoslingComponent` bound to its parent element. __Default__: `false`"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},arrangement:{description:"Specify how multiple views are arranged.",enum:["parallel","serial","horizontal","vertical"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},views:{description:"An array of view specifications",items:{anyOf:[{$ref:"#/definitions/SingleView"},{$ref:"#/definitions/MultipleViews"}]},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},title:{type:"string"},views:{description:"An array of view specifications",items:{anyOf:[{$ref:"#/definitions/SingleView"},{$ref:"#/definitions/MultipleViews"}]},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["views"],type:"object"}]},IncludeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},include:{description:"Check whether the value includes a substring.",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","include","type"],type:"object"},JSONData:{additionalProperties:!1,description:"The JSON data format allows users to include data directly in the Gosling's JSON specification.",properties:{chromosomeField:{description:"Specify the name of chromosome data fields.",type:"string"},genomicFields:{description:"Specify the name of genomic data fields.",items:{type:"string"},type:"array"},genomicFieldsToConvert:{description:"experimental",items:{additionalProperties:!1,properties:{chromosomeField:{type:"string"},genomicFields:{items:{type:"string"},type:"array"}},required:["chromosomeField","genomicFields"],type:"object"},type:"array"},sampleLength:{description:"Specify the number of rows loaded from the URL.\n\n__Default:__ `1000`",type:"number"},type:{const:"json",description:"Define data type.",type:"string"},values:{description:"Values in the form of JSON.",items:{$ref:"#/definitions/Datum"},type:"array"}},required:["type","values"],type:"object"},JSONParseTransform:{additionalProperties:!1,description:"Parse JSON Object Array and append vertically",properties:{baseGenomicField:{description:"Base genomic position when parsing relative position.",type:"string"},field:{description:"The field that contains the JSON object array.",type:"string"},genomicField:{description:"Relative genomic position to parse.",type:"string"},genomicLengthField:{description:"Length of genomic interval.",type:"string"},type:{const:"subjson",type:"string"}},required:["type","field","baseGenomicField","genomicField","genomicLengthField"],type:"object"},Layout:{enum:["linear","circular"],type:"string"},LogBase:{anyOf:[{type:"number"},{const:"e",type:"string"}]},LogTransform:{additionalProperties:!1,properties:{base:{$ref:"#/definitions/LogBase",description:"If not specified, 10 is used."},field:{type:"string"},newField:{description:"If specified, store transformed values in a new field.",type:"string"},type:{const:"log",type:"string"}},required:["type","field"],type:"object"},LogicalOperation:{enum:["less-than","lt","LT","greater-than","gt","GT","less-than-or-equal-to","ltet","LTET","greater-than-or-equal-to","gtet","GTET"],type:"string"},Mark:{enum:["point","line","area","bar","rect","text","withinLink","betweenLink","rule","triangleLeft","triangleRight","triangleBottom","brush","header"],type:"string"},MatrixData:{additionalProperties:!1,properties:{binSize:{description:"Determine the number of nearby cells to aggregate. __Default__: `1`",type:"number"},column:{description:"The name of the first genomic field. __Default__: `x`",type:"string"},row:{description:"The name of the first genomic field. __Default__: `y`",type:"string"},type:{const:"matrix",type:"string"},url:{description:"URL link to the matrix data file",type:"string"},value:{description:"The name of the value field. __Default__: `value`",type:"string"}},required:["type","url"],type:"object"},MouseEventsDeep:{additionalProperties:!1,properties:{click:{type:"boolean"},enableMouseOverOnMultipleMarks:{description:"Determine whether all marks underneath the mouse point should be affected by mouse over. __Default__: `false`",type:"boolean"},groupMarksByField:{description:"Group marks using keys in a data field. This affects how a set of marks are highlighted/selected by interaction. __Default__: `undefined`",type:"string"},mouseOver:{type:"boolean"},rangeSelect:{type:"boolean"}},type:"object"},MultipleViews:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},arrangement:{description:"Specify how multiple views are arranged.",enum:["parallel","serial","horizontal","vertical"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},views:{description:"An array of view specifications",items:{anyOf:[{$ref:"#/definitions/SingleView"},{$ref:"#/definitions/MultipleViews"}]},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["views"],type:"object"},MultivecData:{additionalProperties:!1,description:'Two-dimensional quantitative values, one axis for genomic coordinate and the other for different samples, can be converted into HiGlass\' `"multivec"` data. For example, multiple BigWig files can be converted into a single multivec file. You can also convert sequence data (FASTA) into this format where rows will be different nucleotide bases (e.g., A, T, G, C) and quantitative values represent the frequency. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#multivec-files).',properties:{aggregation:{$ref:"#/definitions/BinAggregate",description:'Determine aggregation function to apply within bins. __Default__: `"mean"`'},binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},categories:{description:"assign names of individual samples.",items:{type:"string"},type:"array"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},row:{description:"Assign a field name of samples.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"multivec",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","row","value"],type:"object"},OneOfFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},oneOf:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}],description:"Check whether the value is an element in the provided list."},type:{const:"filter",type:"string"}},required:["field","oneOf","type"],type:"object"},Opacity:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Orientation:{enum:["horizontal","vertical"],type:"string"},OverlaidTrack:{additionalProperties:!1,description:"Superposing multiple tracks.",properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlay:{items:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},type:"array"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["height","overlay","width"],type:"object"},OverlaidTracks:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"overlay",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{$ref:"#/definitions/PartialTrack"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["alignment","tracks","width","height"],type:"object"},PartialTrack:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},encoding:{additionalProperties:{$ref:"#/definitions/Channel"},type:"object"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlay:{items:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},type:"array"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},template:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"},PluginData:{additionalProperties:!1,description:"A data spec to use plugin data fetcher that are defined externally",properties:{name:{description:"The name of the plugin data that should match the `type` of a plugin data fetcher",type:"string"},options:{description:"All custom options used in the plugin data fetcher",type:"object"},type:{const:"experimentalPlugin",type:"string"}},required:["type","name","options"],type:"object"},PredefinedColors:{enum:["viridis","grey","spectral","warm","cividis","bupu","rdbu","hot","pink"],type:"string"},Range:{anyOf:[{$ref:"#/definitions/ValueExtent"},{$ref:"#/definitions/PredefinedColors"}]},RangeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},inRange:{description:"Check whether the value is in a number range.",items:{type:"number"},type:"array"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","inRange","type"],type:"object"},ResponsiveSize:{anyOf:[{type:"boolean"},{additionalProperties:!1,properties:{height:{type:"boolean"},width:{type:"boolean"}},type:"object"}]},Row:{additionalProperties:!1,properties:{clip:{description:"Clip row when the actual y value exceeds the max value of the y scale. Used only for bar marks at the moment. __Default__: `true`",type:"boolean"},domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},padding:{description:"Determines the size of inner white spaces on the top and bottom of individiual rows. __Default__: `0`",type:"number"},range:{$ref:"#/definitions/ValueExtent",description:"Determine the start and end position of rendering area of this track along vertical axis. __Default__: `[0, height]`"},type:{const:"nominal",description:"Specify the data type",type:"string"}},type:"object"},SelectivityCondition:{additionalProperties:!1,properties:{measure:{enum:["width","height","aspectRatio"],type:"string"},operation:{$ref:"#/definitions/LogicalOperation"},target:{description:"Does the condition applied to the visualization itself or its container? __Default__: `'self'`",enum:["self","container"],type:"string"},threshold:{description:"Threshold in the unit of pixels.",type:"number"}},required:["operation","measure","threshold"],type:"object"},SingleTrack:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","mark","width"],type:"object"},SingleView:{anyOf:[{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"overlay",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{$ref:"#/definitions/PartialTrack"},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["alignment","height","tracks","width"],type:"object"},{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{const:"stack",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"},{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},responsiveSpec:{items:{additionalProperties:!1,properties:{selectivity:{items:{$ref:"#/definitions/SelectivityCondition"},type:"array"},spec:{additionalProperties:!1,properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},alignment:{enum:["overlay","stack"],type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},baselineY:{type:"number"},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},color:{anyOf:[{$ref:"#/definitions/Color"},{$ref:"#/definitions/ChannelValue"}]},data:{$ref:"#/definitions/DataDeep"},dataTransform:{items:{$ref:"#/definitions/DataTransform"},type:"array"},displacement:{$ref:"#/definitions/Displacement"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},experimental:{additionalProperties:!1,properties:{mouseEvents:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MouseEventsDeep"}]}},type:"object"},flipY:{type:"boolean"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},mark:{$ref:"#/definitions/Mark"},opacity:{anyOf:[{$ref:"#/definitions/Opacity"},{$ref:"#/definitions/ChannelValue"}]},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},overrideTemplate:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},row:{anyOf:[{$ref:"#/definitions/Row"},{$ref:"#/definitions/ChannelValue"}]},size:{anyOf:[{$ref:"#/definitions/Size"},{$ref:"#/definitions/ChannelValue"}]},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},stretch:{type:"boolean"},stroke:{anyOf:[{$ref:"#/definitions/Stroke"},{$ref:"#/definitions/ChannelValue"}]},strokeWidth:{anyOf:[{$ref:"#/definitions/StrokeWidth"},{$ref:"#/definitions/ChannelValue"}]},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},text:{anyOf:[{$ref:"#/definitions/Text"},{$ref:"#/definitions/ChannelValue"}]},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},tooltip:{items:{$ref:"#/definitions/Tooltip"},type:"array"},tracks:{anyOf:[{items:{$ref:"#/definitions/PartialTrack"},type:"array"},{items:{anyOf:[{$ref:"#/definitions/PartialTrack"},{$ref:"#/definitions/OverlaidTracks"}]},type:"array"}]},visibility:{items:{$ref:"#/definitions/VisibilityCondition"},type:"array"},width:{description:"Specify the track width in pixels.",type:"number"},x:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},x1e:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},xe:{anyOf:[{$ref:"#/definitions/X"},{$ref:"#/definitions/ChannelValue"}]},y:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},y1e:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},ye:{anyOf:[{$ref:"#/definitions/Y"},{$ref:"#/definitions/ChannelValue"}]},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},type:"object"}},required:["spec","selectivity"],type:"object"},type:"array"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},tracks:{items:{$ref:"#/definitions/Track"},type:"array"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["tracks"],type:"object"}]},Size:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},legend:{description:"not supported: Whether to display legend. __Default__: `false`",type:"boolean"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},SizeVisibilityCondition:{additionalProperties:!1,properties:{conditionPadding:{description:"Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",type:"number"},measure:{description:"Specify which aspect of the `target` will be compared to the `threshold`.",enum:["width","height"],type:"string"},operation:{$ref:"#/definitions/LogicalOperation",description:'A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'},target:{description:"Target specifies the object that you want to compare with the threshold.",enum:["track","mark"],type:"string"},threshold:{anyOf:[{type:"number"},{const:"|xe-x|",type:"string"}],description:'Specify the threshold as one of:\n\n- A number representing a fixed threshold in the unit of pixels;\n\n- `"|xe-x|"`, using the distance between `xe` and `x` as threshold'},transitionPadding:{description:"Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",type:"number"}},required:["measure","operation","target","threshold"],type:"object"},StrConcatTransform:{additionalProperties:!1,properties:{fields:{items:{type:"string"},type:"array"},newField:{type:"string"},separator:{type:"string"},type:{const:"concat",type:"string"}},required:["type","fields","newField","separator"],type:"object"},StrReplaceTransform:{additionalProperties:!1,properties:{field:{type:"string"},newField:{type:"string"},replace:{items:{additionalProperties:!1,properties:{from:{type:"string"},to:{type:"string"}},required:["from","to"],type:"object"},type:"array"},type:{const:"replace",type:"string"}},required:["type","field","newField","replace"],type:"object"},Stroke:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},range:{$ref:"#/definitions/Range",description:"Ranges of visual channel values"},scaleOffset:{description:"Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"},title:{description:"Title of the legend. __Default__: `undefined`",type:"string"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},StrokeWidth:{additionalProperties:!1,properties:{domain:{$ref:"#/definitions/ValueExtent",description:"Values of the data"},field:{description:"Name of the data field",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Ranges of visual channel values"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Style:{additionalProperties:!1,properties:{align:{description:"Specify the alignment of marks. This property is currently only supported for `triangle` marks.",enum:["left","right"],type:"string"},background:{type:"string"},backgroundOpacity:{type:"number"},brush:{additionalProperties:!1,description:"Customize the style of the brush mark in the `rangeSelect` mouse event.",properties:{color:{description:"color of the marks when mouse events are triggered",type:"string"},opacity:{description:"opacity of the marks when mouse events are triggered",type:"number"},stroke:{description:"stroke color of the marks when mouse events are triggered",type:"string"},strokeOpacity:{type:"number"},strokeWidth:{description:"stroke width of the marks when mouse events are triggered",type:"number"}},type:"object"},curve:{description:"Specify the curve of `rule` marks.",enum:["top","bottom","left","right"],type:"string"},dashed:{description:"Specify the pattern of dashes and gaps for `rule` marks.",items:[{type:"number"},{type:"number"}],maxItems:2,minItems:2,type:"array"},dx:{description:"Offset the position of marks in x direction. This property is currently only supported for `text` marks",type:"number"},dy:{description:"Offset the position of marks in y direction. This property is currently only supported for `text` marks.",type:"number"},enableSmoothPath:{description:"Whether to enable smooth paths when drawing curves.\n\n__Default__: `false`",type:"boolean"},inlineLegend:{description:"Specify whether to show legend in a single horizontal line?",type:"boolean"},legendTitle:{description:"If defined, show legend title on the top or left",type:"string"},linePattern:{additionalProperties:!1,description:"Specify the pattern of dashes and gaps for `rule` marks.",properties:{size:{type:"number"},type:{enum:["triangleLeft","triangleRight"],type:"string"}},required:["type","size"],type:"object"},linkConnectionType:{description:'Specify the connetion type of `betweenLink` marks.\n\n__Default__: `"corner"`',enum:["straight","curve","corner"],type:"string"},linkMinHeight:{description:"The minimum height of `withinLink` and `betweenLink` marks. Unit is a percentagle. __Default__: `0.5`",type:"number"},linkStyle:{description:"The style of `withinLink` and `betweenLink` marks. __Default__: `'circular'` `'elliptical'` will be used as a default option.",enum:["elliptical","circular","straight","experimentalEdgeBundling"],type:"string"},matrixExtent:{description:'Determine to show only one side of the diagonal in a HiGlass matrix. __Default__: `"full"`',enum:["full","upper-right","lower-left"],type:"string"},mouseOver:{$ref:"#/definitions/EventStyle",description:"Customize visual effects of `mouseOver` events on marks."},outline:{type:"string"},outlineWidth:{type:"number"},select:{$ref:"#/definitions/EventStyle",description:"Customize visual effects of `rangeSelect` events on marks ."},textAnchor:{description:"Specify the alignment of `text` marks to a given point.",enum:["start","middle","end"],type:"string"},textFontSize:{description:"Specify the font size of `text` marks. Can also be specified using the `size` channel option of `text` marks.",type:"number"},textFontWeight:{description:"Specify the font weight of `text` marks.",enum:["bold","normal"],type:"string"},textStroke:{description:"Specify the stroke of `text` marks. Can also be specified using the `stroke` channel option of `text` marks.",type:"string"},textStrokeWidth:{description:"Specify the stroke width of `text` marks. Can also be specified using the `strokeWidth` channel option of `text` marks.",type:"number"}},type:"object"},SvTypeTransform:{additionalProperties:!1,properties:{firstBp:{additionalProperties:!1,description:"Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",properties:{chrField:{type:"string"},posField:{type:"string"},strandField:{type:"string"}},required:["chrField","posField","strandField"],type:"object"},newField:{type:"string"},secondBp:{additionalProperties:!1,description:"Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",properties:{chrField:{type:"string"},posField:{type:"string"},strandField:{type:"string"}},required:["chrField","posField","strandField"],type:"object"},type:{const:"svType",type:"string"}},required:["type","firstBp","secondBp","newField"],type:"object"},TemplateTrack:{additionalProperties:!1,description:"Template specification that will be internally converted into `SingleTrack` for rendering.",properties:{_assignedHeight:{type:"number"},_assignedWidth:{description:"Internal: Used for responsive spec",type:"number"},_invalidTrack:{description:"internal",type:"boolean"},_renderingId:{description:"internal",type:"string"},assembly:{$ref:"#/definitions/Assembly",description:'A string that specifies the genome builds to use. Currently support `"hg38"`, `"hg19"`, `"hg18"`, `"hg17"`, `"hg16"`, `"mm10"`, `"mm9"`, and `"unknown"`.\n\n__Note:__: with `"unknown"` assembly, genomic axes do not show chrN: in labels.'},centerRadius:{description:"Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",type:"number"},data:{$ref:"#/definitions/DataDeep"},encoding:{additionalProperties:{$ref:"#/definitions/Channel"},type:"object"},endAngle:{description:'Specify the end angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},height:{description:"Specify the track height in pixels.",type:"number"},id:{type:"string"},innerRadius:{description:'Specify the inner radius of tracks when (`{"layout": "circular"}`).',type:"number"},layout:{$ref:"#/definitions/Layout",description:"Specify the layout type of all tracks."},linkingId:{description:"Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",type:"string"},orientation:{$ref:"#/definitions/Orientation",description:"Specify the orientation."},outerRadius:{description:'Specify the outer radius of tracks when `{"layout": "circular"}`.',type:"number"},overlayOnPreviousTrack:{type:"boolean"},prerelease:{additionalProperties:!1,description:"internal",type:"object"},spacing:{description:'- If `{"layout": "linear"}`, specify the space between tracks in pixels;\n\n- If `{"layout": "circular"}`, specify the space between tracks in percentage ranging from 0 to 100.',type:"number"},startAngle:{description:'Specify the start angle (in the range of [0, 360]) of circular tracks (`{"layout": "circular"}`).',type:"number"},static:{description:"Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",type:"boolean"},style:{$ref:"#/definitions/Style",description:"Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."},subtitle:{type:"string"},template:{type:"string"},title:{description:"If defined, will show the textual label on the left-top corner of a track.",type:"string"},width:{description:"Specify the track width in pixels.",type:"number"},xAxis:{$ref:"#/definitions/AxisPosition",description:"not supported"},xDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic x-axis"},xOffset:{description:"Specify the x offset of views in the unit of pixels",type:"number"},yDomain:{anyOf:[{$ref:"#/definitions/DomainInterval"},{$ref:"#/definitions/DomainChrInterval"},{$ref:"#/definitions/DomainChr"}],description:"Specify the visible region of genomic y-axis"},yOffset:{description:"Specify the y offset of views in the unit of pixels",type:"number"},zoomLimits:{$ref:"#/definitions/ZoomLimits"}},required:["data","height","template","width"],type:"object"},Text:{additionalProperties:!1,properties:{domain:{description:"Values of the data",items:{type:"string"},type:"array"},field:{description:"Name of the data field",type:"string"},range:{description:"Ranges of visual channel values",items:{type:"string"},type:"array"},type:{description:"Specify the data type",enum:["quantitative","nominal"],type:"string"}},type:"object"},Tooltip:{additionalProperties:!1,properties:{alt:{description:"Name of the data field for showing in the tooltip. Will use the field name if not specified.",type:"string"},field:{description:"Specifiy a data field whose value will show in the tooltip.",type:"string"},format:{description:"format of the data value.",type:"string"},type:{$ref:"#/definitions/FieldType",description:"Type of the data field."}},required:["field","type"],type:"object"},Track:{anyOf:[{$ref:"#/definitions/SingleTrack"},{$ref:"#/definitions/OverlaidTrack"},{$ref:"#/definitions/DataTrack"},{$ref:"#/definitions/TemplateTrack"}]},VCFData:{additionalProperties:!1,description:"The Variant Call Format (VCF).",properties:{indexUrl:{description:"URL link to the tabix index file",type:"string"},sampleLength:{description:"The maximum number of rows to be loaded from the URL. __Default:__ `1000`",type:"number"},type:{const:"vcf",type:"string"},url:{description:"URL link to the VCF file",type:"string"}},required:["type","url","indexUrl"],type:"object"},ValueExtent:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}]},VectorData:{additionalProperties:!1,description:'One-dimensional quantitative values along genomic position (e.g., bigwig) can be converted into HiGlass\' `"vector"` format data. Find out more about this format at [HiGlass Docs](https://docs.higlass.io/data_preparation.html#bigwig-files).',properties:{aggregation:{$ref:"#/definitions/BinAggregate",description:'Determine aggregation function to apply within bins. __Default__: `"mean"`'},binSize:{description:"Binning the genomic interval in tiles (unit size: 256).",type:"number"},column:{description:"Assign a field name of the middle position of genomic intervals.",type:"string"},end:{description:"Assign a field name of the end position of genomic intervals.",type:"string"},start:{description:"Assign a field name of the start position of genomic intervals.",type:"string"},type:{const:"vector",type:"string"},url:{description:"Specify the URL address of the data file.",type:"string"},value:{description:"Assign a field name of quantitative values.",type:"string"}},required:["type","url","column","value"],type:"object"},VisibilityCondition:{anyOf:[{$ref:"#/definitions/SizeVisibilityCondition"},{$ref:"#/definitions/ZoomLevelVisibilityCondition"}]},X:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Specify how to aggregate data. __Default__: `undefined`"},axis:{$ref:"#/definitions/AxisPosition",description:"Specify where should the axis be put"},domain:{$ref:"#/definitions/GenomicDomain",description:"Values of the data"},field:{description:"Name of the data field.",type:"string"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},linkingId:{description:"Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Values of the visual channel."},type:{const:"genomic",description:"Specify the data type.",type:"string"}},type:"object"},Y:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Specify how to aggregate data. __Default__: `undefined`"},axis:{$ref:"#/definitions/AxisPosition",description:"Specify where should the axis be put"},baseline:{description:"Custom baseline of the y-axis. __Default__: `0`",type:["string","number"]},domain:{anyOf:[{$ref:"#/definitions/ValueExtent"},{$ref:"#/definitions/GenomicDomain"}],description:"Values of the data"},field:{description:"Name of the data field.",type:"string"},flip:{description:"Whether to flip the y-axis. This is done by inverting the `range` property. __Default__: `false`",type:"boolean"},grid:{description:"Whether to display grid. __Default__: `false`",type:"boolean"},legend:{description:"Whether to display legend. __Default__: `false`",type:"boolean"},linkingId:{description:"Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",type:"string"},range:{$ref:"#/definitions/ValueExtent",description:"Values of the visual channel."},type:{description:"Specify the data type.",enum:["quantitative","nominal","genomic"],type:"string"},zeroBaseline:{description:"Specify whether to use zero baseline. __Default__: `true`",type:"boolean"}},type:"object"},ZoomLevelVisibilityCondition:{additionalProperties:!1,properties:{conditionPadding:{description:"Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",type:"number"},measure:{const:"zoomLevel",description:"Specify which aspect of the `target` will be compared to the `threshold`.",type:"string"},operation:{$ref:"#/definitions/LogicalOperation",description:'A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : "greater-than", "gt", "GT"\n\n- less than : "less-than", "lt", "LT"\n\n- greater than or equal to : "greater-than-or-equal-to", "gtet", "GTET"\n\n- less than or equal to : "less-than-or-equal-to", "ltet", "LTET"'},target:{description:"Target specifies the object that you want to compare with the threshold.",enum:["track","mark"],type:"string"},threshold:{description:"Set a threshold in the unit of base pairs (bp)",type:"number"},transitionPadding:{description:"Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",type:"number"}},required:["measure","operation","target","threshold"],type:"object"},ZoomLimits:{items:[{type:["number","null"]},{type:["number","null"]}],maxItems:2,minItems:2,type:"array"}}},nI=10,dI=function(I){var g=Object(G.e)(I);return g||(g=Object(G.e)("gray")),h.utils.rgb2hex([g.rgb().r/255,g.rgb().g/255,g.rgb().b/255])};function sI(I,g,C,A,i){var e=Math.max(Math.min(g,I),0),l=null!=i?i:0,o=(A-C)/360*Math.PI*2-2*l;return-(C/360*Math.PI*2+e/g*o)-Math.PI/2-l}function aI(I,g,C,A,i,e,l){return{x:A+C*Math.cos(sI(I,g,e,l)),y:i+C*Math.sin(sI(I,g,e,l))}}function ZI(I,g,C,A){return C<=I?Math.atan((g-A)/(I-C)):Math.atan((g-A)/(I-C))-Math.PI}var mI={fontSize:"12px",fontFamily:"sans-serif",fontWeight:"normal",fill:"black",background:"white",lineJoin:"round",stroke:"#ffffff",strokeThickness:0};function bI(I,g,C){var A,i,e,l,o,t,c,n;if("experimentalEdgeBundling"!==(null==(A=C.spec().style)?void 0:A.linkStyle)){var d=C.spec();if(d.width&&d.height){var s=C.data(),a=Object(r.a)(g.dimensions,2),Z=a[0],m=a[1],b="circular"===d.layout,h=null!=(i=d.innerRadius)?i:220,G=null!=(e=d.outerRadius)?e:300,u=null!=(l=d.startAngle)?l:0,y=null!=(o=d.endAngle)?o:360,B=G-h,V=Z/2,p=m/2,W=null!=(t=C.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],H=m/W.length,Y=null!=(n=null==(c=d.style)?void 0:c.linkMinHeight)?n:.5;W.forEach((function(g){var A=C.encodedValue("row",g);s.filter((function(I){return!UI(I,d.row)||UI(I,d.row)===g})).forEach((function(g){var i,e,l,o,t,c=C.encodedPIXIProperty("x",g),n=C.encodedPIXIProperty("xe",g),s=C.encodedPIXIProperty("x1",g),a=C.encodedPIXIProperty("x1e",g),h=C.encodedPIXIProperty("y",g),W=C.encodedPIXIProperty("stroke",g),R=C.encodedPIXIProperty("strokeWidth",g),f=C.encodedPIXIProperty("color",g),K=C.encodedPIXIProperty("opacity",g);if("undefined"!==typeof n){var w=[c,n].sort((function(I,g){return I-g})),J=Object(r.a)(w,2);c=J[0],n=J[1]}if("undefined"!==typeof s&&"undefined"!==typeof a){var S=[s,a].sort((function(I,g){return I-g})),F=Object(r.a)(S,2);s=F[0],a=F[1]}var N="undefined"!==typeof n&&"undefined"!==typeof s&&"undefined"!==typeof a&&Math.abs(c-n)>.1&&Math.abs(s-a)>.1;if(!N&&void 0===n&&!NI(d)){if(void 0===s&&void 0===a)return;n=void 0!==s?s:a}!N&&Math.abs(c-n)<=.1&&Math.abs(s-a)<=.1&&(c=(c+n)/2,n=(s+a)/2),I.lineStyle(R,dI(W),K,.5);var v=DI(d.y)&&d.y.flip||d.flipY,k=null!=(i=d.baselineY)?i:A+(v?0:H),D=[];if(N){I.beginFill(dI("none"===f?"white":f),"none"===f?0:K);var z=c,M=n,U=s,x=a,T=[z,M,U,x].sort((function(I,g){return I-g})),Q=Object(r.a)(T,4);if(z=Q[0],M=Q[1],U=Q[2],x=Q[3],z>Z||x<0||Math.abs(x-z)<.5)return;if(b){if(z<0||x>Z)return;var P=G-A/m*B,O=aI(z,Z,P,V,p,u,y),j=aI(M,Z,P,V,p,u,y),L=aI(U,Z,P,V,p,u,y),E=aI(x,Z,P,V,p,u,y);I.moveTo(O.x,O.y),I.bezierCurveTo(V,p,V,p,E.x,E.y),I.arc(V,p,G,ZI(E.x,E.y,V,p),ZI(L.x,L.y,V,p),!1),I.bezierCurveTo(V,p,V,p,j.x,j.y),I.arc(V,p,G,ZI(j.x,j.y,V,p),ZI(O.x,O.y,V,p),!1),D=Array.from(I.currentPath.points),I.endFill()}else I.moveTo(z,k),(null==(e=d.style)?void 0:e.linkStyle)&&"circular"!==(null==(l=d.style)?void 0:l.linkStyle)?(I.lineTo(U,A+H),I.bezierCurveTo(U+(M-U)/3,A+H-(M-U)/2,U+(M-U)/3*2,A+H-(M-U)/2,M,A+H),I.lineTo(x,A+H),I.bezierCurveTo(z+(x-z)/3*2,A+H-(x-z)/2,z+(x-z)/3,A+H-(x-z)/2,z,A+H),D=Array.from(I.currentPath.points),I.endFill()):(I.arc((z+x)/2,k,(x-z)/2,-Math.PI,Math.PI,!1),I.arc((M+U)/2,k,(U-M)/2,Math.PI,-Math.PI,!0),D=Array.from(I.currentPath.points),I.closePath());C.getMouseEventModel().addPolygonBasedEvent(g,D)}else{var _=(c+n)/2;if(I.beginFill(dI("white"),0),b){if(c<0||n>Z)return;if("straight"===(null==(o=d.style)?void 0:o.linkStyle)){var $=G-A/m*B,q=aI(c,Z,$,V,p,u,y),II=aI(n,Z,$,V,p,u,y),gI=q.x,CI=q.y,AI=II.x,iI=II.y;I.moveTo(gI,CI),I.lineTo(AI,iI);var eI=Array.from({length:100},(function(I,g){return{x:(AI-gI)/99*g+gI,y:(iI-CI)/99*g+CI}}));D=eI.flatMap((function(I){return[I.x,I.y]}))}else{var lI=G-A/m*B,oI=aI(c,Z,lI,V,p,u,y),tI=aI(n,Z,lI,V,p,u,y),cI=oI.x,nI=oI.y,sI=oI.x,mI=oI.y,bI=Z/2,rI=m/2,hI=tI.x,GI=tI.y;I.moveTo(cI,nI);var uI=new X.Bezier(cI,nI,sI,mI,bI,rI,hI,GI);uI.getLUT(14).forEach((function(g){return I.lineTo(g.x,g.y)})),D=uI.getLUT(1e3).flatMap((function(I){return[I.x,I.y]}))}}else if("elliptical"===(null==(t=d.style)?void 0:t.linkStyle)){if(!(0<=c&&c<=Z)&&!(0<=n&&n<=Z))return;for(var yI=[],BI=1e3,VI=DI(d.y),pI=0;pI<=BI;pI++){var XI=Math.PI*(pI/BI),WI=(n-c)/2*Math.cos(XI)+(c+n)/2,HI=k-h*Math.sin(XI)*(VI?1:Math.min(n-c+Z*Y,Z)/Z)*(v?-1:1);pI%20!==0&&pI!==BI||(0===pI?I.moveTo(WI,HI):I.lineTo(WI,HI)),yI.push({x:WI,y:HI})}D=yI.flatMap((function(I){return[I.x,I.y]}))}else{if(n<0||c>Z)return;I.arc(_,k,(n-c)/2,-Math.PI,Math.PI),D=Array.from(I.currentPath.points),I.closePath()}C.getMouseEventModel().addLineBasedEvent(g,D)}}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}else!function(I,g,C){var A,i,e,l,o=C.spec();if(o.width&&o.height){var t=C.data(),c=Object(r.a)(g.dimensions,2),n=c[0],d=c[1],s="circular"===o.layout,a=null!=(A=o.innerRadius)?A:220,Z=null!=(i=o.outerRadius)?i:300,m=null!=(e=o.startAngle)?e:0,b=null!=(l=o.endAngle)?l:360,h=Z-a,G=n/2,u=d/2;t.forEach((function(g){var A=C.encodedPIXIProperty("x",g),i=C.encodedPIXIProperty("xe",g),e=C.encodedPIXIProperty("stroke",g),l=C.encodedPIXIProperty("strokeWidth",g),o=C.encodedPIXIProperty("opacity",g);if(I.lineStyle(l,dI(e),o,.5),s){var t=Z-h/d,c=aI(A,n,t,G,u,m,b),a=aI(i,n,t,G,u,m,b),r=c.x,y=c.y,B=a.x,V=a.y;I.moveTo(r,y),I.lineTo(B,V)}else{var p=(A+i)/2;I.beginFill(dI("white"),0),I.arc(p,0,(i-A)/2,-Math.PI,Math.PI),I.closePath()}}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}(I,g,C)}function rI(I,g,C){!function(I,g,C){var A,i,e,l,o,t=g.spec();if(!DI(t.y)||!0!==t.y.grid)return;var c=Object(r.a)(I.position,2),n=c[0],d=c[1],s=Object(r.a)(I.dimensions,2),a=s[0],Z=s[1],m=n,b=n+a,h="circular"===g.spec().layout,G=null!=(A=t.innerRadius)?A:220,u=null!=(i=t.outerRadius)?i:300,y=null!=(e=t.startAngle)?e:0,B=null!=(l=t.endAngle)?l:360,V=u-G,p=a/2,X=Z/2,W=null!=(o=g.getChannelDomainArray("row"))?o:["___SINGLE_ROW___"],H=Z/W.length,Y=g.getChannelScale("y"),R=g.getChannelDomainArray("y");if(!Y||!R)return;if(h&&H/Z*V<=20||!h&&H<=20)return;var f=I.pBackground,K=C.axis.gridStrokeWidth;W.forEach((function(I){var A=g.encodedValue("row",I),i=h?H/Z*V:H,e=Math.max(Math.ceil(i/40),1),l=Y.ticks(e).filter((function(I){return R[0]<=I&&I<=R[1]}));1===l.length&&(l=Y.ticks(e+1).filter((function(I){return R[0]<=I&&I<=R[1]}))),h?l.forEach((function(I){var g=Y(I),i=u-(A+H-g)/Z*V,e=i+K/2,l=i-K/2,o=aI(0,a,l,p,X,y,B),t=sI(0,a,y,B),c=sI(a,a,y,B);f.lineStyle(K,dI("black"),0,.5),f.beginFill(dI(C.axis.gridColor),1),f.moveTo(n+o.x,d+o.y),f.arc(n+p,d+X,l,t,c,!0),f.arc(n+p,d+X,e,c,t,!1),f.closePath()})):(f.lineStyle(K,dI(C.axis.gridColor),1,.5),l.forEach((function(I){var g,i=d+A+H-Y(I);if("solid"===C.axis.gridStrokeType)f.moveTo(m,i),f.lineTo(b,i);else if("dashed"===C.axis.gridStrokeType)for(var e=null!=(g=C.axis.gridStrokeDash)?g:[1,1],l=Object(r.a)(e,2),o=l[0],t=l[1],c=m;c<b;c+=o+t)f.moveTo(c,i),f.lineTo(c+o,i)})))}))}(I,g,C),function(I,g,C){var A,i,e,l,o=g.spec();if(!DI(o.row)||!0!==o.row.grid)return;var t=Object(r.a)(I.position,2),c=t[0],n=t[1],d=Object(r.a)(I.dimensions,2),s=d[0],a=d[1],Z="circular"===g.spec().layout,m=null!=(A=o.innerRadius)?A:220,b=null!=(i=o.outerRadius)?i:300,h=null!=(e=o.startAngle)?e:0,G=null!=(l=o.endAngle)?l:360,u=b-m,y=s/2,B=a/2,V=g.getChannelDomainArray("row");if(!V)return;var p=a/V.length;if(Z&&u<=20||!Z&&p<=20)return;var X=I.pBackground,W=C.axis.gridStrokeWidth;V.forEach((function(I){var A=g.encodedValue("row",I);if(Z){var i=b-(A+p/2)/a*u,e=i+W/2,l=i-W/2,o=aI(0,s,l,y,B,h,G),t=sI(0,s,h,G),d=sI(s,s,h,G);X.lineStyle(W,dI("black"),0,.5),X.beginFill(dI(C.axis.gridColor),1),X.moveTo(c+o.x,n+o.y),X.arc(c+y,n+B,l,t,d,!0),X.arc(c+y,n+B,e,d,t,!1),X.closePath()}else{X.lineStyle(W,dI(C.axis.gridColor),1,.5);var m=n+A+p/2;X.moveTo(c,m),X.lineTo(c+s,m)}}))}(I,g,C)}var hI={color:"black",size:10,fontFamily:"Arial",fontWeight:"normal",stroke:"#ffffff",strokeThickness:0};function GI(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},g=Object(m.a)(Object(m.a)({},hI),I),C={fontSize:"".concat(g.size,"px"),fontFamily:g.fontFamily,fontWeight:"light"===g.fontWeight?"lighter":g.fontWeight,fill:g.color,lineJoin:"round",stroke:g.stroke,strokeThickness:g.strokeThickness};return C}function uI(I,g,C,A,i){if(g.gLegend){g.gLegend.selectAll(".brush").remove();var e=A.spec(),l={offsetRight:0};if(DI(e.color)&&e.color.legend)switch(e.color.type){case"nominal":!function(I,g,C,A,i){var e,l,o,t,c,n=A.spec();if(!DI(n.color)||"nominal"!==n.color.type||!n.color.legend)return;var d=null!=(e=A.getChannelDomainArray("color"))?e:["___SINGLE_COLOR___"];if(0===d.length)return;var s=g.pBorder,a=10,Z=4,b=Z,r=0,h=[],G=GI({color:i.legend.labelColor,size:i.legend.labelFontSize,fontWeight:i.legend.labelFontWeight,fontFamily:i.legend.labelFontFamily});if(null==(l=n.style)?void 0:l.inlineLegend)d.map((function(I){return I})).reverse().forEach((function(C){if(!(r>g.dimensions[0])){var i=A.encodedValue("color",C),e=new I.libraries.PIXI.Text(C,G);e.anchor.x=1,e.anchor.y=0,e.position.x=g.position[0]+g.dimensions[0]-r-a,e.position.y=g.position[1]+Z,s.addChild(e);var l=new I.libraries.PIXI.TextStyle(G),o=I.libraries.PIXI.TextMetrics.measureText(C,l);b<o.height+3*Z&&(b=o.height+3*Z),h.push({x:g.position[0]+g.dimensions[0]-o.width-r-2*a,y:g.position[1]+Z+o.height/2,color:i}),r+=o.width+3*a}}));else{if(null==(o=n.style)?void 0:o.legendTitle){var u=new I.libraries.PIXI.Text(null==(t=n.style)?void 0:t.legendTitle,Object(m.a)(Object(m.a)({},G),{},{fontWeight:"bold"}));u.anchor.x=1,u.anchor.y=0,u.position.x=g.position[0]+g.dimensions[0]-a,u.position.y=g.position[1]+b;var y=new I.libraries.PIXI.TextStyle(Object(m.a)(Object(m.a)({},G),{},{fontWeight:"bold"})),B=I.libraries.PIXI.TextMetrics.measureText(null==(c=n.style)?void 0:c.legendTitle,y);s.addChild(u),b+=B.height+2*Z}d.forEach((function(C){if(!(b>g.dimensions[1])){var i=A.encodedValue("color",C),e=new I.libraries.PIXI.Text(C,G);e.anchor.x=1,e.anchor.y=0,e.position.x=g.position[0]+g.dimensions[0]-a,e.position.y=g.position[1]+b,s.addChild(e);var l=new I.libraries.PIXI.TextStyle(G),o=I.libraries.PIXI.TextMetrics.measureText(C,l);r<o.width+3*a&&(r=o.width+3*a),h.push({x:g.position[0]+g.dimensions[0]-o.width-2*a,y:g.position[1]+b+o.height/2,color:i}),b+=o.height+2*Z}}))}s.beginFill(dI(i.legend.background),i.legend.backgroundOpacity),s.lineStyle(1,dI(i.legend.backgroundStroke),i.legend.backgroundOpacity,0),s.drawRect(g.position[0]+g.dimensions[0]-r-1,g.position[1]+1,r,b-Z),h.forEach((function(I){s.lineStyle(1,dI("black"),0,0),s.beginFill(dI(I.color),1),s.drawCircle(I.x,I.y,4)}))}(I,g,0,A,i);break;case"quantitative":yI(I,g,C,A,i,"color",l)}if(DI(e.stroke)&&e.stroke.legend&&"quantitative"===e.stroke.type)yI(I,g,C,A,i,"stroke",l)}}function yI(I,g,C,A,i,e,l){var o=A.spec(),t=o[e];if(DI(t)&&"quantitative"===t.type&&t.legend){var c=Object(r.a)(g.position,2),n=c[0],d=c[1],s=Object(r.a)(g.dimensions,2),a=s[0],Z=s[1],h=Z-2>110?110:Math.max(Z-2,38),G={top:10,left:55,width:20,height:h-20},u=n+a-80-1-l.offsetRight,y=d+1,B=A.getChannelScale(e),V=A.getChannelDomainArray(e);if(B&&V){var p=g.pBorder;if(p.beginFill(dI(i.legend.background),i.legend.backgroundOpacity),p.lineStyle(1,dI(i.legend.backgroundStroke),i.legend.backgroundOpacity,0),p.drawRect(u,y,80,h),t.title){var X=t.title,H=GI({color:i.legend.labelColor,size:i.legend.labelFontSize,fontWeight:i.legend.labelFontWeight,fontFamily:i.legend.labelFontFamily}),Y=new I.libraries.PIXI.Text(X,Object(m.a)(Object(m.a)({},H),{},{fontWeight:"bold"}));Y.anchor.x=0,Y.anchor.y=0,Y.position.x=u+10,Y.position.y=y+10;var R=new I.libraries.PIXI.TextStyle(Object(m.a)(Object(m.a)({},H),{},{fontWeight:"bold"})),f=I.libraries.PIXI.TextMetrics.measureText(X,R);p.addChild(Y),G.top+=f.height+4,G.height-=f.height+4}var K=Object(r.a)(V,2),w=K[0],J=K[1],S=J-w,F=DI(t)&&t.scaleOffset?t.scaleOffset:[0,1];Object(b.a)(Array(G.height).keys()).forEach((function(I){var g,C=Array.from(F).sort();if(I/G.height>=C[1])g=J;else if(I/G.height<=C[0])g=w;else{var A=Object(W.a)().domain([G.height*C[0],G.height*C[1]]).range([0,G.height]);g=Object(W.a)().domain([0,G.height]).range([w,J])(A(I))}p.beginFill(dI(B(g)),1),p.lineStyle(1,dI(i.legend.backgroundStroke),0,.5),p.drawRect(u+G.left,y+G.top+G.height-I,G.width,1)}));g.colorBrushes=g.gLegend.append("g").attr("class",e).selectAll(".brush").data(F.map((function(I,g){return{y:I,id:g}}))).enter().append("rect").attr("class","brush").attr("pointer-events","all").attr("cursor","ns-resize").attr("transform",(function(I){return"translate(".concat(u+G.left,", ").concat(y+G.top-2+G.height-G.height*I.y,")")})).attr("width","".concat(G.width,"px")).attr("height","".concat(4,"px")).attr("fill","lightgrey").attr("stroke","black").attr("stroke-width","0.5px").call(I.libraries.d3Drag.drag().on("start",(function(){g.startEvent=I.libraries.d3Selection.event.sourceEvent})).on("drag",(function(C){if(t&&t.scaleOffset){var A=I.libraries.d3Selection.event.sourceEvent,i=g.startEvent.clientY-A.clientY,l=[t.scaleOffset[0],t.scaleOffset[1]];0===C.id?l[0]+=i/G.height:l[1]+=i/G.height,l[0]=Math.min(1,Math.max(0,l[0])),l[1]=Math.min(1,Math.max(0,l[1])),g.updateScaleOffsetFromOriginalSpec(o._renderingId,l,e),g.shareScaleOffsetAcrossTracksAndTiles(l,e),g.draw(),g.startEvent=I.libraries.d3Selection.event.sourceEvent}})));var N=Math.max(Math.ceil(G.height/30),2),v=B.ticks(N).filter((function(I){return V[0]<=I&&I<=V[1]}));1===v.length&&(v=B.ticks(N+1).filter((function(I){return V[0]<=I&&I<=V[1]})));p.lineStyle(1,dI(i.legend.tickColor),1,.5);var k=GI({color:i.legend.labelColor,size:i.legend.labelFontSize,fontWeight:i.legend.labelFontWeight,fontFamily:i.legend.labelFontFamily}),D=u+G.left;v.forEach((function(g){var C=y+G.top+G.height-(g-w)/S*G.height;C===y+G.top?C+=.5:C===y+G.top+G.height&&(C-=.5),p.moveTo(D-3,C),p.lineTo(D,C);var A=new I.libraries.PIXI.Text(g,k);A.anchor.x=1,A.anchor.y=.5,A.position.x=D-6,A.position.y=C,p.addChild(A)})),l.offsetRight=a-u}}}function BI(I,g,C){var A,i,e,l,o,t=C.spec();if(t.width&&t.height){var c=C.data(),n=Object(r.a)(g.dimensions,2),d=n[0],s=n[1],a="circular"===t.layout,Z=null!=(A=t.innerRadius)?A:220,m=null!=(i=t.outerRadius)?i:300,b=null!=(e=t.startAngle)?e:0,h=null!=(l=t.endAngle)?l:360,G=m-Z,u=d/2,y=s/2,B=null!=(o=C.getChannelDomainArray("row"))?o:["___SINGLE_ROW___"],V=s/B.length;B.forEach((function(g){var A=C.encodedValue("row",g);c.filter((function(I){return!UI(I,t.row)||UI(I,t.row)===g})).forEach((function(g){var i,e,l=C.encodedPIXIProperty("x",g),o=C.encodedPIXIProperty("xe",g),c=C.encodedPIXIProperty("x1",g),n=C.encodedPIXIProperty("x1e",g),Z=C.encodedPIXIProperty("y",g),B=C.encodedPIXIProperty("stroke",g),p=C.encodedPIXIProperty("strokeWidth",g),X=C.encodedPIXIProperty("color",g),W=C.encodedPIXIProperty("opacity",g);if("undefined"!==typeof o){var H=[l,o].sort((function(I,g){return I-g})),Y=Object(r.a)(H,2);l=Y[0],o=Y[1]}if("undefined"!==typeof c&&"undefined"!==typeof n){var R=[c,n].sort((function(I,g){return I-g})),f=Object(r.a)(R,2);c=f[0],n=f[1]}var K="undefined"!==typeof o&&"undefined"!==typeof c&&"undefined"!==typeof n&&Math.abs(l-o)>.1&&Math.abs(c-n)>.1;if(!K&&void 0===o&&!NI(t)){if(void 0===c&&void 0===n)return;o=void 0!==c?c:n}if(!K&&Math.abs(l-o)<=.1&&Math.abs(c-n)<=.1&&(l=(l+o)/2,o=(c+n)/2),I.lineStyle(p,dI(B),W,.5),K){I.beginFill(dI("none"===X?"white":X),"none"===X?0:W);var w=l,J=o,S=c,F=n,N=[w,J].sort((function(I,g){return I-g})),v=Object(r.a)(N,2);w=v[0],J=v[1];var k=[S,F].sort((function(I,g){return I-g})),D=Object(r.a)(k,2);if(S=D[0],F=D[1],w>d||F<0||Math.abs(F-w)<.5)return;if(a){if(w<0||F>d)return;var z=m-A/s*G,M=aI(w,d,z,u,y,b,h),U=aI(J,d,z,u,y,b,h),x=aI(S,d,z,u,y,b,h),T=aI(F,d,z,u,y,b,h);I.moveTo(M.x,M.y),I.bezierCurveTo(u,y,u,y,T.x,T.y),I.arc(u,y,m,ZI(T.x,T.y,u,y),ZI(x.x,x.y,u,y),!1),I.bezierCurveTo(u,y,u,y,U.x,U.y),I.arc(u,y,m,ZI(U.x,U.y,u,y),ZI(M.x,M.y,u,y),!1),I.endFill()}else I.moveTo(w,A),I.lineTo(J,A),I.lineTo(F,A+V),I.lineTo(S,A+V),I.lineTo(w,A),I.closePath()}else{if(NI(t))return void("curve"===(null==(i=t.style)?void 0:i.linkConnectionType)?(I.moveTo(l,0),I.bezierCurveTo(l/5*4,(A+V-Z)/2,l/2,(A+V-Z)/5*4,0,A+V-Z)):"straight"===(null==(e=t.style)?void 0:e.linkConnectionType)?(I.moveTo(l,0),I.lineTo(0,A+V-Z)):(I.moveTo(l,0),I.lineTo(l,A+V-Z),I.lineTo(0,A+V-Z)));if(a){for(var Q,P,O=function(g){var C=function(I){return m-1/(1+Math.exp(function(I){return Math.log(I/(1-I))}(I)))*G+3},A=function(I,g,C){return((C-g)*I+g)/d},i=u+C(g)*Math.cos(2*-A(g,l,o)*Math.PI-Math.PI/2),e=y+C(g)*Math.sin(2*-A(g,l,o)*Math.PI-Math.PI/2);Q&&P&&(I.lineStyle(p,dI(B),W,.5),I.moveTo(Q,P),I.lineTo(i,e)),Q=i,P=e},j=0;j<=1;j+=.02)O(j);return}I.moveTo(o,A+V),I.lineTo(l,A)}}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}var VI=["x","xe","x1","x1e","y","ye","y1","y1e","color","size","row","stroke","strokeWidth","opacity","text"];function pI(I,g,C,A){if(I&&g&&C&&"brush"!==A.spec().mark){if(["x","x1","x1e","xe"].forEach((function(I){A.setChannelScale(I,g._xScale)})),NI(A.spec())||SI(e=A.spec())&&!DI(e.x)&&DI(e.y)&&"genomic"===e.y.type){var i=g._yScale.copy();i.range([i.range()[1],i.range()[0]]),["y","y1","y1e","ye"].forEach((function(I){A.setChannelScale(I,i)}))}var e,l=Object(r.a)(g.dimensions,2),o=l[0],t=l[1];switch(A.spec().mark){case"point":!function(I,g,C){var A,i,e,l,o,t=C.spec();if(t.width&&t.height){var c=C.data(),n=Object(r.a)(I.dimensions,2),d=n[0],s=n[1],a=C.getChannelScale("x").invert(d)-C.getChannelScale("x").invert(0),Z="circular"===t.layout,m=null!=(A=t.innerRadius)?A:220,b=null!=(i=t.outerRadius)?i:300,h=null!=(e=t.startAngle)?e:0,G=null!=(l=t.endAngle)?l:360,u=b-m,y=d/2,B=s/2,V=null!=(o=C.getChannelDomainArray("row"))?o:["___SINGLE_ROW___"],p=s/V.length;V.forEach((function(I){var A=C.encodedValue("row",I);c.filter((function(g){return!UI(g,t.row)||UI(g,t.row)===I})).forEach((function(I){var i=C.encodedPIXIProperty("x-center",I),e=C.encodedPIXIProperty("y-center",I),l=C.encodedPIXIProperty("color",I),o=C.encodedPIXIProperty("p-size",I),t=C.encodedPIXIProperty("strokeWidth",I),c=C.encodedPIXIProperty("stroke",I),n=C.encodedPIXIProperty("opacity",I),m=C.markVisibility(I,{width:o,zoomLevel:a}),r=Math.min(m,n);if(!(o<=.1||0===r||i+o<0||i-o>d))if(g.lineStyle(t,dI(c),r,1),Z){var V=aI(i,d,b-(A+p-e)/s*u,y,B,h,G);g.beginFill(dI(l),r),g.drawCircle(V.x,V.y,o),C.getMouseEventModel().addPointBasedEvent(I,[V.x,V.y,o])}else g.beginFill(dI(l),r),g.drawCircle(i,A+p-e,o),C.getMouseEventModel().addPointBasedEvent(I,[i,A+p-e,o])}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}(g,C.graphics,A);break;case"bar":!function(I,g,C){var A,i,e,l,o,t,c,n=C.spec();if(n.width&&n.height){var d=C.data(),s=Object(r.a)(I.dimensions,2),a=s[0],Z=s[1],m=I.tilesetInfo.tile_size,h=I.getTilePosAndDimensions(g.gos.zoomLevel,g.gos.tilePos,m),G=h.tileX,y=h.tileWidth,B=C.getChannelScale("x").invert(a)-C.getChannelScale("x").invert(0),V="circular"===n.layout,p=null!=(A=n.innerRadius)?A:220,X=null!=(i=n.outerRadius)?i:300,W=null!=(e=n.startAngle)?e:0,H=null!=(l=n.endAngle)?l:360,Y=X-p,R=a/2,f=Z/2,K=C.getChannelScale("x"),w=K(G+y/m)-K(G),J=null!=(o=C.getChannelDomainArray("row"))?o:["___SINGLE_ROW___"],S=Z/J.length,F=!DI(n.row)||DI(n.row)&&"undefined"===typeof n.row.clip||n.row.clip,N=DI(n.y)?null==(t=n.y)?void 0:t.baseline:void 0,v=null!=(c=C.encodedValue("y",N))?c:0,k=g.graphics;if(MI(n)){var D=C.getGenomicChannel();if(!D||!D.field)return void console.warn("Genomic field is not provided in the specification");var z=Object(u.a)(d,(function(I){return I[D.field]}));Object(b.a)(z.keys()).forEach((function(I){var g,A=0;null==(g=z.get(I))||g.forEach((function(I){var g=C.encodedPIXIProperty("color",I),i=C.encodedPIXIProperty("stroke",I),e=C.encodedPIXIProperty("strokeWidth",I),l=C.encodedPIXIProperty("opacity",I),o=C.encodedPIXIProperty("y",I),t=C.encodedPIXIProperty("width",I,{tileUnitWidth:w}),c=C.encodedPIXIProperty("x-start",I,{markWidth:t}),n=c+t,d=C.markVisibility(I,{width:t,zoomLevel:B}),s=Math.min(d,l);if(!(0===s||t<=0||o<=0)){k.lineStyle(e,dI(i),s,0);var m=[];if(V){var b=X-(S-A)/Z*Y,r=X-(S-o-A)/Z*Y,h=aI(c,a,r,R,f,W,H),G=sI(c,a,W,H),u=sI(c+t,a,W,H);k.beginFill(dI(g),"none"===g?0:s),k.moveTo(h.x,h.y),k.arc(R,f,r,G,u,!0),k.arc(R,f,b,u,G,!1),m=Array.from(k.currentPath.points),k.closePath()}else{k.beginFill(dI(g),"none"===g?0:s),k.drawRect(c,S-o-A,t,o);var y=S-o-A,p=y+o;m=[c,y,c,p,n,p,n,y]}C.getMouseEventModel().addPolygonBasedEvent(I,m),A+=o}}))}))}else J.forEach((function(I){var g=C.encodedValue("row",I);d.filter((function(g){var C=UI(g,n.row);return!C||C===I})).forEach((function(I){var A=C.encodedPIXIProperty("color",I),i=C.encodedPIXIProperty("stroke",I),e=C.encodedPIXIProperty("strokeWidth",I),l=C.encodedPIXIProperty("opacity"),o=C.encodedPIXIProperty("y",I),t=C.encodedPIXIProperty("ye",I);if("undefined"!==typeof t&&o>t){var c=[t,o];o=c[0],t=c[1]}var d,s=C.encodedPIXIProperty("width",I,{tileUnitWidth:w}),m=C.encodedPIXIProperty("x-start",I,{markWidth:s}),b=m+s;"undefined"===typeof t?(d=g+S-v-o,t=g+S-v,(DI(n.y)&&n.y.flip||n.flipY)&&(t=d,d=g)):(d=g+S-t,t=g+S-o),F&&(d=Math.max(g,d),d=Math.min(d,g+S),t=Math.max(g,t),t=Math.min(t,g+S));var r=C.markVisibility(I,{width:s,zoomLevel:B}),h=Math.min(r,l);if(0!==h&&0!==s&&0!==o){k.lineStyle(e,dI(i),h,0);var G=[];if(V){var u=X-d/Z*Y,y=X-t/Z*Y,p=aI(m,a,y,R,f,W,H),K=sI(m,a,W,H),J=sI(m+s,a,W,H);k.beginFill(dI(A),"none"===A?0:h),k.moveTo(p.x,p.y),k.arc(R,f,y,K,J,!0),k.arc(R,f,u,J,K,!1),G=Array.from(k.currentPath.points),k.closePath()}else k.beginFill(dI(A),"none"===A?0:h),k.drawRect(m,d,s,t-d),G=[m,d,m,t,b,t,b,d];C.getMouseEventModel().addPolygonBasedEvent(I,G)}}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}(g,C,A);break;case"line":!function(I,g,C,A){var i,e,l,o,t,c,n=g.spec();if(n.width&&n.height){var d=g.data(),s="circular"===n.layout,a=null!=(i=n.innerRadius)?i:220,Z=null!=(e=n.outerRadius)?e:300,m=null!=(l=n.startAngle)?l:0,b=null!=(o=n.endAngle)?o:360,r=Z-a,h=C/2,G=A/2,u=null!=(t=g.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],y=A/u.length,B=null!=(c=g.getChannelDomainArray("color"))?c:["___SINGLE_COLOR___"];u.forEach((function(i){var e=g.encodedValue("row",i);B.forEach((function(l){d.filter((function(I){return(!UI(I,n.row)||UI(I,n.row)===i)&&(!UI(I,n.color)||UI(I,n.color)===l)})).sort((function(I,g){return UI(I,n.x)-UI(g,n.x)})).forEach((function(i,l){var o=g.encodedPIXIProperty("x",i),t=g.encodedPIXIProperty("y",i),c=g.encodedPIXIProperty("size",i),n=g.encodedPIXIProperty("color",i),d=g.encodedPIXIProperty("opacity",i);if(I.lineStyle(c,dI(n),d,.5),s){var a=aI(o,C,Z-(e+y-t)/A*r,h,G,m,b);0===l?I.moveTo(a.x,a.y):I.lineTo(a.x,a.y),g.getMouseEventModel().addPointBasedEvent(i,[a.x,a.y,1])}else 0===l?I.moveTo(o,e+y-t):I.lineTo(o,e+y-t),g.getMouseEventModel().addPointBasedEvent(i,[o,e+y-t,1])}))}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}(C.graphics,A,o,t);break;case"area":!function(I,g,C,A){var i,e,l,o,t,c,n=A.spec(),d=A.data(),s=Object(r.a)(g.dimensions,2),a=s[0],Z=s[1],m=g.tilesetInfo.tile_size,h=g.getTilePosAndDimensions(C.gos.zoomLevel,C.gos.tilePos,m).tileX,G="circular"===n.layout,V=null!=(i=n.innerRadius)?i:220,p=null!=(e=n.outerRadius)?e:300,X=null!=(l=n.startAngle)?l:0,W=null!=(o=n.endAngle)?o:360,H=p-V,Y=a/2,R=Z/2,f=g._xScale,K=null!=(t=A.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],w=Z/K.length,J=null!=(c=A.getChannelDomainArray("color"))?c:["___SINGLE_COLOR___"],S=A.encodedPIXIProperty("opacity"),F=A.encodedPIXIProperty("strokeWidth"),N=A.encodedPIXIProperty("stroke"),v=C.graphics;if(MI(n)){var k=A.getGenomicChannel();if(!k||!k.field)return void console.warn("Genomic field is not provided in the specification");var D=Object(u.a)(d,(function(I){return I[k.field]})),z=Object(b.a)(D.keys());v.lineStyle(F,dI(N),S,1);var M={};J.forEach((function(I){var g=[],C=[];z.forEach((function(i,e,l){var o,t;null==(t=null==(o=D.get(i))?void 0:o.filter((function(g){return UI(g,n.color)===I})))||t.forEach((function(I){var o=f(+i),t=Object(y.a)([A.encodedPIXIProperty("y",I),0]);"undefined"===typeof M[i]&&(M[i]=0);var c=w-t-M[i],n=w-M[i];if(G){if(0===e){var d=aI(o,a,p-w/Z*H,Y,R,X,W);g.push([d.x,d.y]),C.push([d.x,d.y])}var s=aI(o,a,p-c/Z*H,Y,R,X,W);g.push([s.x,s.y]);var m=aI(o,a,p-n/Z*H,Y,R,X,W);if(C.push([m.x,m.y]),e===l.length-1){var b=aI(o,a,p-w/Z*H,Y,R,X,W);g.push([b.x,b.y]),C.push([b.x,b.y])}A.getMouseEventModel().addPointBasedEvent(I,[m.x,m.y,1])}else 0===e&&(g.push([o,w]),C.push([o,w])),g.push([o,c]),C.push([o,n]),e===l.length-1&&(g.push([o,w]),C.push([o,w])),A.getMouseEventModel().addPointBasedEvent(I,[o,c,1]);M[i]+=t}))}));var i=A.encodedValue("color",I);v.beginFill(dI(i),S),v.drawPolygon([].concat(Object(b.a)(g.reduce((function(I,g){return I.concat(g)}))),Object(b.a)(C.reverse().reduce((function(I,g){return I.concat(g)}))))),v.endFill()}))}else K.forEach((function(I){var g=A.encodedValue("row",I);v.lineStyle(F,dI(N),S,0),J.forEach((function(C){var i=[],e=[],l=p-(g+w)/Z*H;d.filter((function(g){return("undefined"===typeof UI(g,n.row)||UI(g,n.row)===I)&&("undefined"===typeof UI(g,n.color)||UI(g,n.color)===C)})).sort((function(I,g){return A.encodedPIXIProperty("x",I)-A.encodedPIXIProperty("x",g)})).forEach((function(I,C,o){var t=Object(B.a)([Object(y.a)([A.encodedPIXIProperty("y",I),0]),w]),c=A.encodedPIXIProperty("x",I);if(G){var n=aI(c,a,l,Y,R,X,W);i.push([n.x,n.y]),0===C&&e.push(n.x,n.y);var d=aI(c,a,p-(g+w-t)/Z*H,Y,R,X,W);if(e.push(d.x,d.y),C===o.length-1){var s=aI(c,a,p-(g+w)/Z*H,Y,R,X,W);e.push(s.x,s.y)}A.getMouseEventModel().addPointBasedEvent(I,[d.x,d.y,1])}else{if(0===C&&e.push(c,g+w),e.push(c,g+w-t),C===o.length-1){var m=f(h);e.push(c,g+w),e.push(m,g+w)}A.getMouseEventModel().addPointBasedEvent(I,[c,g+w-t,1])}})),G&&0!==i.length&&e.push.apply(e,Object(b.a)(i.reverse().reduce((function(I,g){return I.concat(g)}))));var o=A.encodedValue("color",C);v.beginFill(dI(o),S),v.drawPolygon(e),v.endFill()}))}))}(0,g,C,A);break;case"rect":!function(I,g,C,A){var i,e,l,o,t,c,n=A.spec(),d=A.data(),s=Object(r.a)(g.dimensions,2),a=s[0],Z=s[1],m=g.tilesetInfo.tile_size,b=g.getTilePosAndDimensions(C.gos.zoomLevel,C.gos.tilePos,m),h=b.tileX,G=b.tileWidth,u="circular"===n.layout,y=null!=(i=n.innerRadius)?i:220,B=null!=(e=n.outerRadius)?e:300,V=null!=(l=n.startAngle)?l:0,p=null!=(o=n.endAngle)?o:360,X=B-y,W=a/2,H=Z/2,Y=g._xScale,R=Y(h+G/m)-Y(h),f=null!=(t=A.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],K=Z/f.length,w=DI(n.row)&&n.row.padding?n.row.padding:0,J=null!=(c=A.getChannelDomainArray("y"))?c:["___SINGLE_Y_POSITION___"],S=K/J.length-2*w,F=C.graphics;d.forEach((function(I){var C,i=A.encodedPIXIProperty("row",I)+w,e=A.encodedPIXIProperty("x",I),l=A.encodedPIXIProperty("color",I),o=A.encodedPIXIProperty("stroke",I),t=A.encodedPIXIProperty("strokeWidth",I),c=A.encodedPIXIProperty("opacity",I),n=A.encodedPIXIProperty("width",I,{markWidth:R}),d=A.encodedPIXIProperty("height",I,{markHeight:S}),s=A.encodedPIXIProperty("y",I),m=A.markVisibility(I,{width:n,zoomLevel:g._xScale.invert(a)-g._xScale.invert(0)}),b=Math.min(m,c);if(!(0===b||0===d||n<=1e-4)){var r=e,h=e+n,G=i+K-s-d/2,y=i+K-s+d/2,Y=null!=(C=A.visualPropertyByChannel("size",I))?C:void 0;F.lineStyle(t,dI(o),b,.5);var f=[];if(u){if(h<0||a<r)return;var J=B-G/Z*X,N=B-y/Z*X;if(Y){var v=B-(i+s)/Z*X;J=v-Y/2,N=v+Y/2}var k=aI(r,a,N,W,H,V,p),D=sI(r,a,V,p),z=sI(h,a,V,p);F.beginFill(dI("none"===l?"white":l),"none"===l?0:b),F.moveTo(k.x,k.y),F.arc(W,H,N,D,z,!0),F.arc(W,H,J,z,D,!1),f=Array.from(F.currentPath.points),F.closePath()}else F.beginFill(dI("none"===l?"white":l),"none"===l?0:b),F.drawRect(r,G,h-r,y-G),f=[r,G,r,y,h,y,h,G];A.getMouseEventModel().addPolygonBasedEvent(I,f)}}))}(0,g,C,A);break;case"triangleLeft":case"triangleRight":case"triangleBottom":!function(I,g,C,A){var i,e,l,o,t,c,n,d=g.spec();if(d.width&&d.height){var s=g.data(),a=g.getChannelScale("x").invert(C)-g.getChannelScale("x").invert(0),Z="circular"===d.layout,m=null!=(i=d.innerRadius)?i:220,b=null!=(e=d.outerRadius)?e:300,r=null!=(l=d.startAngle)?l:0,h=null!=(o=d.endAngle)?o:360,G=b-m,u=C/2,y=A/2,B=null!=(t=g.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],V=A/B.length,p=null!=(c=g.getChannelDomainArray("y"))?c:["___SINGLE_Y___"],X=null!=(n=g.encodedValue("size"))?n:Z?G/B.length/p.length:V/p.length;B.forEach((function(i){var e=g.encodedValue("row",i);s.filter((function(I){return!UI(I,d.row)||UI(I,d.row)===i})).forEach((function(i){var l,o,t,c=g.encodedPIXIProperty("x",i),n=g.encodedPIXIProperty("xe",i),s=null!=(l=g.encodedPIXIProperty("size",i))?l:void 0===n?X:n-c,m=g.encodedPIXIProperty("y",i),B=g.encodedPIXIProperty("strokeWidth",i),p=g.encodedPIXIProperty("stroke",i),W=g.encodedPIXIProperty("color",i),H=g.encodedPIXIProperty("opacity",i),Y=[];if(Z){var R=c||n-s,f=n||c+s,K=(R+f)/2,w=b-(e+V-m)/A*G,J=w-X/2,S=w+X/2;if("right"!==(null==(o=d.style)?void 0:o.align)||n||(R-=s,f-=s,K-=s),"triangleLeft"===d.mark){var F=aI(f,C,J,u,y,r,h),N=aI(R,C,w,u,y,r,h),v=aI(f,C,S,u,y,r,h),k=aI(f,C,J,u,y,r,h);Y=[F.x,F.y,N.x,N.y,v.x,v.y,k.x,k.y]}else if("triangleRight"===d.mark){var D=aI(R,C,J,u,y,r,h),z=aI(f,C,w,u,y,r,h),M=aI(R,C,S,u,y,r,h),U=aI(R,C,J,u,y,r,h);Y=[D.x,D.y,z.x,z.y,M.x,M.y,U.x,U.y]}else if("triangleBottom"===d.mark){f=K+s/2;var x=aI(R=K-s/2,C,S,u,y,r,h),T=aI(f,C,S,u,y,r,h),Q=aI(K,C,J,u,y,r,h),P=aI(R,C,S,u,y,r,h);Y=[x.x,x.y,T.x,T.y,Q.x,Q.y,P.x,P.y]}var O=g.markVisibility(i,{width:f-R,zoomLevel:a}),j=Math.min(O,H);I.lineStyle(B,dI(p),f-R>2?j:0,0),I.beginFill(dI(W),j),I.drawPolygon(Y),I.endFill()}else{var L=c||n-s,E=n||c+s,_=L+(E-L)/2,$=e+V-m,q=e+V-m-X/2,II=e+V-m+X/2;"right"!==(null==(t=d.style)?void 0:t.align)||n||(L-=s,E-=s,_-=s),Y={triangleLeft:[E,q,L,$,E,II,E,q],triangleRight:[L,q,E,$,L,II,L,q],triangleBottom:[L,q,E,q,_,II,L,q]}[d.mark];var gI=g.markVisibility(i,{width:E-L,zoomLevel:a}),CI=Math.min(gI,H);I.lineStyle(B,dI(p),E-L>2?CI:0,.5),I.beginFill(dI(W),CI),I.drawPolygon(Y),I.endFill()}g.getMouseEventModel().addPolygonBasedEvent(i,Y)}))}))}else console.warn("Size of a track is not properly determined, so visual mark cannot be rendered")}(C.graphics,A,o,t);break;case"text":!function(I,g,C,A){var i,e,l,o,t,c,n,d,s,a,Z=A.spec(),h=A.data(),G=Object(r.a)(g.dimensions,2),y=G[0],B=G[1],V="circular"===Z.layout,p=null!=(i=Z.innerRadius)?i:220,X=null!=(e=Z.outerRadius)?e:300,W=null!=(l=Z.startAngle)?l:0,H=null!=(o=Z.endAngle)?o:360,Y=X-p,R=y/2,f=B/2,K=null!=(t=A.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],w=B/K.length,J=null!=(n=null==(c=Z.style)?void 0:c.dx)?n:0,S=null!=(s=null==(d=Z.style)?void 0:d.dy)?s:0,F=(null==(a=Z.style)?void 0:a.textAnchor)?Z.style.textAnchor:"middle";if(MI(Z)){if(V)return;var N=C.graphics,v=A.getGenomicChannel();if(!v||!v.field)return void console.warn("Genomic field is not provided in the specification");var k=Object(u.a)(h,(function(I){return I[v.field]}));Object(b.a)(k.keys()).forEach((function(C){var i,e=0;null==(i=k.get(C))||i.forEach((function(C){var i,l,o,t,c,n,d,s,a=A.encodedPIXIProperty("text",C),b=A.encodedPIXIProperty("color",C),r=A.encodedPIXIProperty("x",C)+J,h=A.encodedPIXIProperty("xe",C)+J,G=A.encodedPIXIProperty("x-center",C)+J,u=A.encodedPIXIProperty("y",C)+S,B=A.encodedPIXIProperty("size",C),V=A.encodedPIXIProperty("stroke",C),p=A.encodedPIXIProperty("strokeWidth",C),X=A.encodedPIXIProperty("opacity",C);if(!(G<0||G>y)&&!(g.textsBeingUsed>1e3)){var W,H=Object(m.a)(Object(m.a)({},mI),{},{fontSize:null!=B?B:(null==(i=Z.style)?void 0:i.textFontSize)?"".concat(null==(l=Z.style)?void 0:l.textFontSize,"px"):mI.fontSize,stroke:null!=(t=null!=V?V:null==(o=Z.style)?void 0:o.textStroke)?t:mI.stroke,strokeThickness:null!=(n=null!=p?p:null==(c=Z.style)?void 0:c.textStrokeWidth)?n:mI.strokeThickness,fontWeight:null!=(s=null==(d=Z.style)?void 0:d.textFontWeight)?s:mI.fontWeight}),Y=new I.libraries.PIXI.TextStyle(H);g.textGraphics.length>g.textsBeingUsed?((W=g.textGraphics[g.textsBeingUsed]).style.fill=b,W.visible=!0,W.text=a,W.alpha=1):(W=new I.libraries.PIXI.Text(a,Object(m.a)(Object(m.a)({},H),{},{fill:b})),g.textGraphics.push(W));var R=I.libraries.PIXI.TextMetrics.measureText(a,Y);g.textsBeingUsed++;var f=A.markVisibility(C,Object(m.a)(Object(m.a)({},R),{},{zoomLevel:g._xScale.invert(y)-g._xScale.invert(0)})),K=Math.min(f,X);if(!a||0===K)return g.textsBeingUsed--,void(W.visible=!1);W.alpha=K,W.resolution=8,W.updateText(),W.texture.baseTexture.scaleMode=I.libraries.PIXI.SCALE_MODES.LINEAR;var F=new I.libraries.PIXI.Sprite(W.texture);F.x=r,F.y=w-u-e,F.width=h-r,F.height=u,N.addChild(F),e+=u}}))}))}else K.forEach((function(i){var e=C.graphics,l=A.encodedValue("row",i);h.filter((function(I){return!UI(I,Z.row)||UI(I,Z.row)===i})).forEach((function(C){var i,o,t,c,n,d,s,a,b=A.encodedPIXIProperty("text",C),r=A.encodedPIXIProperty("color",C),h=A.encodedPIXIProperty("x-center",C)+J,G=A.encodedPIXIProperty("y",C)+S,u=A.encodedPIXIProperty("size",C),p=A.encodedPIXIProperty("stroke",C),K=A.encodedPIXIProperty("strokeWidth",C),N=A.encodedPIXIProperty("opacity",C);if(!(h<0||h>y)&&!(g.textsBeingUsed>1e3)){var v,k=Object(m.a)(Object(m.a)({},mI),{},{fontSize:null!=u?u:(null==(i=Z.style)?void 0:i.textFontSize)?"".concat(null==(o=Z.style)?void 0:o.textFontSize,"px"):mI.fontSize,stroke:null!=(c=null!=p?p:null==(t=Z.style)?void 0:t.textStroke)?c:mI.stroke,strokeThickness:null!=(d=null!=K?K:null==(n=Z.style)?void 0:n.textStrokeWidth)?d:mI.strokeThickness,fontWeight:null!=(a=null==(s=Z.style)?void 0:s.textFontWeight)?a:mI.fontWeight}),D=new I.libraries.PIXI.TextStyle(k);g.textGraphics.length>g.textsBeingUsed?((v=g.textGraphics[g.textsBeingUsed]).style.fill=r,v.visible=!0,v.text=b,v.alpha=1):(v=new I.libraries.PIXI.Text(b,Object(m.a)(Object(m.a)({},k),{},{fill:r})),g.textGraphics.push(v));var z=I.libraries.PIXI.TextMetrics.measureText(b,D);g.textsBeingUsed++;var M=A.markVisibility(C,Object(m.a)(Object(m.a)({},z),{},{zoomLevel:g._xScale.invert(y)-g._xScale.invert(0)})),U=Math.min(M,N);if(!b||0===U)return g.textsBeingUsed--,void(v.visible=!1);v.alpha=U,v.anchor.y=.5,v.anchor.x="middle"===F?.5:"start"===F?0:1;var x=[];if(V){var T=X-(l+w-G)/B*Y,Q=aI(h,y,T,R,f,W,H);v.x=Q.x,v.y=Q.y,v.resolution=4;var P=z.width/(2*T*Math.PI)*y,O=h-P/2,j=h+P/2;if(O<0){var L=-O;O=0,j+=L}else if(j>y){var E=j-y;j=y,O-=E}for(var _=[],$=[],q=[],II=j;II>=O;II-=P/10){var gI=aI(II,y,T,R,f,W,H);_.push(new I.libraries.PIXI.Point(gI.x,gI.y));var CI=aI(II,y,T+z.height/2,R,f,W,H),AI=aI(II,y,T-z.height/2,R,f,W,H);$.push(CI.x,CI.y),II===j&&q.push(CI.y,CI.x),q.push(AI.y,AI.x)}v.updateText();var iI=new I.libraries.PIXI.SimpleRope(v.texture,_);iI.alpha=U,e.addChild(iI),q.reverse(),x=$.concat(q)}else{v.position.x=h,v.position.y=l+w-G,e.addChild(v);var eI=z.height,lI=z.width,oI=v.position.y-eI/2,tI=oI+eI,cI=0,nI=0;"start"===F?(cI=h,nI=h+lI):"middle"===F?(cI=h-lI/2,nI=h+lI/2):(cI=h-lI,nI=h),x=[cI,oI,cI,tI,nI,tI,nI,oI]}A.getMouseEventModel().addPolygonBasedEvent(C,x)}}))}))}(I,g,C,A);break;case"rule":!function(I,g,C,A){var i,e,l,o,t,c,n,d,s=A.spec(),a=A.data(),Z=Object(r.a)(g.dimensions,2),m=Z[0],b=Z[1],h="circular"===s.layout,G=null!=(i=s.innerRadius)?i:220,u=null!=(e=s.outerRadius)?e:300,y=null!=(l=s.startAngle)?l:0,B=null!=(o=s.endAngle)?o:360,V=u-G,p=m/2,X=b/2,W=null!=(t=A.getChannelDomainArray("row"))?t:["___SINGLE_ROW___"],H=b/W.length,Y=null==(c=s.style)?void 0:c.dashed,R=null==(n=s.style)?void 0:n.linePattern,f=null==(d=s.style)?void 0:d.curve,K=C.graphics;W.forEach((function(I){var C=A.encodedValue("row",I);a.filter((function(g){return!UI(g,s.row)||UI(g,s.row)===I})).forEach((function(I){var i=A.encodedPIXIProperty("x",I),e=A.encodedPIXIProperty("xe",I),l=A.encodedPIXIProperty("y",I),o=A.encodedPIXIProperty("color",I),t=A.encodedPIXIProperty("strokeWidth",I),c=A.encodedPIXIProperty("opacity",I),n=A.markVisibility(I,{width:e-i,zoomLevel:g._xScale.invert(m)-g._xScale.invert(0)}),d=Math.min(n,c);if(K.lineStyle(t,dI(o),d,.5),e||s.y&&"field"in s.y)if(!e&&l)if(h){K.lineStyle(t,dI(o),0,.5);var a=u-(C+l)/b*V,Z=a+t/2,G=a-t/2,W=aI(0,m,G,p,X,y,B),w=sI(0,m,y,B),J=sI(m,m,y,B);K.beginFill(dI(o),d),K.moveTo(W.x,W.y),K.arc(p,X,G,w,J,!0),K.arc(p,X,Z,J,w,!1),K.closePath()}else if(Y){var S=Object(r.a)(Y,2),F=S[0],N=S[1],v=0;do{K.moveTo(v,C+H-l),K.lineTo(v+F,C+H-l),v+=F+N}while(v<m)}else K.moveTo(0,C+H-l),K.lineTo(m,C+H-l);else{if(h){if(0===t)return;K.lineStyle(t,dI(o),0,.5);var k=u-(C+l)/b*V,D=k+t/2,z=k-t/2,M=aI(i,m,z,p,X,y,B),U=sI(i,m,y,B),x=sI(e,m,y,B);K.beginFill(dI(o),d),K.moveTo(M.x,M.y),K.arc(p,X,z,U,x,!0),K.arc(p,X,D,x,U,!1),K.closePath()}else if(Y){var T=Object(r.a)(Y,2),Q=T[0],P=T[1],O=i;do{K.moveTo(O,C+H-l),K.lineTo(O+Q,C+H-l),O+=Q+P}while(O<e)}else if(void 0===f)K.moveTo(i,C+H-l),K.lineTo(e,C+H-l);else if("top"===f){var j=i+(e-i)/2;K.moveTo(i,C+H-l+1),K.lineTo(j,C+H-l-1),K.moveTo(j,C+H-l-1),K.lineTo(e,C+H-l+1)}if(R&&void 0===f&&!h){var L=R.type,E=R.size,_=Math.max(i,0);K.lineStyle(0);for(var $=2*E,q=0;_<Math.min(e,m)&&q<100;){var II=_,gI=_+E,CI=C+H-l,AI=CI-E/2,iI=CI+E/2;K.beginFill(dI(o),d),K.drawPolygon("triangleLeft"===L?[gI,AI,II,CI,gI,iI,gI,AI]:[II,AI,gI,CI,II,iI,II,AI]),K.endFill(),_+=E+$,q++}}}else{if(h)return;if(Y){var eI=Object(r.a)(Y,2),lI=eI[0],oI=eI[1],tI=0;do{K.moveTo(i,tI),K.lineTo(i,tI+lI),tI+=lI+oI}while(tI<b)}else K.moveTo(i,0),K.lineTo(i,b)}}))}))}(0,g,C,A);break;case"betweenLink":BI(C.graphics,g,A);break;case"withinLink":bI(C.graphics,g,A);break;default:console.warn("Unsupported mark type")}}}function XI(I,g,C,A,i){if(I&&g&&C&&"brush"!==A.spec().mark){g.pBackground.clear(),g.pBackground.removeChildren(),g.pBorder.clear(),g.pBorder.removeChildren();var e="circular"===A.spec().layout;["x","x1","x1e","xe"].forEach((function(I){A.setChannelScale(I,g._xScale)})),e?function(I,g,C,A,i){var e,l,o,t,c,n,d,s,a,Z,m,b,h=A.spec(),G=Object(r.a)(g.position,2),u=G[0],y=G[1],B=Object(r.a)(g.dimensions,2),V=B[0],p=B[1],X=null!=(e=h.innerRadius)?e:220,W=null!=(l=h.outerRadius)?l:300,H=null!=(o=h.startAngle)?o:0,Y=null!=(t=h.endAngle)?t:360,R=u+V/2,f=y+p/2,K=aI(0,V,X,R,f,H,Y),w=sI(0,V,H,Y),J=sI(V,V,H,Y),S=g.pBackground;"circular"===h.layout&&"withinLink"===h.mark||(S.lineStyle((null==(c=h.style)?void 0:c.outlineWidth)?(null==(n=h.style)?void 0:n.outlineWidth)/2.5:0,dI(null!=(s=null==(d=h.style)?void 0:d.outline)?s:"#DBDBDB"),1,1),S.beginFill(dI(null!=(Z=null==(a=A.spec().style)?void 0:a.background)?Z:i.track.background),null!=(b=null==(m=A.spec().style)?void 0:m.backgroundOpacity)?b:i.track.background&&"transparent"!==i.track.background?1:0),S.moveTo(K.x,K.y),S.arc(R,f,X,w,J,!0),S.arc(R,f,W,J,w,!1),S.closePath()),DI(h.x)&&"top"===h.x.axis&&(S.lineStyle(.5,dI("black"),0,.5),S.beginFill(dI("white"),0),S.moveTo(K.x,K.y),S.arc(R,f,W-.5,w,J,!0),S.arc(R,f,W,J,w,!1),S.closePath()),S.lineStyle(.5,dI("black"),0,.5),S.beginFill(dI("white"),0),S.moveTo(R,f),S.arc(R,f,W+3,w,J,!1),S.closePath(),S.lineStyle(1,dI("#DBDBDB"),0,0),S.beginFill(dI("white"),0),S.drawCircle(R,f,X-1)}(0,g,0,A,i):(function(I,g,C,A,i){var e,l,o,t,c,n,d=Object(r.a)(g.position,2),s=d[0],a=d[1],Z=Object(r.a)(g.dimensions,2),m=Z[0],b=Z[1],h=g.pBackground;if((null==(e=A.spec().style)?void 0:e.background)||i.track.background&&"transparent"!==i.track.background){h.clear();var G=null!=(o=null==(l=A.spec().style)?void 0:l.background)?o:i.track.background,u=Object(f.a)(null==(t=A.spec().style)?void 0:t.backgroundOpacity)?1:null==(c=A.spec().style)?void 0:c.backgroundOpacity;h.lineStyle(1,dI("white"),0,0),h.beginFill(dI(G),u),h.drawRect(s,a,m,b)}if(i.track.alternatingBackground&&"transparent"!==i.track.alternatingBackground){var y=A.spec();if(!DI(y.row)||"nominal"!==y.row.type)return;var B=null!=(n=A.getChannelDomainArray("row"))?n:["___SINGLE_ROW___"];if(0===B.length)return;B.forEach((function(I,C){var e,l,o,t;if(C%2!==0){var c=A.encodedValue("row",I),n=null!=(l=null==(e=A.spec().style)?void 0:e.background)?l:i.track.alternatingBackground,d=Object(f.a)(null==(o=A.spec().style)?void 0:o.backgroundOpacity)?1:null==(t=A.spec().style)?void 0:t.backgroundOpacity;h.lineStyle(1,dI("white"),0,0),h.beginFill(dI(n),d),h.drawRect(g.position[0],g.position[1]+c,m,b/B.length)}}))}}(0,g,0,A,i),function(I,g,C,A){var i,e,l,o,t=g.pBorder,c=Object(r.a)(g.position,2),n=c[0],d=c[1],s=Object(r.a)(g.dimensions,2),a=s[0],Z=s[1];t.lineStyle(null!=(e=null==(i=C.spec().style)?void 0:i.outlineWidth)?e:1,dI(null!=(o=null==(l=C.spec().style)?void 0:l.outline)?o:A.track.outline),1,.5),t.beginFill(dI("white"),0),t.drawRect(n,d,a,Z);var m=C.spec().x;t.lineStyle(1,dI(A.axis.baselineColor),1,.5),DI(m)&&"top"===m.axis?(t.moveTo(n,d),t.lineTo(n+a,d)):DI(m)&&"bottom"===m.axis&&(t.moveTo(n,d+Z),t.lineTo(n+a,d+Z))}(0,g,A,i)),rI(g,A,i)}}function WI(I,g,C,A,i){if(I&&g&&C&&"brush"!==A.spec().mark){var e="circular"===A.spec().layout;["x","x1","x1e","xe"].forEach((function(I){A.setChannelScale(I,g._xScale)})),e?(function(I,g,C,A,i){var e,l,o,t,c,n=A.spec(),d="circular"===n.layout,s=A.getChannelDomainArray("y"),a=A.getChannelRangeArray("y");if(d&&A.isShowYAxis()&&s&&a){var Z=Object(r.a)(g.dimensions,2),m=Z[0],b=Z[1],h=null!=(e=n.innerRadius)?e:220,G=null!=(l=n.outerRadius)?l:300,u=G-h,y=null!=(o=n.startAngle)?o:0,B=null!=(t=n.endAngle)?t:360,V=m/2,p=b/2,X=null!=(c=A.getChannelDomainArray("row"))?c:["___SINGLE_ROW___"],H=b/X.length;if(!(H/b*u<=20)){var Y=A.spec().y,R=!DI(Y)||!("axis"in Y)||"right"!==Y.axis,f=Object(W.a)().domain(s).range(a),K=C.graphics;X.forEach((function(g){var C=A.encodedValue("row",g),e=G-C/b*u,l=aI(R?0:m,m,G-(C+H)/b*u,V,p,y,B),o=aI(R?0:m,m,e,V,p,y,B);K.lineStyle(1,dI(i.axis.baselineColor),1,.5),K.moveTo(l.x,l.y),K.lineTo(o.x,o.y);var t=function(I){return 6*m/2/Math.PI/I},c=function(I){return 8*m/2/Math.PI/I},n=H/b*u,d=Math.max(Math.ceil(n/40),1),a=f.ticks(d).filter((function(I){return s[0]<=I&&I<=s[1]}));1===a.length&&(a=f.ticks(d+1).filter((function(I){return s[0]<=I&&I<=s[1]}))),K.lineStyle(1,dI(i.axis.tickColor),1,.5),a.forEach((function(I){var g=f(I),A=G-(C+H-g)/b*u,i=R?0:m-t(A),e=R?t(A):m,l=aI(i,m,A,V,p,y,B),o=sI(i,m,y,B),c=sI(e,m,y,B);K.moveTo(l.x,l.y),K.arc(V,p,A,o,c,!0),K.arc(V,p,A,c,o,!1),K.closePath()}));var Z=R?0:m-c(h),r=R?c(h):m,X=sI(Z,m,y,B),W=sI(r,m,y,B);K.moveTo(l.x,l.y),K.arc(V,p,h,X,W,!0),K.arc(V,p,h,W,X,!1),K.closePath();var Y=R?0:m-c(G),w=R?c(G):m,J=sI(Y,m,y,B),S=sI(w,m,y,B);K.moveTo(o.x,o.y),K.arc(V,p,G,J,S,!0),K.arc(V,p,G,S,J,!1),K.closePath(),a.forEach((function(g){var A=f(g),e=G-(C+H-A)/b*u,l=aI(2*t(e),m,e,V,p,y,B),o=GI({color:i.axis.labelColor,size:i.axis.labelFontSize,fontFamily:i.axis.labelFontFamily,fontWeight:i.axis.labelFontWeight}),c=new I.libraries.PIXI.Text(g,o);c.anchor.x=R?1:0,c.anchor.y=.5,c.position.x=l.x,c.position.y=l.y,c.resolution=4;for(var n=new I.libraries.PIXI.TextStyle(o),d=I.libraries.PIXI.TextMetrics.measureText(c.text,n).width/(2*e*Math.PI)*m*360/(B-y),s=R?2*t(e):m-2*t(e)-d,a=[],Z=R?2*t(e)+d:m-2*t(e);Z>=s;Z-=d/10){var r=aI(Z,m,e,V,p,y,B);a.push(new I.libraries.PIXI.Point(r.x,r.y))}c.updateText();var h=new I.libraries.PIXI.SimpleRope(c.texture,a);K.addChild(h)}))}))}}}(I,g,C,A,i),function(I,g,C,A,i){var e,l,o,t=A.spec(),c=t.title;if("circular"===t.layout&&c){var n=Object(r.a)(g.dimensions,2),d=n[0],s=n[1],a=null!=(e=t.outerRadius)?e:300,Z=null!=(l=t.startAngle)?l:0,m=null!=(o=t.endAngle)?o:360,b=d/2,h=s/2,G=C.graphics,u=a-1,y=aI(1,d,u,b,h,Z,m),B=GI({color:i.track.titleColor,size:12,fontFamily:i.axis.labelFontFamily,fontWeight:i.axis.labelFontWeight}),V=new I.libraries.PIXI.Text(c,B);V.anchor.x=1,V.anchor.y=.5,V.position.x=y.x,V.position.y=y.y,V.resolution=4;for(var p=new I.libraries.PIXI.TextStyle(B),X=I.libraries.PIXI.TextMetrics.measureText(V.text,p),W=X.width/(2*u*Math.PI)*d*360/(m-Z),H=1+W,Y=[],R=H;R>=1;R-=W/10){var f=aI(R,d,u-X.height/2,b,h,Z,m);Y.push(new I.libraries.PIXI.Point(f.x,f.y))}var K=sI(1,d,Z,m),w=sI(H+1,d,Z,m);G.lineStyle(1,dI("red"),0,.5),G.beginFill(dI(i.track.titleBackground),.5),G.moveTo(y.x,y.y),G.arc(b,h,u-X.height,K,w,!0),G.arc(b,h,u,w,K,!1),G.closePath(),V.updateText();var J=new I.libraries.PIXI.SimpleRope(V.texture,Y);G.addChild(J)}}(I,g,C,A,i)):(function(I,g,C,A,i){var e,l="circular"===A.spec().layout,o=A.getChannelDomainArray("y"),t=A.getChannelRangeArray("y");if(!l&&A.isShowYAxis()&&o&&t){var c=Object(r.a)(g.dimensions,2),n=c[0],d=c[1],s=Object(r.a)(g.position,2),a=s[0],Z=s[1],m=null!=(e=A.getChannelDomainArray("row"))?e:["___SINGLE_ROW___"],b=d/m.length;if(!(b<=20)){var h=A.spec().y,G=!DI(h)||!("axis"in h)||"right"!==h.axis,u=Object(W.a)().domain(o).range(t),y=g.pBorder;m.forEach((function(g){var C=A.encodedValue("row",g),e=G?a:a+n,l=Z+C;y.lineStyle(1,dI(i.axis.baselineColor),1,.5),y.moveTo(e,l),y.lineTo(e,l+b);var t=Math.max(Math.ceil(b/40),1),c=u.ticks(t).filter((function(I){return o[0]<=I&&I<=o[1]}));1===c.length&&(c=u.ticks(t+1).filter((function(I){return o[0]<=I&&I<=o[1]}))),y.lineStyle(1,dI(i.axis.tickColor),1,.5);var d=G?e+6:e-6;c.forEach((function(I){var g=u(I);y.moveTo(e,l+b-g),y.lineTo(d,l+b-g)})),d=G?e+8:e-8,y.moveTo(e,l),y.lineTo(d,l),y.moveTo(e,l+b),y.lineTo(d,l+b);var s=GI({color:i.axis.labelColor,size:i.axis.labelFontSize,fontFamily:i.axis.labelFontFamily,fontWeight:i.axis.labelFontWeight});c.forEach((function(g){var C=u(g);d=G?e+12:e-12;var A=new I.libraries.PIXI.Text(g,s);A.anchor.x=G?0:1,A.anchor.y=0===C?.9:.5,A.position.x=d,A.position.y=l+b-C,y.addChild(A)}))}))}}}(I,g,0,A,i),function(I,g,C,A,i){var e,l=A.spec();if(DI(l.row)&&"nominal"===l.row.type&&l.row.legend){var o=null!=(e=A.getChannelDomainArray("row"))?e:["___SINGLE_ROW___"];if(0!==o.length){var t=g.pBorder,c=GI({color:i.legend.labelColor,size:i.legend.labelFontSize,fontWeight:i.legend.labelFontWeight,fontFamily:i.legend.labelFontFamily});o.forEach((function(C){var e=A.encodedValue("row",C),l=new I.libraries.PIXI.Text(C,c);l.anchor.x=0,l.anchor.y=0,l.position.x=g.position[0]+4,l.position.y=g.position[1]+e+2,t.addChild(l);var o=new I.libraries.PIXI.TextStyle(c),n=I.libraries.PIXI.TextMetrics.measureText(C,o);t.beginFill(dI(i.legend.background),i.legend.backgroundOpacity),t.lineStyle(1,dI(i.legend.backgroundStroke),0,0),t.drawRect(g.position[0]+1,g.position[1]+e+1,n.width+8,n.height+4)}))}}}(I,g,0,A,i)),uI(I,g,C,A,i)}}function HI(I){if(wI(I))return[];if(!FI(I))return[I];if(0===I.overlay.length)return[Object(m.a)(Object(m.a)({},I),{},{superpose:void 0})];var g=JSON.parse(JSON.stringify(I));delete g.overlay;var C=[];I.overlay.forEach((function(I,A){var i=Object.assign(JSON.parse(JSON.stringify(g)),I);i.title&&0!==A&&delete i.title,C.push(i)}));var A=void 0;return C.forEach((function(I){DI(I.x)&&I.x.axis&&!A&&(A=I.x.axis)})),C.map((function(I){return Object(m.a)(Object(m.a)({},I),{},{x:Object(m.a)(Object(m.a)({},I.x),{},{axis:A})})}))}function YI(I){if(0===I.length)return!1;var g=I.filter((function(I){return I}));if(g.length!==I.length)return!1;var C=Object.keys(g[0]).sort(),A=!0;return C.forEach((function(I){1===Array.from(new Set(g.map((function(g){return JSON.stringify(g[I])})))).length||(A=!1)})),A}var RI,fI={viridis:F.a,grey:N.a,warm:v.a,spectral:k.a,cividis:D.a,bupu:z.a,rdbu:M.a,hot:U.a,pink:x.a};function KI(I){return!("alignment"in I)&&!I.tracks.find((function(I){return"overlay"===I.alignment||"tracks"in I}))}function wI(I){return!FI(I)&&"data"in I&&!("mark"in I)}function JI(I){return"object"===typeof I}function SI(I){return!("overlay"in I)}function FI(I){return"overlay"in I}function NI(I){var g=SI(I)?I:HI(I)[0];return DI(g.x)&&"genomic"===g.x.type&&DI(g.y)&&"genomic"===g.y.type}function vI(I){return null!==I&&"object"===typeof I&&"value"in I}function kI(I){return void 0!==I&&("vector"===I.type||"beddb"===I.type||"multivec"===I.type||"bigwig"===I.type||"matrix"===I.type||"bam"===I.type||"vcf"===I.type)}function DI(I){return"object"===typeof I&&!("value"in I)}function zI(I){return Object(K.a)(I)}function MI(I){return("bar"===I.mark||"area"===I.mark||"text"===I.mark)&&DI(I.color)&&"nominal"===I.color.type&&(!I.row||vI(I.row))&&DI(I.y)&&"quantitative"===I.y.type&&!DI(I.ye)}function UI(I,g){if(DI(g)&&g.field)return I[null==g?void 0:g.field]}function xI(I,g){var C=[];return VI.forEach((function(A){var i=I[A];DI(i)&&i.type===g&&C.push(A)})),C}function TI(I){if((SI(I)||FI(I))&&DI(I.x)&&I.x.axis&&"none"!==I.x.axis)return!0;if(FI(I)){var g=!1;return I.overlay.forEach((function(I){g||DI(I.x)&&I.x.axis&&"none"!==I.x.axis&&(g=!0)})),g}return!1}function QI(I){return"object"===typeof I}var PI=new Uint8Array(16);function OI(){if(!RI&&!(RI="undefined"!==typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!==typeof msCrypto&&"function"===typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return RI(PI)}var jI=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function LI(I){return"string"===typeof I&&jI.test(I)}for(var EI,_I,$I=[],qI=0;qI<256;++qI)$I.push((qI+256).toString(16).substr(1));function Ig(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,C=($I[I[g+0]]+$I[I[g+1]]+$I[I[g+2]]+$I[I[g+3]]+"-"+$I[I[g+4]]+$I[I[g+5]]+"-"+$I[I[g+6]]+$I[I[g+7]]+"-"+$I[I[g+8]]+$I[I[g+9]]+"-"+$I[I[g+10]]+$I[I[g+11]]+$I[I[g+12]]+$I[I[g+13]]+$I[I[g+14]]+$I[I[g+15]]).toLowerCase();if(!LI(C))throw TypeError("Stringified UUID is invalid");return C}var gg=0,Cg=0;function Ag(I,g,C){var A=g&&C||0,i=g||new Array(16),e=(I=I||{}).node||EI,l=void 0!==I.clockseq?I.clockseq:_I;if(null==e||null==l){var o=I.random||(I.rng||OI)();null==e&&(e=EI=[1|o[0],o[1],o[2],o[3],o[4],o[5]]),null==l&&(l=_I=16383&(o[6]<<8|o[7]))}var t=void 0!==I.msecs?I.msecs:Date.now(),c=void 0!==I.nsecs?I.nsecs:Cg+1,n=t-gg+(c-Cg)/1e4;if(n<0&&void 0===I.clockseq&&(l=l+1&16383),(n<0||t>gg)&&void 0===I.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");gg=t,Cg=c,_I=l;var d=(1e4*(268435455&(t+=122192928e5))+c)%4294967296;i[A++]=d>>>24&255,i[A++]=d>>>16&255,i[A++]=d>>>8&255,i[A++]=255&d;var s=t/4294967296*1e4&268435455;i[A++]=s>>>8&255,i[A++]=255&s,i[A++]=s>>>24&15|16,i[A++]=s>>>16&255,i[A++]=l>>>8|128,i[A++]=255&l;for(var a=0;a<6;++a)i[A+a]=e[a];return g||Ig(i)}function ig(I,g,C){function A(I,A,i,e){if("string"===typeof I&&(I=function(I){I=unescape(encodeURIComponent(I));for(var g=[],C=0;C<I.length;++C)g.push(I.charCodeAt(C));return g}(I)),"string"===typeof A&&(A=function(I){if(!LI(I))throw TypeError("Invalid UUID");var g,C=new Uint8Array(16);return C[0]=(g=parseInt(I.slice(0,8),16))>>>24,C[1]=g>>>16&255,C[2]=g>>>8&255,C[3]=255&g,C[4]=(g=parseInt(I.slice(9,13),16))>>>8,C[5]=255&g,C[6]=(g=parseInt(I.slice(14,18),16))>>>8,C[7]=255&g,C[8]=(g=parseInt(I.slice(19,23),16))>>>8,C[9]=255&g,C[10]=(g=parseInt(I.slice(24,36),16))/1099511627776&255,C[11]=g/4294967296&255,C[12]=g>>>24&255,C[13]=g>>>16&255,C[14]=g>>>8&255,C[15]=255&g,C}(A)),16!==A.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var l=new Uint8Array(16+I.length);if(l.set(A),l.set(I,A.length),(l=C(l))[6]=15&l[6]|g,l[8]=63&l[8]|128,i){e=e||0;for(var o=0;o<16;++o)i[e+o]=l[o];return i}return Ig(l)}try{A.name=I}catch(i){}return A.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",A.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",A}function eg(I){return 14+(I+64>>>9<<4)+1}function lg(I,g){var C=(65535&I)+(65535&g);return(I>>16)+(g>>16)+(C>>16)<<16|65535&C}function og(I,g,C,A,i,e){return lg((l=lg(lg(g,I),lg(A,e)))<<(o=i)|l>>>32-o,C);var l,o}function tg(I,g,C,A,i,e,l){return og(g&C|~g&A,I,g,i,e,l)}function cg(I,g,C,A,i,e,l){return og(g&A|C&~A,I,g,i,e,l)}function ng(I,g,C,A,i,e,l){return og(g^C^A,I,g,i,e,l)}function dg(I,g,C,A,i,e,l){return og(C^(g|~A),I,g,i,e,l)}function sg(I,g,C){var A=(I=I||{}).random||(I.rng||OI)();if(A[6]=15&A[6]|64,A[8]=63&A[8]|128,g){C=C||0;for(var i=0;i<16;++i)g[C+i]=A[i];return g}return Ig(A)}function ag(I,g,C,A){switch(I){case 0:return g&C^~g&A;case 1:case 3:return g^C^A;case 2:return g&C^g&A^C&A}}function Zg(I,g){return I<<g|I>>>32-g}function mg(I,g){var C=I?JSON.parse(JSON.stringify(I)):{};return g?Object.assign(C,g):C}function bg(I,g){"tracks"in I?I.tracks.forEach((function(I,C,A){g(I,C,A),bg(I,g)})):"views"in I&&I.views.forEach((function(I){return bg(I,g)}))}function rg(I,g){"tracks"in I?I.tracks.forEach((function(I){g(I),rg(I,g)})):"views"in I&&I.views.forEach((function(I){g(I),rg(I,g)}))}function hg(I,g){"tracks"in I||(g(I),I.views.forEach((function(I){hg(I,g)})))}function Gg(I){if(KI(I)){var g=JSON.parse(JSON.stringify(I));return delete g.tracks,I.tracks.filter((function(I){return!I._invalidTrack})).map((function(I){return Object.assign(JSON.parse(JSON.stringify(g)),I)}))}var C,A=[];return KI(C=I)||function(I){return"alignment"in I&&"overlay"===I.alignment}(C)?A.push(Object(m.a)(Object(m.a)({},I),{},{overlay:Object(b.a)(I.tracks.filter((function(I){return!I._invalidTrack}))),tracks:void 0,alignment:void 0})):I.tracks.filter((function(I){return!I._invalidTrack})).map((function(g){if("alignment"in g)A.push(Object(m.a)(Object(m.a)({},g),{},{overlay:Object(b.a)(g.tracks),tracks:void 0,alignment:void 0}));else{var C=JSON.parse(JSON.stringify(I));delete C.tracks;var i=Object.assign(JSON.parse(JSON.stringify(C)),g);A.push(i)}})),JSON.parse(JSON.stringify(A))}function ug(I,g){if(g?(void 0===I.assembly&&(I.assembly=g.assembly),void 0===I.layout&&(I.layout=g.layout),void 0===I.orientation&&(I.orientation=g.orientation),void 0===I.static&&(I.static=void 0!==g.static&&g.static),void 0===I.zoomLimits&&(I.zoomLimits=g.zoomLimits),void 0===I.xDomain&&(I.xDomain=g.xDomain),void 0===I.yDomain&&(I.yDomain=g.yDomain),void 0===I.linkingId&&(I.linkingId=g.linkingId),void 0===I.centerRadius&&(I.centerRadius=g.centerRadius),void 0!==I.spacing||"tracks"in I||(I.spacing=g.spacing),void 0===I.xOffset&&(I.xOffset=g.xOffset),void 0===I.yOffset&&(I.yOffset=g.yOffset),"views"in I&&"arrangement"in g&&void 0===I.arrangement&&(I.arrangement=g.arrangement),I.style=mg(g.style,I.style)):(void 0===I.assembly&&(I.assembly="hg38"),void 0===I.layout&&(I.layout="linear"),void 0===I.orientation&&(I.orientation="horizontal"),void 0===I.static&&(I.static=!1),void 0===I.zoomLimits&&(I.zoomLimits=[1,null]),void 0===I.centerRadius&&(I.centerRadius=.3),void 0===I.spacing&&(I.spacing=nI),"views"in I&&void 0===I.arrangement&&(I.arrangement="vertical"),void 0===I.xOffset&&(I.xOffset=0),void 0===I.yOffset&&(I.yOffset=0)),"tracks"in I){var C=Gg(I);C=function(I){var g;return(g=[]).concat.apply(g,Object(b.a)(I.map((function(I){if(wI(I)||!FI(I)||I.overlay.length<=1)return[I];if(0===I.overlay.filter((function(I){return I.data})).length)return[I];if(YI([I.data].concat(Object(b.a)(I.overlay.map((function(I){return I.data}))))))return[I];var g=JSON.parse(JSON.stringify(I));delete g.overlay;var C=[],A=JSON.parse(JSON.stringify(g));return A.overlay=[],I.overlay.forEach((function(I){if(A.data||(A.data=I.data),I.data&&!YI([A.data,I.data])){var i=Object.assign(JSON.parse(JSON.stringify(g)),I);C.push(i)}else A.overlay.push(I)})),(A.overlay.length>0?[A].concat(C):C).map((function(I,g,C){var A=0!==g,i=SI(I)&&DI(I.y)&&!I.y.axis&&A?Object(m.a)(Object(m.a)({},I.y),{},{axis:1===g?"right":"none"}):SI(I)?I.y:void 0;return I.title&&g!==C.length-1&&1!==C.length&&delete I.title,Object(m.a)(Object(m.a)({},I),{},{overlayOnPreviousTrack:A,y:i})}))}))))}(C);var A=sg();C.forEach((function(g,i,e){var l,o,t;if(g.width||(g.width=360),g.height||(g.height=180),"displacement"in g)if("pile"===(null==(l=g.displacement)?void 0:l.type)&&void 0===g.row&&DI(g.x)&&g.x.field&&DI(g.xe)&&g.xe.field){var c=sg(),n={type:"displace",newField:c,boundingBox:{startField:g.x.field,endField:g.xe.field,padding:g.displacement.padding},method:"pile"};g.dataTransform||(g.dataTransform=[]),g.dataTransform=[].concat(Object(b.a)(g.dataTransform),[n]),g.row={field:c,type:"nominal"}}else null==(o=g.displacement)||o.type;if(g.layout&&(g.layout=void 0),g.zoomLimits&&(g.zoomLimits=void 0),g.assembly||(g.assembly=I.assembly),g.layout||(g.layout=I.layout),g.orientation||(g.orientation=I.orientation),void 0===g.static&&(g.static=void 0!==I.static&&I.static),g.zoomLimits||(g.zoomLimits=I.zoomLimits),g.style=mg(I.style,g.style),FI(g)&&g.overlay.forEach((function(I){I.style=mg(g.style,I.style)})),"circular"!==g.layout&&!NI(g)||"vertical"!==g.orientation||(g.orientation="horizontal"),NI(g)&&(g.layout="linear",(SI(g)||FI(g))&&DI(g.y)&&!g.y.domain?g.y.domain=I.yDomain:FI(g)&&g.overlay.forEach((function(g){DI(g.y)&&!g.y.domain&&(g.y.domain=I.yDomain)}))),(SI(g)||FI(g))&&DI(g.x)&&!g.x.domain?g.x.domain=I.xDomain:FI(g)&&g.overlay.forEach((function(g){DI(g.x)&&!g.x.domain&&(g.x.domain=I.xDomain)})),(SI(g)||FI(g))&&DI(g.x)&&!g.x.linkingId)g.x.linkingId=null!=(t=I.linkingId)?t:A;else if(FI(g)){var d=!1;g.overlay.forEach((function(g){var C;d||DI(g.x)&&!g.x.linkingId&&(g.x.linkingId=null!=(C=I.linkingId)?C:A,d=!0)}))}0===i&&(g.overlayOnPreviousTrack=!1),(0===i||0!==i&&1===C.slice(0,i).filter((function(I){return!I.overlayOnPreviousTrack})).length&&!0===g.overlayOnPreviousTrack)&&((SI(g)||FI(g))&&DI(g.x)&&!g.x.axis?"vertical"===g.orientation?g.x.axis="left":g.x.axis="top":FI(g)&&g.overlay.forEach((function(I){DI(I.x)&&!I.x.axis&&("vertical"===g.orientation?I.x.axis="left":I.x.axis="top")}))),(SI(g)||FI(g))&&DI(g.x)&&g.x.axis&&"none"!==g.x.axis?"vertical"===g.orientation?"top"===g.x.axis?g.x.axis="left":"bottom"===g.x.axis&&(g.x.axis="right"):"left"===g.x.axis?g.x.axis="top":"right"===g.x.axis&&(g.x.axis="bottom"):FI(g)&&g.overlay.forEach((function(I){DI(I.x)&&I.x.axis&&"none"!==I.x.axis&&("vertical"===g.orientation?"top"===I.x.axis?I.x.axis="left":"bottom"===I.x.axis&&(I.x.axis="right"):"left"===I.x.axis?I.x.axis="top":"right"===I.x.axis&&(I.x.axis="bottom"))})),0!==i&&(i===e.length-1&&e.slice(0,i+1).filter((function(I){return I.overlayOnPreviousTrack})).length<i||i!==e.length-1&&e.slice(i+1).filter((function(I){return I.overlayOnPreviousTrack})).length===e.length-i-1&&e.slice(0,i+1).filter((function(I){return I.overlayOnPreviousTrack})).length<i)&&(SI(g)&&"withinLink"===g.mark&&void 0===g.flipY?g.flipY=!0:FI(g)&&("withinLink"===g.mark&&void 0===g.flipY&&(g.flipY=!0),g.overlay.forEach((function(I){"withinLink"===I.mark&&void 0===I.flipY&&(I.flipY=!0)})))),g.overlayOnPreviousTrack&&e[i-1]&&(g.width=e[i-1].width,g.height=e[i-1].height,g.layout=e[i-1].layout,g.assembly=e[i-1].assembly)})),I.tracks=C}else I.views.forEach((function(g){ug(g,I)}))}ig("v3",48,(function(I){if("string"===typeof I){var g=unescape(encodeURIComponent(I));I=new Uint8Array(g.length);for(var C=0;C<g.length;++C)I[C]=g.charCodeAt(C)}return function(I){for(var g=[],C=32*I.length,A="0123456789abcdef",i=0;i<C;i+=8){var e=I[i>>5]>>>i%32&255,l=parseInt(A.charAt(e>>>4&15)+A.charAt(15&e),16);g.push(l)}return g}(function(I,g){I[g>>5]|=128<<g%32,I[eg(g)-1]=g;for(var C=1732584193,A=-271733879,i=-1732584194,e=271733878,l=0;l<I.length;l+=16){var o=C,t=A,c=i,n=e;C=tg(C,A,i,e,I[l],7,-680876936),e=tg(e,C,A,i,I[l+1],12,-389564586),i=tg(i,e,C,A,I[l+2],17,606105819),A=tg(A,i,e,C,I[l+3],22,-1044525330),C=tg(C,A,i,e,I[l+4],7,-176418897),e=tg(e,C,A,i,I[l+5],12,1200080426),i=tg(i,e,C,A,I[l+6],17,-1473231341),A=tg(A,i,e,C,I[l+7],22,-45705983),C=tg(C,A,i,e,I[l+8],7,1770035416),e=tg(e,C,A,i,I[l+9],12,-1958414417),i=tg(i,e,C,A,I[l+10],17,-42063),A=tg(A,i,e,C,I[l+11],22,-1990404162),C=tg(C,A,i,e,I[l+12],7,1804603682),e=tg(e,C,A,i,I[l+13],12,-40341101),i=tg(i,e,C,A,I[l+14],17,-1502002290),C=cg(C,A=tg(A,i,e,C,I[l+15],22,1236535329),i,e,I[l+1],5,-165796510),e=cg(e,C,A,i,I[l+6],9,-1069501632),i=cg(i,e,C,A,I[l+11],14,643717713),A=cg(A,i,e,C,I[l],20,-373897302),C=cg(C,A,i,e,I[l+5],5,-701558691),e=cg(e,C,A,i,I[l+10],9,38016083),i=cg(i,e,C,A,I[l+15],14,-660478335),A=cg(A,i,e,C,I[l+4],20,-405537848),C=cg(C,A,i,e,I[l+9],5,568446438),e=cg(e,C,A,i,I[l+14],9,-1019803690),i=cg(i,e,C,A,I[l+3],14,-187363961),A=cg(A,i,e,C,I[l+8],20,1163531501),C=cg(C,A,i,e,I[l+13],5,-1444681467),e=cg(e,C,A,i,I[l+2],9,-51403784),i=cg(i,e,C,A,I[l+7],14,1735328473),C=ng(C,A=cg(A,i,e,C,I[l+12],20,-1926607734),i,e,I[l+5],4,-378558),e=ng(e,C,A,i,I[l+8],11,-2022574463),i=ng(i,e,C,A,I[l+11],16,1839030562),A=ng(A,i,e,C,I[l+14],23,-35309556),C=ng(C,A,i,e,I[l+1],4,-1530992060),e=ng(e,C,A,i,I[l+4],11,1272893353),i=ng(i,e,C,A,I[l+7],16,-155497632),A=ng(A,i,e,C,I[l+10],23,-1094730640),C=ng(C,A,i,e,I[l+13],4,681279174),e=ng(e,C,A,i,I[l],11,-358537222),i=ng(i,e,C,A,I[l+3],16,-722521979),A=ng(A,i,e,C,I[l+6],23,76029189),C=ng(C,A,i,e,I[l+9],4,-640364487),e=ng(e,C,A,i,I[l+12],11,-421815835),i=ng(i,e,C,A,I[l+15],16,530742520),C=dg(C,A=ng(A,i,e,C,I[l+2],23,-995338651),i,e,I[l],6,-198630844),e=dg(e,C,A,i,I[l+7],10,1126891415),i=dg(i,e,C,A,I[l+14],15,-1416354905),A=dg(A,i,e,C,I[l+5],21,-57434055),C=dg(C,A,i,e,I[l+12],6,1700485571),e=dg(e,C,A,i,I[l+3],10,-1894986606),i=dg(i,e,C,A,I[l+10],15,-1051523),A=dg(A,i,e,C,I[l+1],21,-2054922799),C=dg(C,A,i,e,I[l+8],6,1873313359),e=dg(e,C,A,i,I[l+15],10,-30611744),i=dg(i,e,C,A,I[l+6],15,-1560198380),A=dg(A,i,e,C,I[l+13],21,1309151649),C=dg(C,A,i,e,I[l+4],6,-145523070),e=dg(e,C,A,i,I[l+11],10,-1120210379),i=dg(i,e,C,A,I[l+2],15,718787259),A=dg(A,i,e,C,I[l+9],21,-343485551),C=lg(C,o),A=lg(A,t),i=lg(i,c),e=lg(e,n)}return[C,A,i,e]}(function(I){if(0===I.length)return[];for(var g=8*I.length,C=new Uint32Array(eg(g)),A=0;A<g;A+=8)C[A>>5]|=(255&I[A/8])<<A%32;return C}(I),8*I.length))})),ig("v5",80,(function(I){var g=[1518500249,1859775393,2400959708,3395469782],C=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"===typeof I){var A=unescape(encodeURIComponent(I));I=[];for(var i=0;i<A.length;++i)I.push(A.charCodeAt(i))}else Array.isArray(I)||(I=Array.prototype.slice.call(I));I.push(128);for(var e=I.length/4+2,l=Math.ceil(e/16),o=new Array(l),t=0;t<l;++t){for(var c=new Uint32Array(16),n=0;n<16;++n)c[n]=I[64*t+4*n]<<24|I[64*t+4*n+1]<<16|I[64*t+4*n+2]<<8|I[64*t+4*n+3];o[t]=c}o[l-1][14]=8*(I.length-1)/Math.pow(2,32),o[l-1][14]=Math.floor(o[l-1][14]),o[l-1][15]=8*(I.length-1)&4294967295;for(var d=0;d<l;++d){for(var s=new Uint32Array(80),a=0;a<16;++a)s[a]=o[d][a];for(var Z=16;Z<80;++Z)s[Z]=Zg(s[Z-3]^s[Z-8]^s[Z-14]^s[Z-16],1);for(var m=C[0],b=C[1],r=C[2],h=C[3],G=C[4],u=0;u<80;++u){var y=Math.floor(u/20),B=Zg(m,5)+ag(y,b,r,h)+G+g[y]+s[u]>>>0;G=h,h=r,r=Zg(b,30)>>>0,b=m,m=B}C[0]=C[0]+m>>>0,C[1]=C[1]+b>>>0,C[2]=C[2]+r>>>0,C[3]=C[3]+h>>>0,C[4]=C[4]+G>>>0}return[C[0]>>24&255,C[0]>>16&255,C[0]>>8&255,255&C[0],C[1]>>24&255,C[1]>>16&255,C[1]>>8&255,255&C[1],C[2]>>24&255,C[2]>>16&255,C[2]>>8&255,255&C[2],C[3]>>24&255,C[3]>>16&255,C[3]>>8&255,255&C[3],C[4]>>24&255,C[4]>>16&255,C[4]>>8&255,255&C[4]]}));var yg=[{name:"gene",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"strandColor",type:"nominal",required:!0},{name:"strandRow",type:"nominal",required:!0},{name:"opacity",type:"value",required:!1},{name:"geneHeight",type:"value",required:!1},{name:"geneLabel",type:"nominal",required:!0},{name:"geneLabelColor",type:"nominal",required:!0},{name:"geneLabelFontSize",type:"value",required:!1},{name:"geneLabelStroke",type:"value",required:!1},{name:"geneLabelStrokeThickness",type:"value",required:!1},{name:"geneLabelOpacity",type:"value",required:!1},{name:"type",type:"nominal",required:!0}],mapping:[{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["-"]}],mark:"triangleLeft",x:{base:"startPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},style:{align:"right"}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["+"]}],mark:"triangleRight",x:{base:"endPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},style:{align:"left"}},{dataTransform:[{type:"filter",base:"type",oneOf:["exon"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},size:{base:"geneHeight",value:12},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["+"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},size:{value:3}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]},{type:"filter",base:"strandColor",oneOf:["-"]}],mark:"rect",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"strandColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:.4},size:{value:3}},{dataTransform:[{type:"filter",base:"type",oneOf:["gene"]}],mark:"text",text:{base:"geneLabel",type:"nominal"},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},row:{base:"strandRow",type:"nominal",domain:["+","-"]},color:{base:"geneLabelColor",type:"nominal",domain:["+","-"],range:["blue","red"]},opacity:{base:"opacity",value:1},size:{base:"geneLabelFontSize",value:18},stroke:{base:"geneLabelStroke",value:"white"},strokeWidth:{base:"geneLabelStrokeThickness",value:2},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]}]},{name:"ideogram",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"chrHeight",type:"value",required:!1},{name:"name",type:"nominal",required:!0},{name:"stainBackgroundColor",type:"nominal",required:!0},{name:"stainLabelColor",type:"nominal",required:!0},{name:"stainStroke",type:"value",required:!1},{name:"stainStrokeWidth",type:"value",required:!1}],mapping:[{mark:"rect",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"],not:!0}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"triangleRight",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"]},{type:"filter",base:"name",include:"q"}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"triangleLeft",dataTransform:[{type:"filter",base:"stainBackgroundColor",oneOf:["acen"]},{type:"filter",base:"name",include:"p"}],color:{base:"stainBackgroundColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar","acen"],range:["white","lightgray","gray","gray","black","#7B9CC8","#DC4542"]},size:{base:"chrHeight",value:18},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},stroke:{base:"stainStroke",value:"gray"},strokeWidth:{base:"stainStrokeWidth",value:.3}},{mark:"text",dataTransform:[{type:"filter",base:"stainLabelColor",oneOf:["acen"],not:!0}],color:{base:"stainLabelColor",type:"nominal",domain:["gneg","gpos25","gpos50","gpos75","gpos100","gvar"],range:["black","black","black","black","white","black"]},text:{base:"name",type:"nominal"},x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:10,target:"mark"}]}]},{name:"sequence",channels:[{name:"startPosition",type:"genomic",required:!0},{name:"endPosition",type:"genomic",required:!0},{name:"barLength",type:"quantitative",required:!0},{name:"baseBackground",type:"nominal",required:!0},{name:"baseLabelColor",type:"nominal",required:!0},{name:"baseLabelFontSize",type:"value",required:!1}],mapping:[{mark:"bar",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},y:{base:"barLength",type:"quantitative",axis:"none"},color:{base:"baseBackground",type:"nominal",domain:["A","T","G","C"]}},{dataTransform:[{type:"filter",base:"barLength",oneOf:[0],not:!0}],mark:"text",x:{base:"startPosition",type:"genomic"},xe:{base:"endPosition",type:"genomic"},color:{base:"baseLabelColor",type:"nominal",domain:["A","T","G","C"],range:["white"]},text:{base:"baseBackground",type:"nominal"},size:{base:"baseLabelFontSize",value:18},visibility:[{operation:"less-than",measure:"width",threshold:"|xe-x|",transitionPadding:30,target:"mark"},{operation:"LT",measure:"zoomLevel",threshold:10,target:"track"}]}]}];function Bg(I,g){if((C=(I=g?I.toExponential(g-1):I.toExponential()).indexOf("e"))<0)return null;var C,A=I.slice(0,C);return[A.length>1?A[0]+A.slice(2):A,+I.slice(C+1)]}function Vg(I){return(I=Bg(Math.abs(I)))?I[1]:NaN}var pg,Xg=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wg(I){if(!(g=Xg.exec(I)))throw new Error("invalid format: "+I);var g;return new Hg({fill:g[1],align:g[2],sign:g[3],symbol:g[4],zero:g[5],width:g[6],comma:g[7],precision:g[8]&&g[8].slice(1),trim:g[9],type:g[10]})}function Hg(I){this.fill=void 0===I.fill?" ":I.fill+"",this.align=void 0===I.align?">":I.align+"",this.sign=void 0===I.sign?"-":I.sign+"",this.symbol=void 0===I.symbol?"":I.symbol+"",this.zero=!!I.zero,this.width=void 0===I.width?void 0:+I.width,this.comma=!!I.comma,this.precision=void 0===I.precision?void 0:+I.precision,this.trim=!!I.trim,this.type=void 0===I.type?"":I.type+""}function Yg(I,g){var C=Bg(I,g);if(!C)return I+"";var A=C[0],i=C[1];return i<0?"0."+new Array(-i).join("0")+A:A.length>i+1?A.slice(0,i+1)+"."+A.slice(i+1):A+new Array(i-A.length+2).join("0")}Wg.prototype=Hg.prototype,Hg.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Rg={"%":function(I,g){return(100*I).toFixed(g)},b:function(I){return Math.round(I).toString(2)},c:function(I){return I+""},d:function(I){return Math.abs(I=Math.round(I))>=1e21?I.toLocaleString("en").replace(/,/g,""):I.toString(10)},e:function(I,g){return I.toExponential(g)},f:function(I,g){return I.toFixed(g)},g:function(I,g){return I.toPrecision(g)},o:function(I){return Math.round(I).toString(8)},p:function(I,g){return Yg(100*I,g)},r:Yg,s:function(I,g){var C=Bg(I,g);if(!C)return I+"";var A=C[0],i=C[1],e=i-(pg=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,l=A.length;return e===l?A:e>l?A+new Array(e-l+1).join("0"):e>0?A.slice(0,e)+"."+A.slice(e):"0."+new Array(1-e).join("0")+Bg(I,Math.max(0,g+e-1))[0]},X:function(I){return Math.round(I).toString(16).toUpperCase()},x:function(I){return Math.round(I).toString(16)}};function fg(I){return I}var Kg,wg,Jg,Sg=Array.prototype.map,Fg=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"];function Ng(I){var g,C,A=void 0===I.grouping||void 0===I.thousands?fg:(g=Sg.call(I.grouping,Number),C=I.thousands+"",function(I,A){for(var i=I.length,e=[],l=0,o=g[0],t=0;i>0&&o>0&&(t+o+1>A&&(o=Math.max(1,A-t)),e.push(I.substring(i-=o,i+o)),!((t+=o+1)>A));)o=g[l=(l+1)%g.length];return e.reverse().join(C)}),i=void 0===I.currency?"":I.currency[0]+"",e=void 0===I.currency?"":I.currency[1]+"",l=void 0===I.decimal?".":I.decimal+"",o=void 0===I.numerals?fg:function(I){return function(g){return g.replace(/[0-9]/g,(function(g){return I[+g]}))}}(Sg.call(I.numerals,String)),t=void 0===I.percent?"%":I.percent+"",c=void 0===I.minus?"-":I.minus+"",n=void 0===I.nan?"NaN":I.nan+"";function d(I){var g=(I=Wg(I)).fill,C=I.align,d=I.sign,s=I.symbol,a=I.zero,Z=I.width,m=I.comma,b=I.precision,r=I.trim,h=I.type;"n"===h?(m=!0,h="g"):Rg[h]||(void 0===b&&(b=12),r=!0,h="g"),(a||"0"===g&&"="===C)&&(a=!0,g="0",C="=");var G="$"===s?i:"#"===s&&/[boxX]/.test(h)?"0"+h.toLowerCase():"",u="$"===s?e:/[%p]/.test(h)?t:"",y=Rg[h],B=/[defgprs%]/.test(h);function V(I){var i,e,t,s=G,V=u;if("c"===h)V=y(I)+V,I="";else{var p=(I=+I)<0||1/I<0;if(I=isNaN(I)?n:y(Math.abs(I),b),r&&(I=function(I){I:for(var g,C=I.length,A=1,i=-1;A<C;++A)switch(I[A]){case".":i=g=A;break;case"0":0===i&&(i=A),g=A;break;default:if(!+I[A])break I;i>0&&(i=0)}return i>0?I.slice(0,i)+I.slice(g+1):I}(I)),p&&0===+I&&"+"!==d&&(p=!1),s=(p?"("===d?d:c:"-"===d||"("===d?"":d)+s,V=("s"===h?Fg[8+pg/3]:"")+V+(p&&"("===d?")":""),B)for(i=-1,e=I.length;++i<e;)if(48>(t=I.charCodeAt(i))||t>57){V=(46===t?l+I.slice(i+1):I.slice(i))+V,I=I.slice(0,i);break}}m&&!a&&(I=A(I,1/0));var X=s.length+I.length+V.length,W=X<Z?new Array(Z-X+1).join(g):"";switch(m&&a&&(I=A(W+I,W.length?Z-V.length:1/0),W=""),C){case"<":I=s+I+V+W;break;case"=":I=s+W+I+V;break;case"^":I=W.slice(0,X=W.length>>1)+s+I+V+W.slice(X);break;default:I=W+s+I+V}return o(I)}return b=void 0===b?6:/[gprs]/.test(h)?Math.max(1,Math.min(21,b)):Math.max(0,Math.min(20,b)),V.toString=function(){return I+""},V}return{format:d,formatPrefix:function(I,g){var C=d(((I=Wg(I)).type="f",I)),A=3*Math.max(-8,Math.min(8,Math.floor(Vg(g)/3))),i=Math.pow(10,-A),e=Fg[8+A/3];return function(I){return C(i*I)+e}}}}Kg=Ng({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),wg=Kg.format,Jg=Kg.formatPrefix;var vg={chr1:248956422,chr2:242193529,chr3:198295559,chr4:190214555,chr5:181538259,chr6:170805979,chr7:159345973,chr8:145138636,chr9:138394717,chr10:133797422,chr11:135086622,chr12:133275309,chr13:114364328,chr14:107043718,chr15:101991189,chr16:90338345,chr17:83257441,chr18:80373285,chr19:58617616,chr20:64444167,chr21:46709983,chr22:50818468,chrX:156040895,chrY:57227415},kg={chr1:249250621,chr2:243199373,chr3:198022430,chr4:191154276,chr5:180915260,chr6:171115067,chr7:159138663,chr8:146364022,chr9:141213431,chr10:135534747,chr11:135006516,chr12:133851895,chr13:115169878,chr14:107349540,chr15:102531392,chr16:90354753,chr17:81195210,chr18:78077248,chr19:59128983,chr20:63025520,chr21:48129895,chr22:51304566,chrX:155270560,chrY:59373566,chrM:16571},Dg={chr1:247249719,chr2:242951149,chr3:199501827,chr4:191273063,chr5:180857866,chr6:170899992,chr7:158821424,chr8:146274826,chr9:140273252,chr10:135374737,chr11:134452384,chr12:132349534,chr13:114142980,chr14:106368585,chr15:100338915,chr16:88827254,chr17:78774742,chr18:76117153,chr19:63811651,chr20:62435964,chr21:46944323,chr22:49691432,chrX:154913754,chrY:57772954,chrM:16571},zg={chr1:245522847,chr2:243018229,chr3:199505740,chr4:191411218,chr5:180857866,chr6:170975699,chr7:158628139,chr8:146274826,chr9:138429268,chr10:135413628,chr11:134452384,chr12:132449811,chr13:114142980,chr14:106368585,chr15:100338915,chr16:88827254,chr17:78774742,chr18:76117153,chr19:63811651,chr20:62435964,chr21:46944323,chr22:49554710,chrX:154824264,chrY:57701691,chrM:16571},Mg={chr1:246127941,chr2:243615958,chr3:199344050,chr4:191731959,chr5:181034922,chr6:170914576,chr7:158545518,chr8:146308819,chr9:136372045,chr10:135037215,chr11:134482954,chr12:132078379,chr13:113042980,chr14:105311216,chr15:100256656,chr16:90041932,chr17:81860266,chr18:76115139,chr19:63811651,chr20:63741868,chr21:46976097,chr22:49396972,chrX:153692391,chrY:50286555,chrM:16571},Ug={chr1:195471971,chr2:182113224,chr3:160039680,chr4:156508116,chr5:151834684,chr6:149736546,chr7:145441459,chr8:129401213,chr9:124595110,chr10:130694993,chr11:122082543,chr12:120129022,chr13:120421639,chr14:124902244,chr15:104043685,chr16:98207768,chr17:94987271,chr18:90702639,chr19:61431566,chrX:171031299,chrY:91744698,chrM:16299},xg={chr1:197195432,chr2:181748087,chr3:159599783,chr4:155630120,chr5:152537259,chr6:149517037,chr7:152524553,chr8:131738871,chr9:124076172,chr10:129993255,chr11:121843856,chr12:121257530,chr13:120284312,chr14:125194864,chr15:103494974,chr16:98319150,chr17:95272651,chr18:90772031,chr19:61342430,chrX:166650296,chrY:15902555,chrM:16299};function Tg(I,g){var C,A=null!=(C=Object.entries(Qg(g).interval).find((function(g){var C=Object(r.a)(g[1],2),A=C[0],i=C[1];return A<=I&&I<i})))?C:[null,null],i=Object(r.a)(A,2),e=i[0],l=i[1];return e&&l?{chromosome:e,position:I-l[0]}:{chromosome:"unknown",position:I}}function Qg(I){return I&&I in Og?Og[I]:Og.hg38}var Pg=function(I){return"https://s3.amazonaws.com/gosling-lang.org/data/".concat(I,".chrom.sizes")},Og=Object.freeze({hg38:{size:vg,interval:jg(vg),total:Lg(vg),path:Pg("hg38")},hg19:{size:kg,interval:jg(kg),total:Lg(kg),path:Pg("hg19")},hg18:{size:Dg,interval:jg(Dg),total:Lg(Dg),path:Pg("hg18")},hg17:{size:zg,interval:jg(zg),total:Lg(zg),path:Pg("hg17")},hg16:{size:Mg,interval:jg(Mg),total:Lg(Mg),path:Pg("hg16")},mm10:{size:Ug,interval:jg(Ug),total:Lg(Ug),path:Pg("mm10")},mm9:{size:xg,interval:jg(xg),total:Lg(xg),path:Pg("mm9")},unknown:{size:{chr:Number.MAX_VALUE},interval:{chr:[0,Number.MAX_VALUE]},total:Number.MAX_VALUE,path:Pg("hg38")}});function jg(I){var g={};return Object.keys(I).reduce((function(C,A){return g[A]=[C,C+I[A]],C+I[A]}),0),g}function Lg(I){return Object.values(I).reduce((function(I,g){return I+g}),0)}var Eg=7829367,_g=function(I,g){var C;function A(){if(!(this instanceof A?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');return g.apply(void 0,arguments)}return A.config=Object(m.a)(Object(m.a)({},I),{},{availableOptions:Object.keys(null!=(C=I.defaultOptions)?C:{})}),A}({type:"axis-track",datatype:["multivec","epilogos"],local:!1,orientation:"1d-horizontal",thumbnail:(new DOMParser).parseFromString('<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>',"text/xml").documentElement,defaultOptions:{innerRadius:340,outerRadius:310,startAngle:0,endAngle:360,width:700,height:700,layout:"linear",labelPosition:"none",labelColor:"black",labelTextOpacity:.4,trackBorderWidth:0,trackBorderColor:"black",tickPositions:"even",fontSize:12,fontFamily:"sans-serif",fontWeight:"normal",color:"#808080",stroke:"#ffffff",backgroundColor:"transparent",showMousePosition:!1,tickColor:Eg}},(function(I,g,C){var A=I.utils,i=A.absToChr,e=A.colorToHex,l=A.pixiTextToSvg,o=A.svgLine,h=A.showMousePosition;function G(g,C){return Object.assign(new I.libraries.PIXI.Text(g,C),{hashValue:Math.random()})}var u=function(A){Object(a.a)(y,A);var u=Object(Z.a)(y);function y(){var A;Object(t.a)(this,y),A=u.call(this,g,C);var i=g.dataConfig,l=g.animate,o=g.chromInfoPath,c=g.isShowGlobalMousePosition;A.searchField=null,A.dataConfig=i,A.allTexts=[],A.pTicksCircular=new I.libraries.PIXI.Graphics,A.pTicks=new I.libraries.PIXI.Graphics,A.pMain.addChild(A.pTicks),A.pMain.addChild(A.pTicksCircular),A.gTicks={},A.tickTexts={},A.options=C,A.isShowGlobalMousePosition=c,A.pixiTextConfig=GI({size:+A.options.fontSize,fontFamily:A.options.fontFamily,fontWeight:A.options.fontWeight,color:A.options.color,stroke:A.options.stroke,strokeThickness:2}),A.stroke=e(A.pixiTextConfig.stroke),A.tickWidth=200,A.tickHeight=6,A.tickTextSeparation=2,A.tickColor=e(A.options.tickColor),A.animate=l,A.pubSubs=[],A.options.showMousePosition&&!A.hideMousePosition&&(A.hideMousePosition=h(Object(n.a)(A),A.is2d,A.isShowGlobalMousePosition()));o||"".concat(i.server,"/chrom-sizes/?id=").concat(i.tilesetUid);var d=A.options.assembly,s={},a=Object(m.a)({},Qg(d).size),Z=[];return Object.keys(Qg(d).size).forEach((function(I){s[I]={chr:I,pos:Qg(d).size[I]}})),Object.keys(Qg(d).interval).forEach((function(I){Z.push({chr:I,pos:Qg(d).interval[I][0]})})),A.chromInfo={chrPositions:s,chromLengths:a,cumPositions:Z},A.rerender(A.options,!0),A.draw(),A.animate(),A}return Object(c.a)(y,[{key:"initBoundsTicks",value:function(){this.pTicks&&(this.pMain.removeChild(this.pTicks),this.pTicks=null),this.gBoundTicks||(this.gBoundTicks=new I.libraries.PIXI.Graphics,this.leftBoundTick=G("",this.pixiTextConfig),this.rightBoundTick=G("",this.pixiTextConfig),this.gBoundTicks.addChild(this.leftBoundTick),this.gBoundTicks.addChild(this.rightBoundTick),this.pMain.addChild(this.gBoundTicks)),this.texts=[]}},{key:"initChromLabels",value:function(){var g=this;this.chromInfo&&(this.gBoundTicks&&(this.pMain.removeChild(this.gBoundTicks),this.gBoundTicks=void 0),this.pTicks||(this.pTicks=new I.libraries.PIXI.Graphics,this.pMain.addChild(this.pTicks)),this.texts=[],this.pTicks.removeChildren(),this.chromInfo.cumPositions.forEach((function(C){var A,i,e,l=C.chr;g.gTicks[l]=new I.libraries.PIXI.Graphics,g.tickTexts[l]||(g.tickTexts[l]=[]);var o=G(l,g.pixiTextConfig);null==(A=g.pTicks)||A.addChild(o),null==(i=g.pTicks)||i.addChild(g.gTicks[l]),null==(e=g.texts)||e.push(o)})))}},{key:"rerender",value:function(I,g){var C=JSON.stringify(I);(g||C!==this.prevOptions)&&(this.prevOptions=C,this.options=I,this.pixiTextConfig.fontSize=+this.options.fontSize?"".concat(+this.options.fontSize,"px"):this.pixiTextConfig.fontSize,this.pixiTextConfig.fill=this.options.color||this.pixiTextConfig.fill,this.pixiTextConfig.stroke=this.options.stroke||this.pixiTextConfig.stroke,this.stroke=e(this.pixiTextConfig.stroke),this.tickColor=this.options.tickColor?e(this.options.tickColor):Eg,"ends"===this.options.tickPositions&&"circular"!==this.options.layout?this.initBoundsTicks():this.initChromLabels(),Object(d.a)(Object(s.a)(y.prototype),"rerender",this).call(this,I,g),this.options.showMousePosition&&!this.hideMousePosition&&(this.hideMousePosition=h(this,this.is2d,this.isShowGlobalMousePosition())),!this.options.showMousePosition&&this.hideMousePosition&&(this.hideMousePosition(),this.hideMousePosition=void 0))}},{key:"formatTick",value:function(I){if(isNaN(I))return"null";var g,C,A=this._xScale.domain(),i=A[1]-A[0],e=(g=I,C=i,Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Vg(C)/3)))-Vg(Math.abs(g)))),l=wg(","),o=Jg(",.".concat(e),i),t=l;return"si"===this.options.tickFormat?t=o:"plain"===this.options.tickFormat?t=l:"ends"===this.options.tickPositions&&(t=o),t(I)}},{key:"drawBoundsTicks",value:function(I,g){if(this.gBoundTicks&&this.leftBoundTick&&this.rightBoundTick){var C=this.gBoundTicks;C.clear(),C.lineStyle(1,0);var A=this.options.reverseOrientation?0:this.dimensions[1],i=this.options.reverseOrientation?this.tickHeight:this.dimensions[1]-this.tickHeight;C.moveTo(1,A),C.lineTo(1,i),C.moveTo(this.dimensions[0]-1,A),C.lineTo(this.dimensions[0]-1,i),this.leftBoundTick.x=0,this.leftBoundTick.y=this.options.reverseOrientation?i+this.tickTextSeparation:i-this.tickTextSeparation,this.leftBoundTick.text="unknown"===this.options.assembly?"".concat(this.formatTick(I[1])):"".concat(I[0],": ").concat(this.formatTick(I[1])),this.leftBoundTick.anchor.y=this.options.reverseOrientation?0:1,this.rightBoundTick.x=this.dimensions[0],this.rightBoundTick.text="unknown"===this.options.assembly?"".concat(this.formatTick(g[1])):"".concat(g[0],": ").concat(this.formatTick(g[1])),this.rightBoundTick.y=this.options.reverseOrientation?i+this.tickTextSeparation:i-this.tickTextSeparation,this.rightBoundTick.anchor.y=this.options.reverseOrientation?0:1,this.rightBoundTick.anchor.x=1,this.flipText&&(this.leftBoundTick.scale.x=-1,this.leftBoundTick.anchor.x=1,this.rightBoundTick.scale.x=-1,this.rightBoundTick.anchor.x=0),this.leftBoundTick.tickLine=[1,this.dimensions[1],1,this.dimensions[1]-this.tickHeight],this.rightBoundTick.tickLine=[this.dimensions[0]-1,this.dimensions[1],this.dimensions[0]-1,this.dimensions[1]-this.tickHeight],this.tickTexts={},this.tickTexts.all=[this.leftBoundTick,this.rightBoundTick]}}},{key:"drawTicks",value:function(I){var g=this.gTicks[I.chr];g.visible=!0,g.clear();var C=+this.chromInfo.chromLengths[I.chr],A=Math.max(this._xScale(I.pos),0),i=Math.min(this._xScale(I.pos+C),this.dimensions[0]),e=(i-A)/this.tickWidth,l=Object(W.a)().domain([Math.max(1,this._xScale.invert(0)-I.pos),Math.min(C,this._xScale.invert(this.dimensions[0])-I.pos)]).range([A,i]).ticks(e).filter((function(I){return Number.isInteger(I)})),o=this.tickTexts[I.chr],t=this.tickHeight,c=t+this.tickTextSeparation;for(this.options.reverseOrientation&&(c=this.dimensions[1]-c);o.length<l.length;){var n=G("",this.pixiTextConfig);o.push(n),this.gTicks[I.chr].addChild(n)}for(;o.length>l.length;){var d=o.pop();this.gTicks[I.chr].removeChild(d)}for(var s=0;s<l.length;){o[s].visible=!0,o[s].anchor.x=.5,o[s].anchor.y="circular"===this.options.layout||this.options.reverseOrientation?0:1,this.flipText&&(o[s].scale.x=-1);var a="unknown"===this.options.assembly?"":"".concat(I.chr,": ");o[s].text=0===l[s]?"".concat(a,"1"):"".concat(a).concat(this.formatTick(l[s]));var Z=this._xScale(I.pos+l[s]);if("circular"===this.options.layout){var m=this.addCurvedText(o[s],Z+0);m&&this.pTicksCircular.addChild(m)}else{o[s].x=Z+0,o[s].y=this.dimensions[1]-c,o[s].tickLine=[Z-1,this.dimensions[1],Z-1,this.dimensions[1]-t-1];var b=this.options.reverseOrientation?0:this.dimensions[1],r=this.options.reverseOrientation?t:this.dimensions[1]-t;g.lineStyle(1,this.tickColor),g.moveTo(Z,b),g.lineTo(Z,r)}s+=1}for("circular"===this.options.layout&&(s=0);s<o.length;)o[s].visible=!1,s+=1;return l.length}},{key:"addCurvedText",value:function(g,C){var A=Object(r.a)(this.dimensions,2),i=A[0],e=A[1],l=this.options,o=l.startAngle,t=l.endAngle,c=Math.min(i,e)/Math.min(this.options.width,this.options.height),n=this.options.innerRadius*c,d=(this.options.outerRadius*c+n)/2,s=aI(C,i,d,i/2,e/2,o,t);g.x=s.x,g.y=s.y,g.resolution=4;var a=new I.libraries.PIXI.TextStyle(this.pixiTextConfig),Z=I.libraries.PIXI.TextMetrics.measureText(g.text,a),m=Z.width/(2*d*Math.PI)*i*360/(t-o),b=C-m/2,h=C+m/2;if(b<0){var G=-b;b=0,h+=G}else if(h>i){var u=h-i;h=i,b-=u}for(var y=[],B=n+Z.height/2+3,V=h;V>=b;V-=m/10){var p=aI(V,i,B,i/2,e/2,o,t);y.push(new I.libraries.PIXI.Point(p.x,p.y))}if(0!==y.length)return g.updateText(),new I.libraries.PIXI.SimpleRope(g.texture,y)}},{key:"draw",value:function(){var I=this;if(this.allTexts=[],this.texts){var g=i(this._xScale.domain()[0],this.chromInfo),C=i(this._xScale.domain()[1],this.chromInfo);if(g&&C){if("ends"===this.options.tickPositions&&"circular"!==this.options.layout){if(!this.gBoundTicks)return;return this.gBoundTicks.visible=!0,void this.drawBoundsTicks(g,C)}if(this.pTicks){for(var A="circular"===this.options.layout,e=0;e<this.texts.length;e++)this.texts[e].visible=!1,this.gTicks[this.chromInfo.cumPositions[e].chr].visible=!1;var l=this.tickHeight+this.tickTextSeparation;this.options.reverseOrientation&&(l=this.dimensions[1]-l),Object.keys(this.chromInfo.chrPositions).forEach((function(g){I.tickTexts[g]&&I.tickTexts[g].forEach((function(I){I.visible=!1}))})),this.pTicksCircular.removeChildren();for(var o=g[3];o<=C[3];o++){var t=this.chromInfo.cumPositions[o],c=t.pos+this.chromInfo.chromLengths[t.chr]/2,n=this._xScale(c),d=this.texts[o];d.anchor.x=.5,d.anchor.y=A?.5:this.options.reverseOrientation?0:1;var s=void 0;A?(s=this.addCurvedText(d,n))&&this.pTicksCircular.addChild(s):(d.x=n,d.y=this.dimensions[1]-l),d.updateTransform(),this.flipText&&(d.scale.x=-1);var a=this.drawTicks(t);A?a>0&&s&&this.pTicksCircular.removeChild(s):d.visible=a<=0,this.allTexts.push({importance:d.hashValue,text:d,rope:s})}this.hideOverlaps(this.allTexts)}}else console.warn("Empty chromInfo:",this.dataConfig,this.chromInfo)}}},{key:"hideOverlaps",value:function(I){var g=this,C=new O.a;I.sort((function(I,g){return g.importance-I.importance})).forEach((function(I){var A=I.text,i=I.rope;A.updateTransform();var e=A.getBounds(),l={minX:e.x-5,minY:e.y-5,maxX:e.x+e.width+10,maxY:e.y+e.height+10};C.collides(l)?(A.visible=!1,"circular"===g.options.layout&&i&&g.pTicksCircular.removeChild(i)):C.insert(l)}))}},{key:"setPosition",value:function(I){Object(d.a)(Object(s.a)(y.prototype),"setPosition",this).call(this,I);var g=Object(r.a)(this.position,2);this.pMain.position.x=g[0],this.pMain.position.y=g[1]}},{key:"zoomed",value:function(I,g){0===[].concat(Object(b.a)(I.domain()),Object(b.a)(g.domain())).filter((function(I){return isNaN(I)})).length&&(this.xScale(I),this.yScale(g),this.draw())}},{key:"exportSVG",value:function(){var I=this,g=null,C=null;if(Object(d.a)(Object(s.a)(y.prototype),"exportSVG",this)){var A=Object(d.a)(Object(s.a)(y.prototype),"exportSVG",this).call(this),i=Object(r.a)(A,2);C=i[0],g=i[1]}else g=C=document.createElement("g");C.setAttribute("class","chromosome-labels");var e=document.createElement("g");return g.appendChild(e),e.setAttribute("transform","translate(".concat(this.position[0],",").concat(this.position[1],")")),this.allTexts.filter((function(I){return I.text.visible})).forEach((function(I){var g=l(I.text);e.appendChild(g)})),Object.values(this.tickTexts).forEach((function(g){g.filter((function(I){return I.visible})).forEach((function(g){if(g.tickLine){var C=l(g);e.appendChild(C),C=o(g.x,I.options.reverseOrientation?0:I.dimensions[1],g.x,I.options.reverseOrientation?I.tickHeight:I.dimensions[1]-I.tickHeight,1,I.tickColor);var A=document.createElement("line");A.setAttribute("x1",String(g.tickLine[0])),A.setAttribute("y1",String(g.tickLine[1])),A.setAttribute("x2",String(g.tickLine[2])),A.setAttribute("y2",String(g.tickLine[3])),A.setAttribute("style","stroke: grey"),e.appendChild(C),e.appendChild(A)}}))})),[C,g]}}]),y}(I.tracks.PixiTrack);return new u}));function $g(I){if(!(this instanceof $g?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');for(var g=function(g){Object(a.a)(A,g);var C=Object(Z.a)(A);function A(I){var g,i,e;Object(t.a)(this,A),g=C.call.apply(C,[this].concat(Object(b.a)(I)));var l=Object(r.a)(I,2),o=l[0],c=l[1],d=o.registerViewportChanged,s=o.removeViewportChanged,a=o.setDomainsCallback;g.uid=Ag(),g.options=c,g.hasFromView=!o.projectionXDomain,g.removeViewportChanged=s,g.setDomainsCallback=a,g.viewportXDomain=g.hasFromView?null:o.projectionXDomain,g.viewportYDomain=g.hasFromView?null:[0,0],g.prevExtent=[0,0],g.RR=.02;var Z=[0,1.7*Math.PI];return g.circularBrushData=g.getBrushData(Z),g.brush=Object(j.a)().innerRadius(null!=(i=g.options.innerRadius)?i:100).outerRadius(null!=(e=g.options.outerRadius)?e:200),g.gBrush=g.gMain.append("g").attr("id","brush-".concat(g.uid)).selectAll(".brush").data(g.circularBrushData).enter().append("path").attr("class","brush").attr("d",g.brush).attr("fill",g.options.projectionFillColor).attr("stroke",g.options.projectionStrokeColor).attr("fill-opacity",(function(I){return"brush"===I.type?g.options.projectionFillOpacity:0})).attr("stroke-opacity",(function(I){return"brush"===I.type?g.options.projectionStrokeOpacity:0})).attr("stroke-width",g.options.strokeWidth).style("pointer-events","all").style("cursor",(function(I){return I.cursor})).call(g.dragged()),d(g.uid,g.viewportChanged.bind(Object(n.a)(g))),g.draw(),g}return Object(c.a)(A,[{key:"getBrushData",value:function(I){return[{type:"brush",startAngle:I[0],endAngle:I[1],cursor:"grab"},{type:"start",startAngle:I[0],endAngle:I[0]+this.RR,cursor:"move"},{type:"end",startAngle:I[1]-this.RR,endAngle:I[1],cursor:"move"}]}},{key:"cropExtent",value:function(I){for(var g=Object(r.a)(I,2),C=g[0],A=g[1],i=0;(C>2*Math.PI||A>2*Math.PI||C<0||A<0)&&!(i++>10);)C>2*Math.PI||A>2*Math.PI?(C-=2*Math.PI,A-=2*Math.PI):(C<0||A<0)&&(C+=2*Math.PI,A+=2*Math.PI);return[C,A].sort((function(I,g){return I-g}))}},{key:"updateBrush",value:function(I){var g=Object(r.a)(I,2),C=g[0],A=g[1];C<=0&&A<=0||C>=2*Math.PI-0&&A>=2*Math.PI-0?this.gBrush.attr("visibility","hidden"):(C<0&&(C=0),C>2*Math.PI-0&&(C=2*Math.PI-0),A<0&&(A=0),A>2*Math.PI-0&&(A=2*Math.PI-0),this.circularBrushData=this.getBrushData(I),this.gBrush.data(this.circularBrushData).attr("d",this.brush).attr("visibility","visible"))}},{key:"dragged",value:function(){var g=this;return I.libraries.d3Drag.drag().on("start",(function(){g.startEvent=I.libraries.d3Selection.event.sourceEvent,g.prevExtent=[g.circularBrushData[0].startAngle,g.circularBrushData[0].endAngle]})).on("drag",(function(C){var A=Object(r.a)(g.position,2),i=A[0],e=A[1],l=Object(r.a)(g.dimensions,2),o=l[0],t=l[1],c=I.libraries.d3Selection.event.sourceEvent,n=g.startEvent.layerX-i,d=g.startEvent.layerY-e,s=c.layerX-i,a=c.layerY-e,Z=Math.atan2(n-o/2,d-t/2)-Math.atan2(s-o/2,a-t/2),m=Object(r.a)(g.prevExtent,2),b=m[0],h=m[1];if("brush"===C.type){if(h+=Z,(b+=Z)<0||2*Math.PI-0<h){var G=0-b,u=h-(2*Math.PI-0);G>u?(h+=G,b+=G):(b-=u,h-=u)}}else"start"===C.type?b+=Z:"end"===C.type&&(h+=Z);var y=g.cropExtent([b,h]),B=Object(r.a)(y,2);if(b=B[0],h=B[1],g._xScale&&g._yScale){var V=(g.options.endAngle-g.options.startAngle)/360,p=b-g.options.startAngle/360*Math.PI*2,X=h-g.options.startAngle/360*Math.PI*2,W=[g._xScale.invert(o-o*X/(2*Math.PI*V)),g._xScale.invert(o-o*p/(2*Math.PI*V))],H=g.viewportYDomain;g.hasFromView||(g.viewportXDomain=W),g.setDomainsCallback(W,H),g.updateBrush([b,h])}}))}},{key:"draw",value:function(){if(this._xScale&&this.yScale&&this.viewportXDomain&&this.viewportYDomain){var I=this._xScale(this.viewportXDomain[0]),g=this._xScale(this.viewportXDomain[1]),C=Object(r.a)(this.dimensions,1)[0],A=sI(I,C,this.options.startAngle,this.options.endAngle)+Math.PI/2,i=sI(g,C,this.options.startAngle,this.options.endAngle)+Math.PI/2,e=this.cropExtent([i,A]),l=Object(r.a)(e,2);i=l[0],A=l[1],this.updateBrush([i,A])}}},{key:"viewportChanged",value:function(I,g){var C=I.domain(),A=g.domain();this.viewportXDomain=C,this.viewportYDomain=A,this.draw()}},{key:"remove",value:function(){this.removeViewportChanged(this.uid),Object(d.a)(Object(s.a)(A.prototype),"remove",this).call(this)}},{key:"rerender",value:function(){}},{key:"zoomed",value:function(I,g){this.xScale(I),this.yScale(g),this.draw()}},{key:"setPosition",value:function(I){Object(d.a)(Object(s.a)(A.prototype),"setPosition",this).call(this,I),this.draw()}},{key:"setDimensions",value:function(I){Object(d.a)(Object(s.a)(A.prototype),"setDimensions",this).call(this,I),this.gBrush.attr("transform","translate(".concat(I[0]/2,",").concat(I[1]/2,")")),this.draw()}}]),A}(I.tracks.SVGTrack),C=arguments.length,A=new Array(C>1?C-1:0),i=1;i<C;i++)A[i-1]=arguments[i];return new g(A)}function qg(I,g){var C=I.field,A=I.not,i=Array.from(g);if("oneOf"in I){var e=I.oneOf;i=i.filter((function(I){return A?-1===e.indexOf(I[C]):-1!==e.indexOf(I[C])}))}else if(function(I){return"inRange"in I}(I)){var l=I.inRange;i=i.filter((function(I){return A?!(l[0]<=I[C]&&I[C]<=l[1]):l[0]<=I[C]&&I[C]<=l[1]}))}else if(function(I){return"include"in I}(I)){var o=I.include;i=i.filter((function(I){return A?"".concat(I[C]).includes(o):!"".concat(I[C]).includes(o)}))}return i}function IC(I,g){var C=I.fields,A=I.separator,i=I.newField,e=Array.from(g);return e=e.map((function(I){var g=C.map((function(g){return I[g]}));return I[i]=g.join(A),I}))}function gC(I,g){var C=I.field,A=I.replace,i=I.newField,e=Array.from(g);return e=e.map((function(I){return I[i]=I[C],A.forEach((function(g){var C=g.from,A=g.to;I[i]=I[i].toString().replaceAll(C,A)})),I}))}function CC(I,g){var C=I.field,A=I.base,i=I.newField,e=Array.from(g);return e=e.map((function(I){return+I[C]&&(I[null!=i?i:C]="e"===A?Math.log(+I[C]):Math.log(+I[C])/Math.log(null!=A?A:10)),I}))}function AC(I,g){var C=I.startField,A=I.endField,i=I.newField,e=Array.from(g);return e.forEach((function(I){var g=I[C],e=I[A];g&&e&&(I[i]=Math.abs(+e-+g))})),e}function iC(I,g){var C=I.firstBp,A=I.secondBp,i=I.newField,e=Array.from(g);return e.forEach((function(I){if(I[C.chrField]===I[A.chrField]){var g=I[C.posField],e=I[A.posField],l=I[C.strandField],o=I[A.strandField];if(g>e){var t=g,c=l;g=e,l=o,e=t,o=c}switch("".concat(l).concat(o)){case"+-":I[i]="DEL";break;case"--":I[i]="t2tINV";break;case"++":I[i]="h2hINV";break;case"-+":I[i]="DUP";break;default:I[i]="unknown"}}else I[i]="TRA"})),e}function eC(I,g,C){var A=I.startField,i=I.endField,e=I.newField,l=I.groupField,t={};return g.forEach((function(I){for(var g=C(I[A]),e=C(I[i]),o=l?I[l]:"__NO_GROUP__",c=Math.floor(g);c<e;c+=1)t[o]||(t[o]={}),t[o][c]||(t[o][c]=0),t[o][c]++})),Object.entries(t).flatMap((function(I){var g=Object(r.a)(I,2),t=g[0],c=g[1];return Object.entries(c).map((function(I){var g,c=Object(r.a)(I,2),n=c[0],d=c[1];return g={},Object(o.a)(g,A,C.invert(+n)),Object(o.a)(g,i,C.invert(+n+1)),Object(o.a)(g,null!=e?e:"coverage",d),Object(o.a)(g,null!=l?l:"group",t),g}))}))}function lC(I,g,C){var A=I.boundingBox,i=I.method,e=I.newField,l=A.startField,o=A.endField,t=A.groupField,c=0;A.padding&&C&&!A.isPaddingBP?c=Math.abs(C.invert(A.padding)-C.invert(0)):A.padding&&A.isPaddingBP&&(c=A.padding);var n=Array.from(g);if(n&&n.length>0&&(!Object.keys(n[0]).find((function(I){return I===l}))||!Object.keys(n[0]).find((function(I){return I===o}))))return n;if("pile"===i){var d=I.maxRows,s={};n.sort((function(I,g){return I[l]-g[l]})).forEach((function(I){var g=I[l]-c,C=I[o]+c,A=t?I[t]:"__NO_GROUP__";s[A]||(s[A]=[]);var i=s[A].findIndex((function(I){return C<I.start?(I.start=g,!0):I.end<g&&(I.end=C,!0)}));-1===i&&(s[A].push({start:g,end:C}),i=s[A].length-1),I[e]="".concat(d&&d<=i?d-1:i)}))}else if("spread"===i){var a=[];n.sort((function(I,g){return I[l]-g[l]})).forEach((function(I){var g=I[l]-c,C=I[o]+c,A=a.filter((function(I){return I.start===g&&C===I.end||I.start<g&&g<I.end||I.start<C&&C<I.end||g<I.start&&I.end<C}));if(A.length>0){var i=0;do{(A=a.filter((function(I){return I.start===g&&C===I.end||I.start<g&&g<I.end||I.start<C&&C<I.end||g<I.start&&I.end<C}))).length>0&&(i%2===0?(g+=c*i,C+=c*i):(g-=c*i,C-=c*i)),i++}while(A.length>0&&i<1e3)}I["".concat(e,"Start")]="".concat(g+c),I["".concat(e,"Etart")]="".concat(C-c),a.push({start:g,end:C})}))}return n}function oC(I,g){var C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"hg38",A=I.separator,i=I.fields,e=I.flag,l=Array.from(g);return l=l.map((function(I){var g=[];return i.forEach((function(i){var l=i.field,t=i.type,c=i.newField,n=i.chrField;I[l].toString().split(A).forEach((function(A,i){var l,d=A;("genomic"===t&&(d=Qg(C).interval[I[n]][0]+ +A),g[i])?g[i][c]=d:g[i]=Object.assign(JSON.parse(JSON.stringify(I)),(l={},Object(o.a)(l,c,d),Object(o.a)(l,e.field,e.value),l))}))})),[I].concat(g)})).reduce((function(I,g){return I.concat(g)}),[]),l}function tC(I,g){var C=I.field,A=I.genomicField,i=I.baseGenomicField,e=I.genomicLengthField,l=Array.from(g);return l=l.map((function(I){var g=JSON.parse(I[C]);return g=g.map((function(g){var C,l,t;return g[A]&&I[i]&&(g["".concat(A,"_start")]=+g[A]+ +I[i],g["".concat(A,"_end")]=+g[A]+ +I[i]+ +g[e]),Object.assign(JSON.parse(JSON.stringify(I)),Object(m.a)(Object(m.a)({},g),{},(C={},Object(o.a)(C,"".concat(A,"_start"),g["".concat(A,"_start")]),Object(o.a)(C,"".concat(A,"_end"),g["".concat(A,"_end")]),Object(o.a)(C,"type",null!=(t=null!=(l=g.type)?l:g.variant)?t:null),Object(o.a)(C,"isParsedRow","yes"),C)))})),[I].concat(Object(b.a)(g))})).reduce((function(I,g){return I.concat(g)}),[])}function cC(I,g){if(0===function(I){var g=[];return VI.forEach((function(C){var A=I[C];DI(A)&&"aggregate"in A&&g.push(C)})),g}(I).length)return g;var C=xI(I,"nominal");if(1!==C.length)return console.warn("Currently, we only support aggregating datasets with single nominal field."),g;var A=I[C[0]];if(!DI(A))return g;var i=A.field;if(!i)return g;var e=[].concat(Object(b.a)(xI(I,"quantitative")),Object(b.a)(xI(I,"genomic"))),l=[],o=Array.from(new Set(g.map((function(I){return I[i]})))),t=!1;return o.forEach((function(C){var A={};A[i]=C,e.forEach((function(e){var l=I[e];if(DI(l)){var o=l.field;o&&"aggregate"in l?A[o]="max"===l.aggregate?Math.max.apply(Math,Object(b.a)(g.filter((function(I){return I[i]===C})).map((function(I){return+I[o]})))):Math.min.apply(Math,Object(b.a)(g.filter((function(I){return I[i]===C})).map((function(I){return+I[o]})))):t=!0}else t=!0})),l.push(A)})),t?g:l}function nC(I){if(!(this instanceof nC?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');for(var g=function(){function I(g){var C=this;Object(t.a)(this,I);var A=Object(r.a)(g,1)[0];if(this.dataConfig=A,this.tilesetInfoLoading=!1,this.assembly=this.dataConfig.assembly,this.filter=this.dataConfig.filter,A.url){var i=Qg(this.assembly).size,e=[],l={},o=0;Object.keys(Qg(this.assembly).size).forEach((function(I,g){var A={id:g,chr:I,pos:o};e.push(A),l[I]=A,o+=Qg(C.assembly).size[I]})),this.chromSizes={chrToAbs:function(I,g){return C.chromSizes.chrPositions[I].pos+g},cumPositions:e,chrPositions:l,totalLength:o,chromLengths:i},A.data?this.values=A.data:this.dataPromise=this.fetchCSV()}else console.error("Please provide the `url` of the data")}return Object(c.a)(I,[{key:"fetchCSV",value:function(){var I,g=this,C=this.dataConfig,A=C.url,i=C.chromosomeField,e=C.genomicFields,l=C.headerNames,o=C.chromosomePrefix,t=C.longToWideId,c=C.genomicFieldsToConvert,n=null!=(I=this.dataConfig.separator)?I:",";return fetch(A).then((function(I){return I.ok?I.text():Promise.reject(I.status)})).then((function(I){var C=l?"".concat(l.join(n),"\n").concat(I):I;return Object(L.a)(n).parse(C,(function(I){var C=!0;if(c?c.forEach((function(A){var i=A.chromosomeField;A.genomicFields.forEach((function(A){try{if("unknown"!==g.assembly){var e=o?I[i].replace(o,"chr"):I[i].includes("chr")?I[i]:"chr".concat(I[i]);I[A]=Qg(g.assembly).interval[e][0]+ +I[A]}}catch(l){C=!1}}))})):e.forEach((function(A){if(I[i])try{var e=o?I[i].replace(o,"chr"):I[i].includes("chr")?I[i]:"chr".concat(I[i]);I[A]=Qg(g.assembly).interval[e][0]+ +I[A]}catch(l){C=!1}})),C)return I}))})).then((function(I){var C;if(t&&(null==(C=I[0])?void 0:C[t])){var A=Object.keys(I[0]),i={};I.forEach((function(I){i[I[t]]?A.forEach((function(g){i[I[t]]["".concat(g,"_2")]=I[g]})):i[I[t]]=JSON.parse(JSON.stringify(I))})),g.values=Object.keys(i).map((function(I){return i[I]}))}else g.values=I})).catch((function(I){console.error("[Gosling Data Fetcher] Error fetching data",I)}))}},{key:"generateTilesetInfo",value:function(I){this.tilesetInfoLoading=!1;var g=this.chromSizes.totalLength,C={tile_size:1024,max_zoom:Math.ceil(Math.log(g/1024)/Math.log(2)),max_width:g,min_pos:[0,0],max_pos:[g,g]};return I&&I(C),C}},{key:"tilesetInfo",value:function(I){var g=this;if(this.dataPromise)return this.tilesetInfoLoading=!0,this.dataPromise.then((function(){return g.generateTilesetInfo(I)})).catch((function(I){g.tilesetInfoLoading=!1,console.error("[Gosling Data Fetcher] Error parsing data:",I)}))}},{key:"fetchTilesDebounced",value:function(I,g){var C,A={},i=[],e=[],o=Object(l.a)(g);try{for(o.s();!(C=o.n()).done;){var t=C.value,c=t.split("."),n=parseInt(c[0],10),d=parseInt(c[1],10),s=parseInt(c[2],10);Number.isNaN(d)||Number.isNaN(n)?console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:",n,d,s):(i.push(t),e.push(this.tile(n,d,s)))}}catch(a){o.e(a)}finally{o.f()}return Promise.all(e).then((function(g){g.forEach((function(I,g){var C=i[g];A[C]=I,A[C].tilePositionId=C})),I(A)})),A}},{key:"tile",value:function(I,g,C){var A,i=this;return null==(A=this.tilesetInfo())?void 0:A.then((function(A){var e,l,o=+A.max_width/Math.pow(2,+I),t=A.min_pos[0]+g*o,c=A.min_pos[0]+(g+1)*o,n=i.values.filter((function(I){if(i.dataConfig.genomicFields)return i.dataConfig.genomicFields.find((function(g){return t<I[g]&&I[g]<=c}));var g=[];return i.dataConfig.genomicFieldsToConvert.forEach((function(I){return g.push.apply(g,Object(b.a)(I.genomicFields))})),g.find((function(g){return t<I[g]&&I[g]<=c}))}));null==(e=i.filter)||e.forEach((function(I){n=qg(I,n)}));var d=null!=(l=i.dataConfig.sampleLength)?l:1e3;return{tabularData:n.length>d?Object(w.a)(n,d):n,server:null,tilePos:[g,C],zoomLevel:I}}))}}]),I}(),C=arguments.length,A=new Array(C>1?C-1:0),i=1;i<C;i++)A[i-1]=arguments[i];return new g(A)}function dC(I){if(!(this instanceof dC?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');for(var g=function(){function I(g){var C=this;Object(t.a)(this,I);var A=Object(r.a)(g,1)[0];if(this.dataConfig=A,this.tilesetInfoLoading=!1,this.assembly=this.dataConfig.assembly,A.values){var i=Qg(this.assembly).size,e=[],l={},o=0;Object.keys(Qg(this.assembly).size).forEach((function(I,g){var A={id:g,chr:I,pos:o};e.push(A),l[I]=A,o+=Qg(C.assembly).size[I]})),this.chromSizes={chrToAbs:function(I,g){return C.chromSizes.chrPositions[I].pos+g},cumPositions:e,chrPositions:l,totalLength:o,chromLengths:i},this.values=A.values.map((function(I){var g=!0;if(C.dataConfig.genomicFields.forEach((function(A){if(I[C.dataConfig.chromosomeField])try{var i=I[C.dataConfig.chromosomeField].includes("chr")?I[C.dataConfig.chromosomeField]:"chr".concat(I[C.dataConfig.chromosomeField]);I[A]=Qg(C.assembly).interval[i][0]+ +I[A]}catch(e){g=!1}})),g)return I}))}else console.error("Please provide `values` of the raw data")}return Object(c.a)(I,[{key:"tilesetInfo",value:function(I){this.tilesetInfoLoading=!1;var g=this.chromSizes.totalLength,C={tile_size:1024,max_zoom:Math.ceil(Math.log(g/1024)/Math.log(2)),max_width:g,min_pos:[0,0],max_pos:[g,g]};return I&&I(C),C}},{key:"fetchTilesDebounced",value:function(I,g){var C,A={},i=[],e=[],o=Object(l.a)(g);try{for(o.s();!(C=o.n()).done;){var t=C.value,c=t.split("."),n=parseInt(c[0],10),d=parseInt(c[1],10),s=parseInt(c[2],10);Number.isNaN(d)||Number.isNaN(n)?console.warn("[Gosling Data Fetcher] Invalid tile zoom or position:",n,d,s):(i.push(t),e.push(this.tile(n,d,s)))}}catch(a){o.e(a)}finally{o.f()}return Promise.all(e).then((function(g){g.forEach((function(I,g){var C=i[g];A[C]=I,A[C].tilePositionId=C})),I(A)})),A}},{key:"tile",value:function(I,g,C){var A,i=this,e=this.tilesetInfo(),l=+e.max_width/Math.pow(2,+I),o=e.min_pos[0]+g*l,t=e.min_pos[0]+(g+1)*l,c=this.values,n=null!=(A=this.dataConfig.sampleLength)?A:1e3;return n<c.length&&(c=c.filter((function(I){return i.dataConfig.genomicFields.find((function(g){return o<I[g]&&I[g]<=t}))}))),n<c.length&&(c=Object(w.a)(c,n)),{tabularData:c,server:null,tilePos:[g,C],zoomLevel:I}}}]),I}(),C=arguments.length,A=new Array(C>1?C-1:0),i=1;i<C;i++)A[i-1]=arguments[i];return new g(A)}$g.config={type:"brush-track",datatype:["projection"],local:!1,projection:!0,orientation:"2d",thumbnail:(new DOMParser).parseFromString('<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 5640 5420" preserveAspectRatio="xMidYMid meet"> <g id="layer101" fill="#000000" stroke="none"> <path d="M0 2710 l0 -2710 2820 0 2820 0 0 2710 0 2710 -2820 0 -2820 0 0 -2710z"/> </g> <g id="layer102" fill="#750075" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> <path d="M4340 2710 l0 -2510 560 0 560 0 0 2510 0 2510 -560 0 -560 0 0 -2510z"/> <path d="M200 1870 l0 -1670 630 0 630 0 0 1670 0 1670 -630 0 -630 0 0 -1670z"/> <path d="M1660 1810 l0 -1610 570 0 570 0 0 1610 0 1610 -570 0 -570 0 0 -1610z"/> <path d="M3000 840 l0 -640 570 0 570 0 0 640 0 640 -570 0 -570 0 0 -640z"/> </g> <g id="layer103" fill="#ffff04" stroke="none"> <path d="M200 4480 l0 -740 630 0 630 0 0 740 0 740 -630 0 -630 0 0 -740z"/> <path d="M1660 4420 l0 -800 570 0 570 0 0 800 0 800 -570 0 -570 0 0 -800z"/> <path d="M3000 3450 l0 -1770 570 0 570 0 0 1770 0 1770 -570 0 -570 0 0 -1770z"/> </g> </svg>',"text/xml").documentElement,availableOptions:["innerRadius","outerRadius","startAngle","endAngle","axisPositionHorizontal","projectionFillColor","projectionStrokeColor","projectionFillOpacity","projectionStrokeOpacity","strokeWidth"],defaultOptions:{innerRadius:100,outerRadius:200,startAngle:0,endAngle:360,axisPositionHorizontal:"left",projectionFillColor:"#777",projectionStrokeColor:"#777",projectionFillOpacity:.3,projectionStrokeOpacity:.7,strokeWidth:1}},nC.config={type:"csv"},dC.config={type:"json"};var sC="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof window?window:"undefined"!==typeof I?I:"undefined"!==typeof self?self:{};function aC(I){if(I.__esModule)return I;var g=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(I).forEach((function(C){var A=Object.getOwnPropertyDescriptor(I,C);Object.defineProperty(g,C,A.get?A:{enumerable:!0,get:function(){return I[C]}})})),g}var ZC={},mC={},bC={exports:{}};!function(I){I.exports=function(I){return I&&I.__esModule?I:{default:I}},I.exports.default=I.exports,I.exports.__esModule=!0}(bC);var rC={exports:{}};!function(I){var g=function(I){var g,C=Object.prototype,A=C.hasOwnProperty,i="function"===typeof Symbol?Symbol:{},e=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",o=i.toStringTag||"@@toStringTag";function t(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{t({},"")}catch(K){t=function(I,g,C){return I[g]=C}}function c(I,g,C,A){var i=g&&g.prototype instanceof b?g:b,e=Object.create(i.prototype),l=new Y(A||[]);return e._invoke=function(I,g,C){var A=d;return function(i,e){if(A===a)throw new Error("Generator is already running");if(A===Z){if("throw"===i)throw e;return f()}for(C.method=i,C.arg=e;;){var l=C.delegate;if(l){var o=X(l,C);if(o){if(o===m)continue;return o}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if(A===d)throw A=Z,C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);A=a;var t=n(I,g,C);if("normal"===t.type){if(A=C.done?Z:s,t.arg===m)continue;return{value:t.arg,done:C.done}}"throw"===t.type&&(A=Z,C.method="throw",C.arg=t.arg)}}}(I,C,l),e}function n(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(K){return{type:"throw",arg:K}}}I.wrap=c;var d="suspendedStart",s="suspendedYield",a="executing",Z="completed",m={};function b(){}function r(){}function h(){}var G={};t(G,e,(function(){return this}));var u=Object.getPrototypeOf,y=u&&u(u(R([])));y&&y!==C&&A.call(y,e)&&(G=y);var B=h.prototype=b.prototype=Object.create(G);function V(I){["next","throw","return"].forEach((function(g){t(I,g,(function(I){return this._invoke(g,I)}))}))}function p(I,g){function C(i,e,l,o){var t=n(I[i],I,e);if("throw"!==t.type){var c=t.arg,d=c.value;return d&&"object"===typeof d&&A.call(d,"__await")?g.resolve(d.__await).then((function(I){C("next",I,l,o)}),(function(I){C("throw",I,l,o)})):g.resolve(d).then((function(I){c.value=I,l(c)}),(function(I){return C("throw",I,l,o)}))}o(t.arg)}var i;this._invoke=function(I,A){function e(){return new g((function(g,i){C(I,A,g,i)}))}return i=i?i.then(e,e):e()}}function X(I,C){var A=I.iterator[C.method];if(A===g){if(C.delegate=null,"throw"===C.method){if(I.iterator.return&&(C.method="return",C.arg=g,X(I,C),"throw"===C.method))return m;C.method="throw",C.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var i=n(A,I.iterator,C.arg);if("throw"===i.type)return C.method="throw",C.arg=i.arg,C.delegate=null,m;var e=i.arg;return e?e.done?(C[I.resultName]=e.value,C.next=I.nextLoc,"return"!==C.method&&(C.method="next",C.arg=g),C.delegate=null,m):e:(C.method="throw",C.arg=new TypeError("iterator result is not an object"),C.delegate=null,m)}function W(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function H(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function Y(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(W,this),this.reset(!0)}function R(I){if(I){var C=I[e];if(C)return C.call(I);if("function"===typeof I.next)return I;if(!isNaN(I.length)){var i=-1,l=function C(){for(;++i<I.length;)if(A.call(I,i))return C.value=I[i],C.done=!1,C;return C.value=g,C.done=!0,C};return l.next=l}}return{next:f}}function f(){return{value:g,done:!0}}return r.prototype=h,t(B,"constructor",h),t(h,"constructor",r),r.displayName=t(h,o,"GeneratorFunction"),I.isGeneratorFunction=function(I){var g="function"===typeof I&&I.constructor;return!!g&&(g===r||"GeneratorFunction"===(g.displayName||g.name))},I.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,h):(I.__proto__=h,t(I,o,"GeneratorFunction")),I.prototype=Object.create(B),I},I.awrap=function(I){return{__await:I}},V(p.prototype),t(p.prototype,l,(function(){return this})),I.AsyncIterator=p,I.async=function(g,C,A,i,e){void 0===e&&(e=Promise);var l=new p(c(g,C,A,i),e);return I.isGeneratorFunction(C)?l:l.next().then((function(I){return I.done?I.value:l.next()}))},V(B),t(B,o,"Generator"),t(B,e,(function(){return this})),t(B,"toString",(function(){return"[object Generator]"})),I.keys=function(I){var g=[];for(var C in I)g.push(C);return g.reverse(),function C(){for(;g.length;){var A=g.pop();if(A in I)return C.value=A,C.done=!1,C}return C.done=!0,C}},I.values=R,Y.prototype={constructor:Y,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=g,this.done=!1,this.delegate=null,this.method="next",this.arg=g,this.tryEntries.forEach(H),!I)for(var C in this)"t"===C.charAt(0)&&A.call(this,C)&&!isNaN(+C.slice(1))&&(this[C]=g)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var C=this;function i(A,i){return o.type="throw",o.arg=I,C.next=A,i&&(C.method="next",C.arg=g),!!i}for(var e=this.tryEntries.length-1;e>=0;--e){var l=this.tryEntries[e],o=l.completion;if("root"===l.tryLoc)return i("end");if(l.tryLoc<=this.prev){var t=A.call(l,"catchLoc"),c=A.call(l,"finallyLoc");if(t&&c){if(this.prev<l.catchLoc)return i(l.catchLoc,!0);if(this.prev<l.finallyLoc)return i(l.finallyLoc)}else if(t){if(this.prev<l.catchLoc)return i(l.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<l.finallyLoc)return i(l.finallyLoc)}}}},abrupt:function(I,g){for(var C=this.tryEntries.length-1;C>=0;--C){var i=this.tryEntries[C];if(i.tryLoc<=this.prev&&A.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var e=i;break}}e&&("break"===I||"continue"===I)&&e.tryLoc<=g&&g<=e.finallyLoc&&(e=null);var l=e?e.completion:{};return l.type=I,l.arg=g,e?(this.method="next",this.next=e.finallyLoc,m):this.complete(l)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),m},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),H(C),m}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var i=A.arg;H(C)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(I,C,A){return this.delegate={iterator:R(I),resultName:C,nextLoc:A},"next"===this.method&&(this.arg=g),m}},I}(I.exports);try{regeneratorRuntime=g}catch(C){"object"===typeof globalThis?globalThis.regeneratorRuntime=g:Function("r","regeneratorRuntime = r")(g)}}(rC);var hC=rC.exports,GC={exports:{}};!function(I){function g(I,g,C,A,i,e,l){try{var o=I[e](l),t=o.value}catch(c){return void C(c)}o.done?g(t):Promise.resolve(t).then(A,i)}I.exports=function(I){return function(){var C=this,A=arguments;return new Promise((function(i,e){var l=I.apply(C,A);function o(I){g(l,i,e,o,t,"next",I)}function t(I){g(l,i,e,o,t,"throw",I)}o(void 0)}))}},I.exports.default=I.exports,I.exports.__esModule=!0}(GC);var uC={exports:{}};!function(I){I.exports=function(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")},I.exports.default=I.exports,I.exports.__esModule=!0}(uC);var yC={exports:{}};!function(I){function g(I,g){for(var C=0;C<g.length;C++){var A=g[C];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(I,A.key,A)}}I.exports=function(I,C,A){return C&&g(I.prototype,C),A&&g(I,A),I},I.exports.default=I.exports,I.exports.__esModule=!0}(yC);var BC={exports:{}},VC={exports:{}};!function(I){function g(C,A){return I.exports=g=Object.setPrototypeOf||function(I,g){return I.__proto__=g,I},I.exports.default=I.exports,I.exports.__esModule=!0,g(C,A)}I.exports=g,I.exports.default=I.exports,I.exports.__esModule=!0}(VC),function(I){var g=VC.exports;I.exports=function(I,C){if("function"!==typeof C&&null!==C)throw new TypeError("Super expression must either be null or a function");I.prototype=Object.create(C&&C.prototype,{constructor:{value:I,writable:!0,configurable:!0}}),C&&g(I,C)},I.exports.default=I.exports,I.exports.__esModule=!0}(BC);var pC={exports:{}},XC={exports:{}};!function(I){function g(C){return"function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?(I.exports=g=function(I){return typeof I},I.exports.default=I.exports,I.exports.__esModule=!0):(I.exports=g=function(I){return I&&"function"===typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I.exports.default=I.exports,I.exports.__esModule=!0),g(C)}I.exports=g,I.exports.default=I.exports,I.exports.__esModule=!0}(XC);var WC={exports:{}};!function(I){I.exports=function(I){if(void 0===I)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return I},I.exports.default=I.exports,I.exports.__esModule=!0}(WC),function(I){var g=XC.exports.default,C=WC.exports;I.exports=function(I,A){if(A&&("object"===g(A)||"function"===typeof A))return A;if(void 0!==A)throw new TypeError("Derived constructors may only return object or undefined");return C(I)},I.exports.default=I.exports,I.exports.__esModule=!0}(pC);var HC={exports:{}};!function(I){function g(C){return I.exports=g=Object.setPrototypeOf?Object.getPrototypeOf:function(I){return I.__proto__||Object.getPrototypeOf(I)},I.exports.default=I.exports,I.exports.__esModule=!0,g(C)}I.exports=g,I.exports.default=I.exports,I.exports.__esModule=!0}(HC);var YC={},RC={exports:{}};!function(I){I.exports=function(I,g,C){return g in I?Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}):I[g]=C,I},I.exports.default=I.exports,I.exports.__esModule=!0}(RC);var fC={},KC={};KC.runInThisContext=function(I){return new Function("code","return eval(code);").call(globalThis,I)};var wC={};function JC(I){return(JC="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"===typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I})(I)}var SC=function(){this.code="",this.scopes=[["vars"]],this.isAsync=!1,this.bitFields=[],this.tmpVariableCount=0,this.references={}};SC.prototype.generateVariable=function(I){var g=[];for(Array.prototype.push.apply(g,this.scopes[this.scopes.length-1]);/^\$parent\./.test(I);)g.pop(),I=I.replace(/^\$parent\./,"");return I&&g.push(I),g.join(".")},SC.prototype.generateOption=function(I){switch(JC(I)){case"number":return I.toString();case"string":return this.generateVariable(I);case"function":return"(".concat(I,").call(").concat(this.generateVariable(),", vars)");default:return}},SC.prototype.generateError=function(){var I=Array.prototype.slice.call(arguments),g=SC.interpolate.apply(this,I);this.isAsync?this.pushCode("return process.nextTick(function() { callback(new Error(".concat(g,"), vars); });")):this.pushCode("throw new Error(".concat(g,");"))},SC.prototype.generateTmpVariable=function(){return"$tmp".concat(this.tmpVariableCount++)},SC.prototype.pushCode=function(){var I=Array.prototype.slice.call(arguments);this.code+="".concat(SC.interpolate.apply(this,I),"\n")},SC.prototype.pushPath=function(I){I&&this.scopes[this.scopes.length-1].push(I)},SC.prototype.popPath=function(I){I&&this.scopes[this.scopes.length-1].pop()},SC.prototype.pushScope=function(I){this.scopes.push([I])},SC.prototype.popScope=function(){this.scopes.pop()},SC.prototype.addReference=function(I){this.references[I]||(this.references[I]={resolved:!1,requested:!1})},SC.prototype.markResolved=function(I){this.references[I].resolved=!0},SC.prototype.markRequested=function(I){I.forEach(function(I){this.references[I].requested=!0}.bind(this))},SC.prototype.getUnresolvedReferences=function(){var I=this.references;return Object.keys(this.references).filter((function(g){return!I[g].resolved&&!I[g].requested}))},SC.interpolate=function(I){var g=/{\d+}/g,C=I.match(g),A=Array.prototype.slice.call(arguments,1);return C&&C.forEach((function(g){var C=parseInt(g.substr(1,g.length-2),10);I=I.replace(g,A[C].toString())})),I},wC.Context=SC;var FC=vC,NC=null;try{NC=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(im){}function vC(I,g,C){this.low=0|I,this.high=0|g,this.unsigned=!!C}function kC(I){return!0===(I&&I.__isLong__)}vC.prototype.__isLong__,Object.defineProperty(vC.prototype,"__isLong__",{value:!0}),vC.isLong=kC;var DC={},zC={};function MC(I,g){var C,A,i;return g?(i=0<=(I>>>=0)&&I<256)&&(A=zC[I])?A:(C=xC(I,(0|I)<0?-1:0,!0),i&&(zC[I]=C),C):(i=-128<=(I|=0)&&I<128)&&(A=DC[I])?A:(C=xC(I,I<0?-1:0,!1),i&&(DC[I]=C),C)}function UC(I,g){if(isNaN(I))return g?$C:_C;if(g){if(I<0)return $C;if(I>=jC)return AA}else{if(I<=-LC)return iA;if(I+1>=LC)return CA}return I<0?UC(-I,g).neg():xC(I%OC|0,I/OC|0,g)}function xC(I,g,C){return new vC(I,g,C)}vC.fromInt=MC,vC.fromNumber=UC,vC.fromBits=xC;var TC=Math.pow;function QC(I,g,C){if(0===I.length)throw Error("empty string");if("NaN"===I||"Infinity"===I||"+Infinity"===I||"-Infinity"===I)return _C;if("number"===typeof g?(C=g,g=!1):g=!!g,(C=C||10)<2||36<C)throw RangeError("radix");var A;if((A=I.indexOf("-"))>0)throw Error("interior hyphen");if(0===A)return QC(I.substring(1),g,C).neg();for(var i=UC(TC(C,8)),e=_C,l=0;l<I.length;l+=8){var o=Math.min(8,I.length-l),t=parseInt(I.substring(l,l+o),C);if(o<8){var c=UC(TC(C,o));e=e.mul(c).add(UC(t))}else e=(e=e.mul(i)).add(UC(t))}return e.unsigned=g,e}function PC(I,g){return"number"===typeof I?UC(I,g):"string"===typeof I?QC(I,g):xC(I.low,I.high,"boolean"===typeof g?g:I.unsigned)}vC.fromString=QC,vC.fromValue=PC;var OC=4294967296,jC=OC*OC,LC=jC/2,EC=MC(1<<24),_C=MC(0);vC.ZERO=_C;var $C=MC(0,!0);vC.UZERO=$C;var qC=MC(1);vC.ONE=qC;var IA=MC(1,!0);vC.UONE=IA;var gA=MC(-1);vC.NEG_ONE=gA;var CA=xC(-1,2147483647,!1);vC.MAX_VALUE=CA;var AA=xC(-1,-1,!0);vC.MAX_UNSIGNED_VALUE=AA;var iA=xC(0,-2147483648,!1);vC.MIN_VALUE=iA;var eA=vC.prototype;function lA(I){return(lA="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"===typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I})(I)}eA.toInt=function(){return this.unsigned?this.low>>>0:this.low},eA.toNumber=function(){return this.unsigned?(this.high>>>0)*OC+(this.low>>>0):this.high*OC+(this.low>>>0)},eA.toString=function(I){if((I=I||10)<2||36<I)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(iA)){var g=UC(I),C=this.div(g),A=C.mul(g).sub(this);return C.toString(I)+A.toInt().toString(I)}return"-"+this.neg().toString(I)}for(var i=UC(TC(I,6),this.unsigned),e=this,l="";;){var o=e.div(i),t=(e.sub(o.mul(i)).toInt()>>>0).toString(I);if((e=o).isZero())return t+l;for(;t.length<6;)t="0"+t;l=""+t+l}},eA.getHighBits=function(){return this.high},eA.getHighBitsUnsigned=function(){return this.high>>>0},eA.getLowBits=function(){return this.low},eA.getLowBitsUnsigned=function(){return this.low>>>0},eA.getNumBitsAbs=function(){if(this.isNegative())return this.eq(iA)?64:this.neg().getNumBitsAbs();for(var I=0!=this.high?this.high:this.low,g=31;g>0&&0==(I&1<<g);g--);return 0!=this.high?g+33:g+1},eA.isZero=function(){return 0===this.high&&0===this.low},eA.eqz=eA.isZero,eA.isNegative=function(){return!this.unsigned&&this.high<0},eA.isPositive=function(){return this.unsigned||this.high>=0},eA.isOdd=function(){return 1===(1&this.low)},eA.isEven=function(){return 0===(1&this.low)},eA.equals=function(I){return kC(I)||(I=PC(I)),(this.unsigned===I.unsigned||this.high>>>31!==1||I.high>>>31!==1)&&(this.high===I.high&&this.low===I.low)},eA.eq=eA.equals,eA.notEquals=function(I){return!this.eq(I)},eA.neq=eA.notEquals,eA.ne=eA.notEquals,eA.lessThan=function(I){return this.comp(I)<0},eA.lt=eA.lessThan,eA.lessThanOrEqual=function(I){return this.comp(I)<=0},eA.lte=eA.lessThanOrEqual,eA.le=eA.lessThanOrEqual,eA.greaterThan=function(I){return this.comp(I)>0},eA.gt=eA.greaterThan,eA.greaterThanOrEqual=function(I){return this.comp(I)>=0},eA.gte=eA.greaterThanOrEqual,eA.ge=eA.greaterThanOrEqual,eA.compare=function(I){if(kC(I)||(I=PC(I)),this.eq(I))return 0;var g=this.isNegative(),C=I.isNegative();return g&&!C?-1:!g&&C?1:this.unsigned?I.high>>>0>this.high>>>0||I.high===this.high&&I.low>>>0>this.low>>>0?-1:1:this.sub(I).isNegative()?-1:1},eA.comp=eA.compare,eA.negate=function(){return!this.unsigned&&this.eq(iA)?iA:this.not().add(qC)},eA.neg=eA.negate,eA.add=function(I){kC(I)||(I=PC(I));var g=this.high>>>16,C=65535&this.high,A=this.low>>>16,i=65535&this.low,e=I.high>>>16,l=65535&I.high,o=I.low>>>16,t=0,c=0,n=0,d=0;return n+=(d+=i+(65535&I.low))>>>16,c+=(n+=A+o)>>>16,t+=(c+=C+l)>>>16,t+=g+e,xC((n&=65535)<<16|(d&=65535),(t&=65535)<<16|(c&=65535),this.unsigned)},eA.subtract=function(I){return kC(I)||(I=PC(I)),this.add(I.neg())},eA.sub=eA.subtract,eA.multiply=function(I){if(this.isZero())return _C;if(kC(I)||(I=PC(I)),NC)return xC(NC.mul(this.low,this.high,I.low,I.high),NC.get_high(),this.unsigned);if(I.isZero())return _C;if(this.eq(iA))return I.isOdd()?iA:_C;if(I.eq(iA))return this.isOdd()?iA:_C;if(this.isNegative())return I.isNegative()?this.neg().mul(I.neg()):this.neg().mul(I).neg();if(I.isNegative())return this.mul(I.neg()).neg();if(this.lt(EC)&&I.lt(EC))return UC(this.toNumber()*I.toNumber(),this.unsigned);var g=this.high>>>16,C=65535&this.high,A=this.low>>>16,i=65535&this.low,e=I.high>>>16,l=65535&I.high,o=I.low>>>16,t=65535&I.low,c=0,n=0,d=0,s=0;return d+=(s+=i*t)>>>16,n+=(d+=A*t)>>>16,d&=65535,n+=(d+=i*o)>>>16,c+=(n+=C*t)>>>16,n&=65535,c+=(n+=A*o)>>>16,n&=65535,c+=(n+=i*l)>>>16,c+=g*t+C*o+A*l+i*e,xC((d&=65535)<<16|(s&=65535),(c&=65535)<<16|(n&=65535),this.unsigned)},eA.mul=eA.multiply,eA.divide=function(I){if(kC(I)||(I=PC(I)),I.isZero())throw Error("division by zero");var g,C,A;if(NC)return this.unsigned||-2147483648!==this.high||-1!==I.low||-1!==I.high?xC((this.unsigned?NC.div_u:NC.div_s)(this.low,this.high,I.low,I.high),NC.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?$C:_C;if(this.unsigned){if(I.unsigned||(I=I.toUnsigned()),I.gt(this))return $C;if(I.gt(this.shru(1)))return IA;A=$C}else{if(this.eq(iA))return I.eq(qC)||I.eq(gA)?iA:I.eq(iA)?qC:(g=this.shr(1).div(I).shl(1)).eq(_C)?I.isNegative()?qC:gA:(C=this.sub(I.mul(g)),A=g.add(C.div(I)));if(I.eq(iA))return this.unsigned?$C:_C;if(this.isNegative())return I.isNegative()?this.neg().div(I.neg()):this.neg().div(I).neg();if(I.isNegative())return this.div(I.neg()).neg();A=_C}for(C=this;C.gte(I);){g=Math.max(1,Math.floor(C.toNumber()/I.toNumber()));for(var i=Math.ceil(Math.log(g)/Math.LN2),e=i<=48?1:TC(2,i-48),l=UC(g),o=l.mul(I);o.isNegative()||o.gt(C);)o=(l=UC(g-=e,this.unsigned)).mul(I);l.isZero()&&(l=qC),A=A.add(l),C=C.sub(o)}return A},eA.div=eA.divide,eA.modulo=function(I){return kC(I)||(I=PC(I)),NC?xC((this.unsigned?NC.rem_u:NC.rem_s)(this.low,this.high,I.low,I.high),NC.get_high(),this.unsigned):this.sub(this.div(I).mul(I))},eA.mod=eA.modulo,eA.rem=eA.modulo,eA.not=function(){return xC(~this.low,~this.high,this.unsigned)},eA.and=function(I){return kC(I)||(I=PC(I)),xC(this.low&I.low,this.high&I.high,this.unsigned)},eA.or=function(I){return kC(I)||(I=PC(I)),xC(this.low|I.low,this.high|I.high,this.unsigned)},eA.xor=function(I){return kC(I)||(I=PC(I)),xC(this.low^I.low,this.high^I.high,this.unsigned)},eA.shiftLeft=function(I){return kC(I)&&(I=I.toInt()),0===(I&=63)?this:I<32?xC(this.low<<I,this.high<<I|this.low>>>32-I,this.unsigned):xC(0,this.low<<I-32,this.unsigned)},eA.shl=eA.shiftLeft,eA.shiftRight=function(I){return kC(I)&&(I=I.toInt()),0===(I&=63)?this:I<32?xC(this.low>>>I|this.high<<32-I,this.high>>I,this.unsigned):xC(this.high>>I-32,this.high>=0?0:-1,this.unsigned)},eA.shr=eA.shiftRight,eA.shiftRightUnsigned=function(I){if(kC(I)&&(I=I.toInt()),0===(I&=63))return this;var g=this.high;return I<32?xC(this.low>>>I|g<<32-I,g>>>I,this.unsigned):xC(32===I?g:g>>>I-32,0,this.unsigned)},eA.shru=eA.shiftRightUnsigned,eA.shr_u=eA.shiftRightUnsigned,eA.toSigned=function(){return this.unsigned?xC(this.low,this.high,!1):this},eA.toUnsigned=function(){return this.unsigned?this:xC(this.low,this.high,!0)},eA.toBytes=function(I){return I?this.toBytesLE():this.toBytesBE()},eA.toBytesLE=function(){var I=this.high,g=this.low;return[255&g,g>>>8&255,g>>>16&255,g>>>24,255&I,I>>>8&255,I>>>16&255,I>>>24]},eA.toBytesBE=function(){var I=this.high,g=this.low;return[I>>>24,I>>>16&255,I>>>8&255,255&I,g>>>24,g>>>16&255,g>>>8&255,255&g]},vC.fromBytes=function(I,g,C){return C?vC.fromBytesLE(I,g):vC.fromBytesBE(I,g)},vC.fromBytesLE=function(I,g){return new vC(I[0]|I[1]<<8|I[2]<<16|I[3]<<24,I[4]|I[5]<<8|I[6]<<16|I[7]<<24,g)},vC.fromBytesBE=function(I,g){return new vC(I[4]<<24|I[5]<<16|I[6]<<8|I[7],I[0]<<24|I[1]<<16|I[2]<<8|I[3],g)};var oA=_.a.Buffer,tA=KC,cA=wC.Context,nA=FC;"undefined"!==typeof window&&(window.Buffer=oA),"undefined"!==typeof self&&(self.Buffer=oA);var dA={UInt8:1,UInt16LE:2,UInt16BE:2,UInt32LE:4,UInt32BE:4,Int8:1,Int16LE:2,Int16BE:2,Int32LE:4,Int32BE:4,FloatLE:4,FloatBE:4,DoubleLE:8,DoubleBE:8,UInt64:8,Int64:8},sA={},aA="___parser_",ZA=[];!function(){var I;for(I=1;I<=32;I++)ZA.push(I)}();var mA={};Object.keys(dA).concat(Object.keys({String:null,Buffer:null,Array:null,Skip:null,Choice:null,Nest:null,Bit:null,Itf8:null,Ltf8:null})).forEach((function(I){mA[I.toLowerCase()]=I}));var bA=function(){this.varName="",this.type="",this.options={},this.next=null,this.head=null,this.compiled=null,this.endian="le",this.constructorFn=null,this.alias=null};bA.start=function(){return new bA},Object.keys(dA).forEach((function(I){bA.prototype[I.toLowerCase()]=function(g,C){return this.setNextParser(I.toLowerCase(),g,C)};var g=I.replace(/BE|LE/,"").toLowerCase();g in bA.prototype||(bA.prototype[g]=function(I,C){return this[g+this.endian](I,C)})})),ZA.forEach((function(I){bA.prototype["bit".concat(I.toString())]=function(g,C){return C||(C={}),C.length=I,this.setNextParser("bit",g,C)}})),bA.prototype.namely=function(I){return sA[I]=this,this.alias=I,this},bA.prototype.skip=function(I,g){if(g&&g.assert)throw new Error("assert option on skip is not allowed.");return this.setNextParser("skip","",{length:I})},bA.prototype.string=function(I,g){if(!g.zeroTerminated&&!g.length&&!g.greedy)throw new Error("Neither length, zeroTerminated, nor greedy is defined for string.");if((g.zeroTerminated||g.length)&&g.greedy)throw new Error("greedy is mutually exclusive with length and zeroTerminated for string.");if(g.stripNull&&!g.length&&!g.greedy)throw new Error("Length or greedy must be defined if stripNull is defined.");return g.encoding=g.encoding||"utf8",this.setNextParser("string",I,g)},bA.prototype.buffer=function(I,g){if(!g.length&&!g.readUntil)throw new Error("Length nor readUntil is defined in buffer parser");return this.setNextParser("buffer",I,g)},bA.prototype.array=function(I,g){if(!g.readUntil&&!g.length&&!g.lengthInBytes)throw new Error("Length option of array is not defined.");if(!g.type)throw new Error("Type option of array is not defined.");if("string"===typeof g.type&&!sA[g.type]&&Object.keys(dA).indexOf(mA[g.type])<0)throw new Error('Specified primitive type "'.concat(g.type,'" is not supported.'));return this.setNextParser("array",I,g)},bA.prototype.choice=function(I,g){if(1===arguments.length&&"object"===lA(I)&&(g=I,I=null),!g.tag)throw new Error("Tag option of array is not defined.");if(!g.choices)throw new Error("Choices option of array is not defined.");return Object.keys(g.choices).forEach((function(C){if(!g.choices[C])throw new Error("Choice Case ".concat(C," of ").concat(I," is not valid."));if("string"===typeof g.choices[C]&&!sA[g.choices[C]]&&Object.keys(dA).indexOf(mA[g.choices[C]])<0)throw new Error('Specified primitive type "'.concat(g.choices[C],'" is not supported.'))}),this),this.setNextParser("choice",I,g)},bA.prototype.nest=function(I,g){if(1===arguments.length&&"object"===lA(I)&&(g=I,I=null),!g.type)throw new Error("Type option of nest is not defined.");if(!(g.type instanceof bA)&&!sA[g.type])throw new Error("Type option of nest must be a Parser object.");if(!(g.type instanceof bA)&&!I)throw new Error("options.type must be a object if variable name is omitted.");return this.setNextParser("nest",I,g)},bA.prototype.endianess=function(I){switch(I.toLowerCase()){case"little":this.endian="le";break;case"big":this.endian="be";break;default:throw new Error("Invalid endianess: ".concat(I))}return this},bA.prototype.create=function(I){if(!(I instanceof Function))throw new Error("Constructor must be a Function object.");return this.constructorFn=I,this},bA.prototype.getCode=function(){var I=new cA;return I.pushCode("if (!Buffer.isBuffer(buffer)) {"),I.generateError('"argument buffer is not a Buffer object"'),I.pushCode("}"),this.alias?this.addAliasedCode(I):this.addRawCode(I),this.alias?I.pushCode("return {0}(0)",aA+this.alias):I.pushCode("return { offset: offset, result: vars };"),I.code},bA.prototype.addRawCode=function(I){I.pushCode("var offset = 0;"),this.constructorFn?I.pushCode("var vars = new constructorFn();"):I.pushCode("var vars = {};"),this.generate(I),this.resolveReferences(I),I.pushCode("return { offset: offset, result: vars };")},bA.prototype.addAliasedCode=function(I){return I.pushCode("function {0}(offset) {",aA+this.alias),this.constructorFn?I.pushCode("var vars = new constructorFn();"):I.pushCode("var vars = {};"),this.generate(I),I.markResolved(this.alias),this.resolveReferences(I),I.pushCode("return { offset: offset, result: vars };"),I.pushCode("}"),I},bA.prototype.resolveReferences=function(I){var g=I.getUnresolvedReferences();I.markRequested(g),g.forEach((function(g){sA[g].addAliasedCode(I)}))},bA.prototype.compile=function(){var I="(function(buffer, constructorFn, Long) { ".concat(this.getCode()," })");this.compiled=tA.runInThisContext(I)},bA.prototype.sizeOf=function(){var I=NaN;if(Object.keys(dA).indexOf(this.type)>=0)I=dA[this.type];else if("String"===this.type&&"number"===typeof this.options.length)I=this.options.length;else if("Buffer"===this.type&&"number"===typeof this.options.length)I=this.options.length;else if("Array"===this.type&&"number"===typeof this.options.length){var g=NaN;"string"===typeof this.options.type?g=dA[mA[this.options.type]]:this.options.type instanceof bA&&(g=this.options.type.sizeOf()),I=this.options.length*g}else"Skip"===this.type?I=this.options.length:"Nest"===this.type?I=this.options.type.sizeOf():this.type||(I=0);return this.next&&(I+=this.next.sizeOf()),I},bA.prototype.parse=function(I){return this.compiled||this.compile(),this.compiled(I,this.constructorFn,nA)},bA.prototype.setNextParser=function(I,g,C){var A=new bA;return A.type=mA[I],A.varName=g,A.options=C||A.options,A.endian=this.endian,this.head?this.head.next=A:this.next=A,this.head=A,this},bA.prototype.generate=function(I){this.type&&(this["generate".concat(this.type)](I),this.generateAssert(I));var g=I.generateVariable(this.varName);return this.options.formatter&&this.generateFormatter(I,g,this.options.formatter),this.generateNext(I)},bA.prototype.generateAssert=function(I){if(this.options.assert){var g=I.generateVariable(this.varName);switch(lA(this.options.assert)){case"function":I.pushCode("if (!({0}).call(vars, {1})) {",this.options.assert,g);break;case"number":I.pushCode("if ({0} !== {1}) {",this.options.assert,g);break;case"string":I.pushCode('if ("{0}" !== {1}) {',this.options.assert,g);break;default:throw new Error("Assert option supports only strings, numbers and assert functions.")}I.generateError('"Assert error: {0} is " + {0}',g),I.pushCode("}")}},bA.prototype.generateNext=function(I){return this.next&&(I=this.next.generate(I)),I},Object.keys(dA).forEach((function(I){bA.prototype["generate".concat(I)]=function(g){"UInt64"===I?g.pushCode("{0} = Long.fromBytes(buffer.slice(offset,offset+8), true, this.endian === 'le').toNumber();",g.generateVariable(this.varName),I):"Int64"===I?g.pushCode("{0} = Long.fromBytes(buffer.slice(offset,offset+8), false, this.endian === 'le').toNumber();",g.generateVariable(this.varName),I):g.pushCode("{0} = buffer.read{1}(offset);",g.generateVariable(this.varName),I),g.pushCode("offset += {0};",dA[I])}})),bA.prototype.generateBit=function(I){var g=JSON.parse(JSON.stringify(this));if(g.varName=I.generateVariable(g.varName),I.bitFields.push(g),!this.next||this.next&&["Bit","Nest"].indexOf(this.next.type)<0){var C=0;I.bitFields.forEach((function(I){C+=I.options.length}));var A=I.generateTmpVariable();if(C<=8)I.pushCode("var {0} = buffer.readUInt8(offset);",A),C=8;else if(C<=16)I.pushCode("var {0} = buffer.readUInt16BE(offset);",A),C=16;else if(C<=24){var i=I.generateTmpVariable(),e=I.generateTmpVariable();I.pushCode("var {0} = buffer.readUInt16BE(offset);",i),I.pushCode("var {0} = buffer.readUInt8(offset + 2);",e),I.pushCode("var {2} = ({0} << 8) | {1};",i,e,A),C=24}else{if(!(C<=32))throw new Error("Currently, bit field sequence longer than 4-bytes is not supported.");I.pushCode("var {0} = buffer.readUInt32BE(offset);",A),C=32}I.pushCode("offset += {0};",C/8);var l=0,o="be"===this.endian;I.bitFields.forEach((function(g){I.pushCode("{0} = {1} >> {2} & {3};",g.varName,A,o?C-l-g.options.length:l,(1<<g.options.length)-1),l+=g.options.length})),I.bitFields=[]}},bA.prototype.generateSkip=function(I){var g=I.generateOption(this.options.length);I.pushCode("offset += {0};",g)},bA.prototype.generateString=function(I){var g=I.generateVariable(this.varName),C=I.generateTmpVariable();this.options.length&&this.options.zeroTerminated?(I.pushCode("var {0} = offset;",C),I.pushCode("while(buffer.readUInt8(offset++) !== 0 && offset - {0}  < {1});",C,this.options.length),I.pushCode("{0} = buffer.toString('{1}', {2}, offset - {2} < {3} ? offset - 1 : offset);",g,this.options.encoding,C,this.options.length)):this.options.length?(I.pushCode("{0} = buffer.toString('{1}', offset, offset + {2});",g,this.options.encoding,I.generateOption(this.options.length)),I.pushCode("offset += {0};",I.generateOption(this.options.length))):this.options.zeroTerminated?(I.pushCode("var {0} = offset;",C),I.pushCode("while(buffer.readUInt8(offset++) !== 0);"),I.pushCode("{0} = buffer.toString('{1}', {2}, offset - 1);",g,this.options.encoding,C)):this.options.greedy&&(I.pushCode("var {0} = offset;",C),I.pushCode("while(buffer.length > offset++);"),I.pushCode("{0} = buffer.toString('{1}', {2}, offset);",g,this.options.encoding,C)),this.options.stripNull&&I.pushCode("{0} = {0}.replace(/\\x00+$/g, '')",g)},bA.prototype.generateBuffer=function(I){"eof"===this.options.readUntil?I.pushCode("{0} = buffer.slice(offset);",I.generateVariable(this.varName)):(I.pushCode("{0} = buffer.slice(offset, offset + {1});",I.generateVariable(this.varName),I.generateOption(this.options.length)),I.pushCode("offset += {0};",I.generateOption(this.options.length))),this.options.clone&&I.pushCode("{0} = Buffer.from({0});",I.generateVariable(this.varName))},bA.prototype.generateArray=function(I){var g=I.generateOption(this.options.length),C=I.generateOption(this.options.lengthInBytes),A=this.options.type,i=I.generateTmpVariable(),e=I.generateVariable(this.varName),l=I.generateTmpVariable(),o=this.options.key,t="string"===typeof o;if(t?I.pushCode("{0} = {};",e):I.pushCode("{0} = [];",e),"function"===typeof this.options.readUntil?I.pushCode("do {"):"eof"===this.options.readUntil?I.pushCode("for (var {0} = 0; offset < buffer.length; {0}++) {",i):void 0!==C?I.pushCode("for (var {0} = offset; offset - {0} < {1}; ) {",i,C):I.pushCode("for (var {0} = 0; {0} < {1}; {0}++) {",i,g),"string"===typeof A)if(sA[A]){var c=I.generateTmpVariable();I.pushCode("var {0} = {1}(offset);",c,aA+A),I.pushCode("var {0} = {1}.result; offset = {1}.offset;",l,c),A!==this.alias&&I.addReference(A)}else I.pushCode("var {0} = buffer.read{1}(offset);",l,mA[A]),I.pushCode("offset += {0};",dA[mA[A]]);else A instanceof bA&&(I.pushCode("var {0} = {};",l),I.pushScope(l),A.generate(I),I.popScope());t?I.pushCode("{0}[{2}.{1}] = {2};",e,o,l):I.pushCode("{0}.push({1});",e,l),I.pushCode("}"),"function"===typeof this.options.readUntil&&I.pushCode(" while (!({0}).call(this, {1}, buffer.slice(offset)));",this.options.readUntil,l)},bA.prototype.generateChoiceCase=function(I,g,C){if("string"===typeof C)if(sA[C]){var A=I.generateTmpVariable();I.pushCode("var {0} = {1}(offset);",A,aA+C),I.pushCode("{0} = {1}.result; offset = {1}.offset;",I.generateVariable(this.varName),A),C!==this.alias&&I.addReference(C)}else I.pushCode("{0} = buffer.read{1}(offset);",I.generateVariable(this.varName),mA[C]),I.pushCode("offset += {0};",dA[mA[C]]);else C instanceof bA&&(I.pushPath(g),C.generate(I),I.popPath(g))},bA.prototype.generateChoice=function(I){var g=I.generateOption(this.options.tag);this.varName&&I.pushCode("{0} = {};",I.generateVariable(this.varName)),I.pushCode("switch({0}) {",g),Object.keys(this.options.choices).forEach((function(g){var C=this.options.choices[g];Number.isNaN(parseInt(g,10))?I.pushCode("case '{0}':",g):I.pushCode("case {0}:",g),this.generateChoiceCase(I,this.varName,C),I.pushCode("break;")}),this),I.pushCode("default:"),this.options.defaultChoice?this.generateChoiceCase(I,this.varName,this.options.defaultChoice):I.generateError('"Met undefined tag value " + {0} + " at choice"',g),I.pushCode("}")},bA.prototype.generateNest=function(I){var g=I.generateVariable(this.varName);if(this.options.type instanceof bA)this.varName&&I.pushCode("{0} = {};",g),I.pushPath(this.varName),this.options.type.generate(I),I.popPath(this.varName);else if(sA[this.options.type]){var C=I.generateTmpVariable();I.pushCode("var {0} = {1}(offset);",C,aA+this.options.type),I.pushCode("{0} = {1}.result; offset = {1}.offset;",g,C),this.options.type!==this.alias&&I.addReference(this.options.type)}},bA.prototype.generateFormatter=function(I,g,C){"function"===typeof C&&I.pushCode("{0} = ({1}).call(this, {0});",g,C)},bA.prototype.isInteger=function(){return!!this.type.match(/U?Int[8|16|32][BE|LE]?|Bit\d+/)},bA.prototype.itf8=function(I,g){return this.setNextParser("itf8",I,g)},bA.prototype.itf8=function(I,g){return this.setNextParser("itf8",I,g)},bA.prototype.generateItf8=function(I){var g=I.generateVariable(this.varName),C=I.generateTmpVariable();I.pushCode("\n    var ".concat(C," = buffer[offset];\n    if (").concat(C," < 0x80) {\n      ").concat(g," = ").concat(C,";\n      offset += 1;\n    } else if (").concat(C," < 0xc0) {\n      ").concat(g," = ((").concat(C,"<<8) | buffer[offset+1]) & 0x3fff;\n      offset += 2;\n    } else if (").concat(C," < 0xe0) {\n      ").concat(g," = ((").concat(C,"<<16) | (buffer[offset+1]<< 8) |  buffer[offset+2]) & 0x1fffff;\n      offset += 3;\n    } else if (").concat(C," < 0xf0) {\n      ").concat(g," = ((").concat(C,"<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n      offset += 4\n    } else {\n      ").concat(g," = ((").concat(C," & 0x0f)<<28) | (buffer[offset+1]<<20) | (buffer[offset+2]<<12) | (buffer[offset+3]<<4) | (buffer[offset+4] & 0x0f);\n      // x=((0xff & 0x0f)<<28) | (0xff<<20) | (0xff<<12) | (0xff<<4) | (0x0f & 0x0f);\n      // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n      offset += 5\n    }\n  "))},bA.prototype.ltf8=function(I,g){return this.setNextParser("ltf8",I,g)},bA.prototype.generateLtf8=function(I){var g=I.generateVariable(this.varName),C=I.generateTmpVariable();I.pushCode("\n  var ".concat(C," = buffer[offset];\n  if (").concat(C," < 0x80) {\n    ").concat(g," = ").concat(C,";\n    offset += 1;\n  } else if (").concat(C," < 0xc0) {\n    ").concat(g," = ((buffer[offset]<<8) | buffer[offset+1]) & 0x3fff;\n    offset += 2;\n  } else if (").concat(C," < 0xe0) {\n    ").concat(g," = ((buffer[offset]<<16) | (buffer[offset+1]<<8) | buffer[offset+2]) & 0x1fffff;\n    ").concat(g," = (((").concat(C," & 63) << 16) | buffer.readUInt16LE(offset + 1));\n    offset += 3;\n  } else if (").concat(C," < 0xf0) {\n    ").concat(g," = ((buffer[offset]<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n    offset += 4;\n  } else if (").concat(C," < 0xf8) {\n    ").concat(g," = (((buffer[offset] & 15) * Math.pow(2,32))) +\n      (buffer[offset+1]<<24) | (buffer[offset+2]<<16 | buffer[offset+3]<<8 | buffer[offset+4])\n    // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n    offset += 5;\n  } else if (").concat(C," < 0xfc) {\n    ").concat(g," = ((((buffer[offset] & 7) << 8) | buffer[offset+1] )) * Math.pow(2,32) +\n      (buffer[offset+2]<<24) | (buffer[offset+3]<<16 | buffer[offset+4]<<8 | buffer[offset+5])\n    offset += 6;\n  } else if (").concat(C," < 0xfe) {\n    ").concat(g," = ((((buffer[offset] & 3) << 16) | buffer[offset+1]<<8 | buffer[offset+2])) * Math.pow(2,32) +\n      (buffer[offset+3]<<24) | (buffer[offset+4]<<16 | buffer[offset+5]<<8 | buffer[offset+6])\n    offset += 7;\n  } else if (").concat(C," < 0xff) {\n    ").concat(g," = Long.fromBytesBE(buffer.slice(offset+1,offset+8));\n    if (").concat(g,".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(g,".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(g," = ").concat(g,".toNumber()\n    offset += 8;\n  } else {\n    ").concat(g," = Long.fromBytesBE(buffer.slice(offset+1,offset+9));\n    if (").concat(g,".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(g,".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(g," = ").concat(g,".toNumber()\n    offset += 9;\n  }\n  "))},fC.Parser=bA;var rA={},hA={},GA={},uA={};function yA(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")}function BA(I,g){for(var C=0;C<g.length;C++){var A=g[C];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(I,A.key,A)}}function VA(I,g,C){return g&&BA(I.prototype,g),C&&BA(I,C),I}function pA(I){return(pA=Object.setPrototypeOf?Object.getPrototypeOf:function(I){return I.__proto__||Object.getPrototypeOf(I)})(I)}function XA(I,g){return(XA=Object.setPrototypeOf||function(I,g){return I.__proto__=g,I})(I,g)}function WA(I){if(void 0===I)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return I}function HA(I,g){return!g||"object"!==typeof g&&"function"!==typeof g?WA(I):g}function YA(I){var g=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(im){return!1}}();return function(){var C,A=pA(I);if(g){var i=pA(this).constructor;C=Reflect.construct(A,arguments,i)}else C=A.apply(this,arguments);return HA(this,C)}}function RA(I,g,C){return RA="undefined"!==typeof Reflect&&Reflect.get?Reflect.get:function(I,g,C){var A=function(I,g){for(;!Object.prototype.hasOwnProperty.call(I,g)&&null!==(I=pA(I)););return I}(I,g);if(A){var i=Object.getOwnPropertyDescriptor(A,g);return i.get?i.get.call(C):i.value}},RA(I,g,C||I)}Object.defineProperty(uA,"__esModule",{value:!0});var fA=function(){function I(){yA(this,I),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0})}return VA(I,[{key:"addEventListener",value:function(I,g,C){I in this.listeners||(this.listeners[I]=[]),this.listeners[I].push({callback:g,options:C})}},{key:"removeEventListener",value:function(I,g){if(I in this.listeners)for(var C=this.listeners[I],A=0,i=C.length;A<i;A++)if(C[A].callback===g)return void C.splice(A,1)}},{key:"dispatchEvent",value:function(I){if(I.type in this.listeners){for(var g=this.listeners[I.type].slice(),C=0,A=g.length;C<A;C++){var i=g[C];try{i.callback.call(this,I)}catch(im){Promise.resolve().then((function(){throw im}))}i.options&&i.options.once&&this.removeEventListener(I.type,i.callback)}return!I.defaultPrevented}}}]),I}(),KA=function(I){!function(I,g){if("function"!==typeof g&&null!==g)throw new TypeError("Super expression must either be null or a function");I.prototype=Object.create(g&&g.prototype,{constructor:{value:I,writable:!0,configurable:!0}}),g&&XA(I,g)}(C,I);var g=YA(C);function C(){var I;return yA(this,C),(I=g.call(this)).listeners||fA.call(WA(I)),Object.defineProperty(WA(I),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(WA(I),"onabort",{value:null,writable:!0,configurable:!0}),I}return VA(C,[{key:"toString",value:function(){return"[object AbortSignal]"}},{key:"dispatchEvent",value:function(I){"abort"===I.type&&(this.aborted=!0,"function"===typeof this.onabort&&this.onabort.call(this,I)),RA(pA(C.prototype),"dispatchEvent",this).call(this,I)}}]),C}(fA),wA=function(){function I(){yA(this,I),Object.defineProperty(this,"signal",{value:new KA,writable:!0,configurable:!0})}return VA(I,[{key:"abort",value:function(){var I;try{I=new Event("abort")}catch(im){"undefined"!==typeof document?document.createEvent?(I=document.createEvent("Event")).initEvent("abort",!1,!1):(I=document.createEventObject()).type="abort":I={type:"abort",bubbles:!1,cancelable:!1}}this.signal.dispatchEvent(I)}},{key:"toString",value:function(){return"[object AbortController]"}}]),I}();"undefined"!==typeof Symbol&&Symbol.toStringTag&&(wA.prototype[Symbol.toStringTag]="AbortController",KA.prototype[Symbol.toStringTag]="AbortSignal"),uA.AbortController=wA,uA.AbortSignal=KA,uA.abortableFetch=function(I){"function"===typeof I&&(I={fetch:I});var g,C=I,A=C.fetch,i=C.Request,e=void 0===i?A.Request:i,l=C.AbortController,o=C.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,t=void 0!==o&&o;if(!((g={fetch:A,Request:e,AbortController:l,__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL:t}).__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),1):"function"===typeof g.Request&&!g.Request.prototype.hasOwnProperty("signal")||!g.AbortController))return{fetch:A,Request:c};var c=e;(c&&!c.prototype.hasOwnProperty("signal")||t)&&((c=function(I,g){var C;g&&g.signal&&(C=g.signal,delete g.signal);var A=new e(I,g);return C&&Object.defineProperty(A,"signal",{writable:!1,enumerable:!1,configurable:!0,value:C}),A}).prototype=e.prototype);var n=A;return{fetch:function(I,g){var C=c&&c.prototype.isPrototypeOf(I)?I.signal:g?g.signal:void 0;if(C){var A;try{A=new DOMException("Aborted","AbortError")}catch(e){(A=new Error("Aborted")).name="AbortError"}if(C.aborted)return Promise.reject(A);var i=new Promise((function(I,g){C.addEventListener("abort",(function(){return g(A)}),{once:!0})}));return g&&g.signal&&delete g.signal,Promise.race([i,n(I,g)])}return n(I,g)},Request:c}},Object.defineProperty(GA,"__esModule",{value:!0}),GA.AbortSignal=GA.AbortController=void 0;var JA=uA,SA=function(){if("undefined"!==typeof self)return self;if("undefined"!==typeof window)return window;if("undefined"!==typeof sC)return sC;throw new Error("unable to locate global object")},FA="undefined"===typeof SA().AbortController?JA.AbortController:SA().AbortController;GA.AbortController=FA;var NA="undefined"===typeof SA().AbortController?JA.AbortSignal:SA().AbortSignal;GA.AbortSignal=NA;var vA={},kA=bC.exports;Object.defineProperty(vA,"__esModule",{value:!0}),vA.default=void 0;var DA=kA(yC.exports),zA=kA(RC.exports),MA=kA(uC.exports),UA=GA,xA=function I(){(0,MA.default)(this,I)},TA=function(){function I(){(0,MA.default)(this,I),(0,zA.default)(this,"signals",new Set),(0,zA.default)(this,"abortController",new UA.AbortController)}return(0,DA.default)(I,[{key:"addSignal",value:function(){var I=this,g=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new xA;if(this.signal.aborted)throw new Error("cannot add a signal, already aborted!");this.signals.add(g),g.aborted?this.handleAborted(g):"function"===typeof g.addEventListener&&g.addEventListener("abort",(function(){I.handleAborted(g)}))}},{key:"handleAborted",value:function(I){this.signals.delete(I),0===this.signals.size&&this.abortController.abort()}},{key:"abort",value:function(){this.abortController.abort()}},{key:"signal",get:function(){return this.abortController.signal}}]),I}();vA.default=TA;var QA={},PA=bC.exports;Object.defineProperty(QA,"__esModule",{value:!0}),QA.default=void 0;var OA=PA(uC.exports),jA=PA(yC.exports),LA=PA(RC.exports),EA=function(){function I(){(0,OA.default)(this,I),(0,LA.default)(this,"callbacks",new Set),(0,LA.default)(this,"currentMessage",void 0)}return(0,jA.default)(I,[{key:"addCallback",value:function(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.callbacks.add(I),I(this.currentMessage)}},{key:"callback",value:function(I){this.currentMessage=I,this.callbacks.forEach((function(g){g(I)}))}}]),I}();QA.default=EA;var _A=bC.exports;Object.defineProperty(hA,"__esModule",{value:!0}),hA.default=void 0;var $A=_A(XC.exports),qA=_A(uC.exports),Ii=_A(yC.exports),gi=_A(RC.exports),Ci=GA,Ai=_A(vA),ii=_A(QA),ei=function(){function I(g){var C=g.fill,A=g.cache;if((0,qA.default)(this,I),(0,gi.default)(this,"cache",void 0),(0,gi.default)(this,"fillCallback",void 0),"function"!==typeof C)throw new TypeError("must pass a fill function");if("object"!==(0,$A.default)(A))throw new TypeError("must pass a cache object");if("function"!==typeof A.get||"function"!==typeof A.set||"function"!==typeof A.delete)throw new TypeError("cache must implement get(key), set(key, val), and and delete(key)");this.cache=A,this.fillCallback=C}return(0,Ii.default)(I,[{key:"evict",value:function(I,g){this.cache.get(I)===g&&this.cache.delete(I)}},{key:"fill",value:function(I,g,C,A){var i=this,e=new Ai.default,l=new ii.default;l.addCallback(A);var o={aborter:e,promise:this.fillCallback(g,e.signal,(function(I){l.callback(I)})),settled:!1,statusReporter:l,get aborted(){return this.aborter.signal.aborted}};o.aborter.addSignal(C),o.aborter.signal.addEventListener("abort",(function(){o.settled||i.evict(I,o)})),o.promise.then((function(){o.settled=!0}),(function(g){o.settled=!0,i.evict(I,o)})).catch((function(I){throw console.error(I),I})),this.cache.set(I,o)}},{key:"has",value:function(I){return this.cache.has(I)}},{key:"get",value:function(g,C,A,i){if(!A&&C instanceof Ci.AbortSignal)throw new TypeError("second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?");var e=this.cache.get(g);return e?e.aborted&&!e.settled?(this.evict(g,e),this.get(g,C,A,i)):e.settled?e.promise:(e.aborter.addSignal(A),e.statusReporter.addCallback(i),I.checkSinglePromise(e.promise,A)):(this.fill(g,C,A,i),I.checkSinglePromise(this.cache.get(g).promise,A))}},{key:"delete",value:function(I){var g=this.cache.get(I);g&&(g.settled||g.aborter.abort(),this.cache.delete(I))}},{key:"clear",value:function(){for(var I=this.cache.keys(),g=0,C=I.next();!C.done;C=I.next())this.delete(C.value),g+=1;return g}}],[{key:"isAbortException",value:function(I){return"AbortError"===I.name||"ERR_ABORTED"===I.code||"AbortError: aborted"===I.message||"Error: aborted"===I.message}},{key:"checkSinglePromise",value:function(I,g){function C(){if(g&&g.aborted)throw Object.assign(new Error("aborted"),{code:"ERR_ABORTED"})}return I.then((function(I){return C(),I}),(function(I){throw C(),I}))}}]),I}();hA.default=ei;var li=bC.exports;Object.defineProperty(rA,"__esModule",{value:!0}),rA.default=void 0;var oi=li(hA).default;function ti(I){return E.Buffer.from(Object($.a)(I))}rA.default=oi;var ci={inflateSync:ti},ni=aC(Object.freeze(Object.defineProperty({__proto__:null,inflateSync:ti,default:ci},Symbol.toStringTag,{value:"Module"}))),di={},si=bC.exports;Object.defineProperty(di,"__esModule",{value:!0}),di.default=void 0;var ai=si(uC.exports),Zi=si(yC.exports),mi=si(RC.exports),bi=function(){function I(g,C){(0,ai.default)(this,I),(0,mi.default)(this,"ranges",void 0),this.ranges=2===arguments.length?[{min:g,max:C}]:0 in g?Object.assign({},g):[g]}return(0,Zi.default)(I,[{key:"min",value:function(){return this.ranges[0].min}},{key:"max",value:function(){return this.ranges[this.ranges.length-1].max}},{key:"contains",value:function(I){for(var g=0;g<this.ranges.length;g+=1){var C=this.ranges[g];if(C.min<=I&&C.max>=I)return!0}return!1}},{key:"isContiguous",value:function(){return this.ranges.length>1}},{key:"getRanges",value:function(){return this.ranges.map((function(g){return new I(g.min,g.max)}))}},{key:"toString",value:function(){return this.ranges.map((function(I){return"[".concat(I.min,"-").concat(I.max,"]")})).join(",")}},{key:"union",value:function(g){for(var C=this.getRanges().concat(g.getRanges()).sort(this.rangeOrder),A=[],i=C[0],e=1;e<C.length;e+=1){var l=C[e];l.min()>i.max()+1?(A.push(i),i=l):l.max()>i.max()&&(i=new I(i.min(),l.max()))}return A.push(i),1===A.length?A[0]:new I(A)}},{key:"intersection",value:function(g){for(var C=this,A=g,i=this.ranges(),e=A.ranges(),l=i.length,o=e.length,t=0,c=0,n=[];t<l&&c<o;){C=i[t],A=e[c];var d=Math.max(C.min(),A.min()),s=Math.min(C.max(),A.max());s>=d&&n.push(new I(d,s)),C.max()>A.max()?c+=1:t+=1}if(0===n.length)throw new Error("found range of length 0");return 1===n.length?n[0]:new I(n)}},{key:"coverage",value:function(){for(var I=0,g=this.ranges(),C=0;C<g.length;C+=1){var A=g[C];I+=A.max()-A.min()+1}return I}},{key:"rangeOrder",value:function(I,g){var C=I,A=g;return arguments.length<2&&(A=C,C=this),C.min()<A.min()?-1:C.min()>A.min()?1:C.max()<A.max()?-1:A.max()>C.max()?1:0}}]),I}();di.default=bi;var ri={},hi={exports:{}},Gi={exports:{}};!function(I){I.exports=function(I){return-1!==Function.toString.call(I).indexOf("[native code]")},I.exports.default=I.exports,I.exports.__esModule=!0}(Gi);var ui={exports:{}},yi={exports:{}};!function(I){I.exports=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(im){return!1}},I.exports.default=I.exports,I.exports.__esModule=!0}(yi),function(I){var g=VC.exports,C=yi.exports;function A(i,e,l){return C()?(I.exports=A=Reflect.construct,I.exports.default=I.exports,I.exports.__esModule=!0):(I.exports=A=function(I,C,A){var i=[null];i.push.apply(i,C);var e=new(Function.bind.apply(I,i));return A&&g(e,A.prototype),e},I.exports.default=I.exports,I.exports.__esModule=!0),A.apply(null,arguments)}I.exports=A,I.exports.default=I.exports,I.exports.__esModule=!0}(ui),function(I){var g=HC.exports,C=VC.exports,A=Gi.exports,i=ui.exports;function e(l){var o="function"===typeof Map?new Map:void 0;return I.exports=e=function(I){if(null===I||!A(I))return I;if("function"!==typeof I)throw new TypeError("Super expression must either be null or a function");if("undefined"!==typeof o){if(o.has(I))return o.get(I);o.set(I,e)}function e(){return i(I,arguments,g(this).constructor)}return e.prototype=Object.create(I.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),C(e,I)},I.exports.default=I.exports,I.exports.__esModule=!0,e(l)}I.exports=e,I.exports.default=I.exports,I.exports.__esModule=!0}(hi);var Bi=bC.exports;Object.defineProperty(ri,"__esModule",{value:!0}),ri.groupBlocks=function(I){I.sort((function(I,g){return(0|I.offset)-(0|g.offset)}));for(var g,C,A=[],i=0;i<I.length;i+=1)g&&I[i].offset-C<=2e3?(g.length+=I[i].length-C+I[i].offset,g.blocks.push(I[i])):A.push(g={blocks:[I[i]],length:I[i].length,offset:I[i].offset}),C=g.offset+g.length;return A},ri.checkAbortSignal=Si,ri.abortBreakPoint=function(I){return Fi.apply(this,arguments)},ri.AbortError=void 0;var Vi=Bi(hC),pi=Bi(GC.exports),Xi=Bi(uC.exports),Wi=Bi(WC.exports),Hi=Bi(BC.exports),Yi=Bi(pC.exports),Ri=Bi(HC.exports),fi=Bi(hi.exports),Ki=Bi(RC.exports);function wi(I){var g=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(im){return!1}}();return function(){var C,A=(0,Ri.default)(I);if(g){var i=(0,Ri.default)(this).constructor;C=Reflect.construct(A,arguments,i)}else C=A.apply(this,arguments);return(0,Yi.default)(this,C)}}var Ji=function(I){(0,Hi.default)(C,I);var g=wi(C);function C(I){var A;return(0,Xi.default)(this,C),A=g.call(this,I),(0,Ki.default)((0,Wi.default)(A),"code",void 0),A.code="ERR_ABORTED",A}return C}((0,fi.default)(Error));function Si(I){if(I&&I.aborted){if("undefined"!==typeof DOMException)throw new DOMException("aborted","AbortError");var g=new Ji("aborted");throw g.code="ERR_ABORTED",g}}function Fi(){return(Fi=(0,pi.default)(Vi.default.mark((function I(g){return Vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,Promise.resolve();case 2:Si(g);case 3:case"end":return I.stop()}}),I)})))).apply(this,arguments)}ri.AbortError=Ji;var Ni=bC.exports;Object.defineProperty(YC,"__esModule",{value:!0}),YC.BlockView=void 0;var vi=Ni(hC),ki=Ni(GC.exports),Di=Ni(uC.exports),zi=Ni(yC.exports),Mi=Ni(RC.exports),Ui=fC,xi=Ni(rA),Ti=Ni(ni),Qi=Ni(q.a),Pi=Ni(di),Oi=ri;function ji(I,g){var C=Object.keys(I);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(I);g&&(A=A.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),C.push.apply(C,A)}return C}function Li(I){for(var g=1;g<arguments.length;g++){var C=null!=arguments[g]?arguments[g]:{};g%2?ji(Object(C),!0).forEach((function(g){(0,Mi.default)(I,g,C[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(C)):ji(Object(C)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(C,g))}))}return I}var Ei=function(){function I(g,C,i,e,l,o,t){var c=this;if((0,Di.default)(this,I),(0,Mi.default)(this,"cirTreeOffset",void 0),(0,Mi.default)(this,"cirTreeLength",void 0),(0,Mi.default)(this,"bbi",void 0),(0,Mi.default)(this,"isCompressed",void 0),(0,Mi.default)(this,"isBigEndian",void 0),(0,Mi.default)(this,"refsByName",void 0),(0,Mi.default)(this,"blockType",void 0),(0,Mi.default)(this,"cirTreePromise",void 0),(0,Mi.default)(this,"featureCache",new xi.default({cache:new Qi.default({maxSize:1e3}),fill:function(){var I=(0,ki.default)(vi.default.mark((function I(g,C){var i,e,l,o;return vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return i=g.length,e=g.offset,I.next=3,c.bbi.read(A.alloc(i),0,i,e,{signal:C});case 3:return l=I.sent,o=l.buffer,I.abrupt("return",o);case 6:case"end":return I.stop()}}),I)})));return function(g,C){return I.apply(this,arguments)}}()})),(0,Mi.default)(this,"leafParser",void 0),(0,Mi.default)(this,"bigWigParser",void 0),(0,Mi.default)(this,"bigBedParser",void 0),(0,Mi.default)(this,"summaryParser",void 0),!(i>=0))throw new Error("invalid cirTreeOffset!");if(!(e>0))throw new Error("invalid cirTreeLength!");this.cirTreeOffset=i,this.cirTreeLength=e,this.isCompressed=o,this.refsByName=C,this.isBigEndian=l,this.bbi=g,this.blockType=t,Object.assign(this,function(I){var g,C=I?"big":"little",A=(new Ui.Parser).endianess(C).uint32("chromId").uint32("start").uint32("end").uint32("validCnt").float("minScore").float("maxScore").float("sumData").float("sumSqData"),i=(new Ui.Parser).endianess(C).uint8("isLeaf").skip(1).uint16("cnt").choice({tag:"isLeaf",choices:{1:(new Ui.Parser).array("blocksToFetch",{length:"cnt",type:(new Ui.Parser).uint32("startChrom").uint32("startBase").uint32("endChrom").uint32("endBase").uint64("blockOffset").uint64("blockSize")}),0:(new Ui.Parser).array("recurOffsets",{length:"cnt",type:(new Ui.Parser).uint32("startChrom").uint32("startBase").uint32("endChrom").uint32("endBase").uint64("blockOffset")})}}),e=(new Ui.Parser).endianess(C).uint32("chromId").int32("start").int32("end").string("rest",{zeroTerminated:!0});return{bigWigParser:(new Ui.Parser).endianess(C).skip(4).int32("blockStart").skip(4).uint32("itemStep").uint32("itemSpan").uint8("blockType").skip(1).uint16("itemCount").choice({tag:"blockType",choices:(g={},(0,Mi.default)(g,3,(new Ui.Parser).array("items",{length:"itemCount",type:(new Ui.Parser).float("score")})),(0,Mi.default)(g,2,(new Ui.Parser).array("items",{length:"itemCount",type:(new Ui.Parser).int32("start").float("score")})),(0,Mi.default)(g,1,(new Ui.Parser).array("items",{length:"itemCount",type:(new Ui.Parser).int32("start").int32("end").float("score")})),g)}),bigBedParser:e,summaryParser:A,leafParser:i}}(l))}return(0,zi.default)(I,[{key:"readWigData",value:function(){var I=(0,ki.default)(vi.default.mark((function I(g,C,i,e,l){var o,t,c,n,d,s,a,Z,m,b,r,h,G,u,y,B,V=this;return vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.prev=0,o=this.refsByName,t=this.bbi,c=this.cirTreeOffset,n=this.isBigEndian,d=l.signal,void 0===(s=o[g])&&e.complete(),a={chrId:s,start:C,end:i},this.cirTreePromise||(this.cirTreePromise=t.read(A.alloc(48),0,48,c,{signal:d})),I.next=9,this.cirTreePromise;case 9:return Z=I.sent,m=Z.buffer,b=n?m.readUInt32BE(4):m.readUInt32LE(4),r=[],h=0,u=function(I){return(I.startChrom<s||I.startChrom===s&&I.startBase<=i)&&(I.endChrom>s||I.endChrom===s&&I.endBase>=C)},y=function(){var I=(0,ki.default)(vi.default.mark((function I(g,C,A){var i,o,t,c;return vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.prev=0,i=C.max()-C.min(),o=C.min(),I.next=5,V.featureCache.get("".concat(i,"_").concat(o),{length:i,offset:o},d);case 5:for(t=I.sent,c=0;c<g.length;c+=1)C.contains(g[c])&&(G(t,g[c]-o,A,e,l),0===(h-=1)&&V.readFeatures(e,r,Li(Li({},l),{},{request:a})));I.next=12;break;case 9:I.prev=9,I.t0=I.catch(0),e.error(I.t0);case 12:case"end":return I.stop()}}),I,null,[[0,9]])})));return function(g,C,A){return I.apply(this,arguments)}}(),B=function(I,g){try{h+=I.length;for(var C=4+32*b,A=new Pi.default(I[0],I[0]+C),i=1;i<I.length;i+=1){var l=new Pi.default(I[i],I[i]+C);A=A.union(l)}A.getRanges().map((function(C){return y(I,C,g)}))}catch(im){e.error(im)}},G=function(I,g,C){try{var A=I.slice(g),i=V.leafParser.parse(A).result;if(i.blocksToFetch&&(r=r.concat(i.blocksToFetch.filter(u).map((function(I){return{offset:I.blockOffset,length:I.blockSize}})))),i.recurOffsets){var l=i.recurOffsets.filter(u).map((function(I){return I.blockOffset}));l.length>0&&B(l,C+1)}}catch(im){e.error(im)}},I.abrupt("return",B([c+48],1));case 21:I.prev=21,I.t0=I.catch(0),e.error(I.t0);case 24:case"end":return I.stop()}}),I,this,[[0,21]])})));return function(g,C,A,i,e){return I.apply(this,arguments)}}()},{key:"parseSummaryBlock",value:function(g,C,A){for(var i=[],e=C;e<g.byteLength;){var l=this.summaryParser.parse(g.slice(e));i.push(l.result),e+=l.offset}var o=i;return A&&(o=o.filter((function(I){return I.chromId===A.chrId}))),o=o.map((function(I){return{start:I.start,end:I.end,maxScore:I.maxScore,minScore:I.minScore,score:I.sumData/(I.validCnt||1),summary:!0}})),A?o.filter((function(g){return I.coordFilter(g,A)})):o}},{key:"parseBigBedBlock",value:function(g,C,A,i){for(var e=[],l=C;l<g.byteLength;){var o=this.bigBedParser.parse(g.slice(l));o.result.uniqueId="bb-".concat(A+l),e.push(o.result),l+=o.offset}return i?e.filter((function(g){return I.coordFilter(g,i)})):e}},{key:"parseBigWigBlock",value:function(g,C,A){var i=g.slice(C),e=this.bigWigParser.parse(i).result,l=e.items,o=e.itemSpan,t=e.itemStep,c=e.blockStart,n=e.blockType;if(3===n)for(var d=0;d<l.length;d++)l[d].start=c+d*t,l[d].end=c+d*t+o;else if(2===n)for(var s=0;s<l.length;s++)l[s].end=l[s].start+o;return A?l.filter((function(g){return I.coordFilter(g,A)})):l}},{key:"readFeatures",value:function(){var I=(0,ki.default)(vi.default.mark((function I(g,C){var A,i,e,l,o,t,c=this,n=arguments;return vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return A=n.length>2&&void 0!==n[2]?n[2]:{},I.prev=1,i=this.blockType,e=this.isCompressed,l=A.signal,o=A.request,t=(0,Oi.groupBlocks)(C),(0,Oi.checkAbortSignal)(l),I.next=8,Promise.all(t.map(function(){var I=(0,ki.default)(vi.default.mark((function I(C){var A,t,n;return vi.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return(0,Oi.checkAbortSignal)(l),A=C.length,t=C.offset,I.next=4,c.featureCache.get("".concat(A,"_").concat(t),C,l);case 4:n=I.sent,C.blocks.forEach((function(I){(0,Oi.checkAbortSignal)(l);var A=I.offset-C.offset,t=n;switch(e&&(t=Ti.default.inflateSync(n.slice(A)),A=0),(0,Oi.checkAbortSignal)(l),i){case"summary":g.next(c.parseSummaryBlock(t,A,o));break;case"bigwig":g.next(c.parseBigWigBlock(t,A,o));break;case"bigbed":g.next(c.parseBigBedBlock(t,A,256*I.offset,o));break;default:console.warn("Don't know what to do with ".concat(i))}}));case 6:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}()));case 8:g.complete(),I.next=14;break;case 11:I.prev=11,I.t0=I.catch(1),g.error(I.t0);case 14:case"end":return I.stop()}}),I,this,[[1,11]])})));return function(g,C){return I.apply(this,arguments)}}()}],[{key:"coordFilter",value:function(I,g){return I.start<g.end&&I.end>=g.start}}]),I}();YC.BlockView=Ei;var _i={},$i=function(I,g){return($i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)g.hasOwnProperty(C)&&(I[C]=g[C])})(I,g)};function qi(I,g){function C(){this.constructor=I}$i(I,g),I.prototype=null===g?Object.create(g):(C.prototype=g.prototype,new C)}function Ie(I){return"function"===typeof I}var ge=!1,Ce={Promise:void 0,set useDeprecatedSynchronousErrorHandling(I){I&&(new Error).stack;ge=I},get useDeprecatedSynchronousErrorHandling(){return ge}};function Ae(I){setTimeout((function(){throw I}),0)}var ie={closed:!0,next:function(I){},error:function(I){if(Ce.useDeprecatedSynchronousErrorHandling)throw I;Ae(I)},complete:function(){}},ee=function(){return Array.isArray||function(I){return I&&"number"===typeof I.length}}();function le(I){return null!==I&&"object"===typeof I}var oe=function(){function I(I){return Error.call(this),this.message=I?I.length+" errors occurred during unsubscription:\n"+I.map((function(I,g){return g+1+") "+I.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=I,this}return I.prototype=Object.create(Error.prototype),I}(),te=oe,ce=function(){function I(I){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,I&&(this._ctorUnsubscribe=!0,this._unsubscribe=I)}var g;return I.prototype.unsubscribe=function(){var g;if(!this.closed){var C=this,A=C._parentOrParents,i=C._ctorUnsubscribe,e=C._unsubscribe,l=C._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,A instanceof I)A.remove(this);else if(null!==A)for(var o=0;o<A.length;++o){A[o].remove(this)}if(Ie(e)){i&&(this._unsubscribe=void 0);try{e.call(this)}catch(im){g=im instanceof te?ne(im.errors):[im]}}if(ee(l)){o=-1;for(var t=l.length;++o<t;){var c=l[o];if(le(c))try{c.unsubscribe()}catch(im){g=g||[],im instanceof te?g=g.concat(ne(im.errors)):g.push(im)}}}if(g)throw new te(g)}},I.prototype.add=function(g){var C=g;if(!g)return I.EMPTY;switch(typeof g){case"function":C=new I(g);case"object":if(C===this||C.closed||"function"!==typeof C.unsubscribe)return C;if(this.closed)return C.unsubscribe(),C;if(!(C instanceof I)){var A=C;(C=new I)._subscriptions=[A]}break;default:throw new Error("unrecognized teardown "+g+" added to Subscription.")}var i=C._parentOrParents;if(null===i)C._parentOrParents=this;else if(i instanceof I){if(i===this)return C;C._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return C;i.push(this)}var e=this._subscriptions;return null===e?this._subscriptions=[C]:e.push(C),C},I.prototype.remove=function(I){var g=this._subscriptions;if(g){var C=g.indexOf(I);-1!==C&&g.splice(C,1)}},I.EMPTY=((g=new I).closed=!0,g),I}();function ne(I){return I.reduce((function(I,g){return I.concat(g instanceof te?g.errors:g)}),[])}var de=function(){return"function"===typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),se=function(I){function g(C,A,i){var e=I.call(this)||this;switch(e.syncErrorValue=null,e.syncErrorThrown=!1,e.syncErrorThrowable=!1,e.isStopped=!1,arguments.length){case 0:e.destination=ie;break;case 1:if(!C){e.destination=ie;break}if("object"===typeof C){C instanceof g?(e.syncErrorThrowable=C.syncErrorThrowable,e.destination=C,C.add(e)):(e.syncErrorThrowable=!0,e.destination=new ae(e,C));break}default:e.syncErrorThrowable=!0,e.destination=new ae(e,C,A,i)}return e}return qi(g,I),g.prototype[de]=function(){return this},g.create=function(I,C,A){var i=new g(I,C,A);return i.syncErrorThrowable=!1,i},g.prototype.next=function(I){this.isStopped||this._next(I)},g.prototype.error=function(I){this.isStopped||(this.isStopped=!0,this._error(I))},g.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},g.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,I.prototype.unsubscribe.call(this))},g.prototype._next=function(I){this.destination.next(I)},g.prototype._error=function(I){this.destination.error(I),this.unsubscribe()},g.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},g.prototype._unsubscribeAndRecycle=function(){var I=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=I,this},g}(ce),ae=function(I){function g(g,C,A,i){var e,l=I.call(this)||this;l._parentSubscriber=g;var o=l;return Ie(C)?e=C:C&&(e=C.next,A=C.error,i=C.complete,C!==ie&&(Ie((o=Object.create(C)).unsubscribe)&&l.add(o.unsubscribe.bind(o)),o.unsubscribe=l.unsubscribe.bind(l))),l._context=o,l._next=e,l._error=A,l._complete=i,l}return qi(g,I),g.prototype.next=function(I){if(!this.isStopped&&this._next){var g=this._parentSubscriber;Ce.useDeprecatedSynchronousErrorHandling&&g.syncErrorThrowable?this.__tryOrSetError(g,this._next,I)&&this.unsubscribe():this.__tryOrUnsub(this._next,I)}},g.prototype.error=function(I){if(!this.isStopped){var g=this._parentSubscriber,C=Ce.useDeprecatedSynchronousErrorHandling;if(this._error)C&&g.syncErrorThrowable?(this.__tryOrSetError(g,this._error,I),this.unsubscribe()):(this.__tryOrUnsub(this._error,I),this.unsubscribe());else if(g.syncErrorThrowable)C?(g.syncErrorValue=I,g.syncErrorThrown=!0):Ae(I),this.unsubscribe();else{if(this.unsubscribe(),C)throw I;Ae(I)}}},g.prototype.complete=function(){var I=this;if(!this.isStopped){var g=this._parentSubscriber;if(this._complete){var C=function(){return I._complete.call(I._context)};Ce.useDeprecatedSynchronousErrorHandling&&g.syncErrorThrowable?(this.__tryOrSetError(g,C),this.unsubscribe()):(this.__tryOrUnsub(C),this.unsubscribe())}else this.unsubscribe()}},g.prototype.__tryOrUnsub=function(I,g){try{I.call(this._context,g)}catch(C){if(this.unsubscribe(),Ce.useDeprecatedSynchronousErrorHandling)throw C;Ae(C)}},g.prototype.__tryOrSetError=function(I,g,C){if(!Ce.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{g.call(this._context,C)}catch(A){return Ce.useDeprecatedSynchronousErrorHandling?(I.syncErrorValue=A,I.syncErrorThrown=!0,!0):(Ae(A),!0)}return!1},g.prototype._unsubscribe=function(){var I=this._parentSubscriber;this._context=null,this._parentSubscriber=null,I.unsubscribe()},g}(se);function Ze(I){for(;I;){var g=I,C=g.closed,A=g.destination,i=g.isStopped;if(C||i)return!1;I=A&&A instanceof se?A:null}return!0}var me=function(){return"function"===typeof Symbol&&Symbol.observable||"@@observable"}();function be(I){return I}function re(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return he(I)}function he(I){return 0===I.length?be:1===I.length?I[0]:function(g){return I.reduce((function(I,g){return g(I)}),g)}}var Ge=function(){function I(I){this._isScalar=!1,I&&(this._subscribe=I)}return I.prototype.lift=function(g){var C=new I;return C.source=this,C.operator=g,C},I.prototype.subscribe=function(I,g,C){var A=this.operator,i=function(I,g,C){if(I){if(I instanceof se)return I;if(I[de])return I[de]()}return I||g||C?new se(I,g,C):new se(ie)}(I,g,C);if(A?i.add(A.call(i,this.source)):i.add(this.source||Ce.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),Ce.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},I.prototype._trySubscribe=function(I){try{return this._subscribe(I)}catch(g){Ce.useDeprecatedSynchronousErrorHandling&&(I.syncErrorThrown=!0,I.syncErrorValue=g),Ze(I)?I.error(g):console.warn(g)}},I.prototype.forEach=function(I,g){var C=this;return new(g=ue(g))((function(g,A){var i;i=C.subscribe((function(g){try{I(g)}catch(C){A(C),i&&i.unsubscribe()}}),A,g)}))},I.prototype._subscribe=function(I){var g=this.source;return g&&g.subscribe(I)},I.prototype[me]=function(){return this},I.prototype.pipe=function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return 0===I.length?this:he(I)(this)},I.prototype.toPromise=function(I){var g=this;return new(I=ue(I))((function(I,C){var A;g.subscribe((function(I){return A=I}),(function(I){return C(I)}),(function(){return I(A)}))}))},I.create=function(g){return new I(g)},I}();function ue(I){if(I||(I=Ce.Promise||Promise),!I)throw new Error("no Promise impl found");return I}var ye=function(){function I(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return I.prototype=Object.create(Error.prototype),I}(),Be=function(I){function g(g,C){var A=I.call(this)||this;return A.subject=g,A.subscriber=C,A.closed=!1,A}return qi(g,I),g.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var I=this.subject,g=I.observers;if(this.subject=null,g&&0!==g.length&&!I.isStopped&&!I.closed){var C=g.indexOf(this.subscriber);-1!==C&&g.splice(C,1)}}},g}(ce),Ve=function(I){function g(g){var C=I.call(this,g)||this;return C.destination=g,C}return qi(g,I),g}(se),pe=function(I){function g(){var g=I.call(this)||this;return g.observers=[],g.closed=!1,g.isStopped=!1,g.hasError=!1,g.thrownError=null,g}return qi(g,I),g.prototype[de]=function(){return new Ve(this)},g.prototype.lift=function(I){var g=new Xe(this,this);return g.operator=I,g},g.prototype.next=function(I){if(this.closed)throw new ye;if(!this.isStopped)for(var g=this.observers,C=g.length,A=g.slice(),i=0;i<C;i++)A[i].next(I)},g.prototype.error=function(I){if(this.closed)throw new ye;this.hasError=!0,this.thrownError=I,this.isStopped=!0;for(var g=this.observers,C=g.length,A=g.slice(),i=0;i<C;i++)A[i].error(I);this.observers.length=0},g.prototype.complete=function(){if(this.closed)throw new ye;this.isStopped=!0;for(var I=this.observers,g=I.length,C=I.slice(),A=0;A<g;A++)C[A].complete();this.observers.length=0},g.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},g.prototype._trySubscribe=function(g){if(this.closed)throw new ye;return I.prototype._trySubscribe.call(this,g)},g.prototype._subscribe=function(I){if(this.closed)throw new ye;return this.hasError?(I.error(this.thrownError),ce.EMPTY):this.isStopped?(I.complete(),ce.EMPTY):(this.observers.push(I),new Be(this,I))},g.prototype.asObservable=function(){var I=new Ge;return I.source=this,I},g.create=function(I,g){return new Xe(I,g)},g}(Ge),Xe=function(I){function g(g,C){var A=I.call(this)||this;return A.destination=g,A.source=C,A}return qi(g,I),g.prototype.next=function(I){var g=this.destination;g&&g.next&&g.next(I)},g.prototype.error=function(I){var g=this.destination;g&&g.error&&this.destination.error(I)},g.prototype.complete=function(){var I=this.destination;I&&I.complete&&this.destination.complete()},g.prototype._subscribe=function(I){return this.source?this.source.subscribe(I):ce.EMPTY},g}(pe);function We(){return function(I){return I.lift(new He(I))}}var He=function(){function I(I){this.connectable=I}return I.prototype.call=function(I,g){var C=this.connectable;C._refCount++;var A=new Ye(I,C),i=g.subscribe(A);return A.closed||(A.connection=C.connect()),i},I}(),Ye=function(I){function g(g,C){var A=I.call(this,g)||this;return A.connectable=C,A}return qi(g,I),g.prototype._unsubscribe=function(){var I=this.connectable;if(I){this.connectable=null;var g=I._refCount;if(g<=0)this.connection=null;else if(I._refCount=g-1,g>1)this.connection=null;else{var C=this.connection,A=I._connection;this.connection=null,!A||C&&A!==C||A.unsubscribe()}}else this.connection=null},g}(se),Re=function(I){function g(g,C){var A=I.call(this)||this;return A.source=g,A.subjectFactory=C,A._refCount=0,A._isComplete=!1,A}return qi(g,I),g.prototype._subscribe=function(I){return this.getSubject().subscribe(I)},g.prototype.getSubject=function(){var I=this._subject;return I&&!I.isStopped||(this._subject=this.subjectFactory()),this._subject},g.prototype.connect=function(){var I=this._connection;return I||(this._isComplete=!1,(I=this._connection=new ce).add(this.source.subscribe(new Ke(this.getSubject(),this))),I.closed&&(this._connection=null,I=ce.EMPTY)),I},g.prototype.refCount=function(){return We()(this)},g}(Ge),fe=function(){var I=Re.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:I._subscribe},_isComplete:{value:I._isComplete,writable:!0},getSubject:{value:I.getSubject},connect:{value:I.connect},refCount:{value:I.refCount}}}(),Ke=function(I){function g(g,C){var A=I.call(this,g)||this;return A.connectable=C,A}return qi(g,I),g.prototype._error=function(g){this._unsubscribe(),I.prototype._error.call(this,g)},g.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),I.prototype._complete.call(this)},g.prototype._unsubscribe=function(){var I=this.connectable;if(I){this.connectable=null;var g=I._connection;I._refCount=0,I._subject=null,I._connection=null,g&&g.unsubscribe()}},g}(Ve);var we=function(){function I(I,g,C,A){this.keySelector=I,this.elementSelector=g,this.durationSelector=C,this.subjectSelector=A}return I.prototype.call=function(I,g){return g.subscribe(new Je(I,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},I}(),Je=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;return l.keySelector=C,l.elementSelector=A,l.durationSelector=i,l.subjectSelector=e,l.groups=null,l.attemptedToUnsubscribe=!1,l.count=0,l}return qi(g,I),g.prototype._next=function(I){var g;try{g=this.keySelector(I)}catch(C){return void this.error(C)}this._group(I,g)},g.prototype._group=function(I,g){var C=this.groups;C||(C=this.groups=new Map);var A,i=C.get(g);if(this.elementSelector)try{A=this.elementSelector(I)}catch(o){this.error(o)}else A=I;if(!i){i=this.subjectSelector?this.subjectSelector():new pe,C.set(g,i);var e=new Fe(g,i,this);if(this.destination.next(e),this.durationSelector){var l=void 0;try{l=this.durationSelector(new Fe(g,i))}catch(o){return void this.error(o)}this.add(l.subscribe(new Se(g,i,this)))}}i.closed||i.next(A)},g.prototype._error=function(I){var g=this.groups;g&&(g.forEach((function(g,C){g.error(I)})),g.clear()),this.destination.error(I)},g.prototype._complete=function(){var I=this.groups;I&&(I.forEach((function(I,g){I.complete()})),I.clear()),this.destination.complete()},g.prototype.removeGroup=function(I){this.groups.delete(I)},g.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&I.prototype.unsubscribe.call(this))},g}(se),Se=function(I){function g(g,C,A){var i=I.call(this,C)||this;return i.key=g,i.group=C,i.parent=A,i}return qi(g,I),g.prototype._next=function(I){this.complete()},g.prototype._unsubscribe=function(){var I=this.parent,g=this.key;this.key=this.parent=null,I&&I.removeGroup(g)},g}(se),Fe=function(I){function g(g,C,A){var i=I.call(this)||this;return i.key=g,i.groupSubject=C,i.refCountSubscription=A,i}return qi(g,I),g.prototype._subscribe=function(I){var g=new ce,C=this.refCountSubscription,A=this.groupSubject;return C&&!C.closed&&g.add(new Ne(C)),g.add(A.subscribe(I)),g},g}(Ge),Ne=function(I){function g(g){var C=I.call(this)||this;return C.parent=g,g.count++,C}return qi(g,I),g.prototype.unsubscribe=function(){var g=this.parent;g.closed||this.closed||(I.prototype.unsubscribe.call(this),g.count-=1,0===g.count&&g.attemptedToUnsubscribe&&g.unsubscribe())},g}(ce),ve=function(I){function g(g){var C=I.call(this)||this;return C._value=g,C}return qi(g,I),Object.defineProperty(g.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),g.prototype._subscribe=function(g){var C=I.prototype._subscribe.call(this,g);return C&&!C.closed&&g.next(this._value),C},g.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new ye;return this._value},g.prototype.next=function(g){I.prototype.next.call(this,this._value=g)},g}(pe),ke=function(I){function g(g,C){var A=I.call(this,g,C)||this;return A.scheduler=g,A.work=C,A.pending=!1,A}return qi(g,I),g.prototype.schedule=function(I,g){if(void 0===g&&(g=0),this.closed)return this;this.state=I;var C=this.id,A=this.scheduler;return null!=C&&(this.id=this.recycleAsyncId(A,C,g)),this.pending=!0,this.delay=g,this.id=this.id||this.requestAsyncId(A,this.id,g),this},g.prototype.requestAsyncId=function(I,g,C){return void 0===C&&(C=0),setInterval(I.flush.bind(I,this),C)},g.prototype.recycleAsyncId=function(I,g,C){if(void 0===C&&(C=0),null!==C&&this.delay===C&&!1===this.pending)return g;clearInterval(g)},g.prototype.execute=function(I,g){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var C=this._execute(I,g);if(C)return C;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},g.prototype._execute=function(I,g){var C=!1,A=void 0;try{this.work(I)}catch(im){C=!0,A=!!im&&im||new Error(im)}if(C)return this.unsubscribe(),A},g.prototype._unsubscribe=function(){var I=this.id,g=this.scheduler,C=g.actions,A=C.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==A&&C.splice(A,1),null!=I&&(this.id=this.recycleAsyncId(g,I,null)),this.delay=null},g}(function(I){function g(g,C){return I.call(this)||this}return qi(g,I),g.prototype.schedule=function(I,g){return this},g}(ce)),De=function(I){function g(g,C){var A=I.call(this,g,C)||this;return A.scheduler=g,A.work=C,A}return qi(g,I),g.prototype.schedule=function(g,C){return void 0===C&&(C=0),C>0?I.prototype.schedule.call(this,g,C):(this.delay=C,this.state=g,this.scheduler.flush(this),this)},g.prototype.execute=function(g,C){return C>0||this.closed?I.prototype.execute.call(this,g,C):this._execute(g,C)},g.prototype.requestAsyncId=function(g,C,A){return void 0===A&&(A=0),null!==A&&A>0||null===A&&this.delay>0?I.prototype.requestAsyncId.call(this,g,C,A):g.flush(this)},g}(ke),ze=function(){function I(g,C){void 0===C&&(C=I.now),this.SchedulerAction=g,this.now=C}return I.prototype.schedule=function(I,g,C){return void 0===g&&(g=0),new this.SchedulerAction(this,I).schedule(C,g)},I.now=function(){return Date.now()},I}(),Me=function(I){function g(C,A){void 0===A&&(A=ze.now);var i=I.call(this,C,(function(){return g.delegate&&g.delegate!==i?g.delegate.now():A()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return qi(g,I),g.prototype.schedule=function(C,A,i){return void 0===A&&(A=0),g.delegate&&g.delegate!==this?g.delegate.schedule(C,A,i):I.prototype.schedule.call(this,C,A,i)},g.prototype.flush=function(I){var g=this.actions;if(this.active)g.push(I);else{var C;this.active=!0;do{if(C=I.execute(I.state,I.delay))break}while(I=g.shift());if(this.active=!1,C){for(;I=g.shift();)I.unsubscribe();throw C}}},g}(ze),Ue=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g}(Me),xe=new Ue(De),Te=xe,Qe=new Ge((function(I){return I.complete()}));function Pe(I){return I?function(I){return new Ge((function(g){return I.schedule((function(){return g.complete()}))}))}(I):Qe}function Oe(I){return I&&"function"===typeof I.schedule}var je,Le=function(I){return function(g){for(var C=0,A=I.length;C<A&&!g.closed;C++)g.next(I[C]);g.complete()}};function Ee(I,g){return new Ge((function(C){var A=new ce,i=0;return A.add(g.schedule((function(){i!==I.length?(C.next(I[i++]),C.closed||A.add(this.schedule())):C.complete()}))),A}))}function _e(I,g){return g?Ee(I,g):new Ge(Le(I))}function $e(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=I[I.length-1];return Oe(C)?(I.pop(),Ee(I,C)):_e(I)}function qe(I,g){return new Ge(g?function(C){return g.schedule(Il,0,{error:I,subscriber:C})}:function(g){return g.error(I)})}function Il(I){var g=I.error;I.subscriber.error(g)}je||(je={});var gl=function(){function I(I,g,C){this.kind=I,this.value=g,this.error=C,this.hasValue="N"===I}return I.prototype.observe=function(I){switch(this.kind){case"N":return I.next&&I.next(this.value);case"E":return I.error&&I.error(this.error);case"C":return I.complete&&I.complete()}},I.prototype.do=function(I,g,C){switch(this.kind){case"N":return I&&I(this.value);case"E":return g&&g(this.error);case"C":return C&&C()}},I.prototype.accept=function(I,g,C){return I&&"function"===typeof I.next?this.observe(I):this.do(I,g,C)},I.prototype.toObservable=function(){switch(this.kind){case"N":return $e(this.value);case"E":return qe(this.error);case"C":return Pe()}throw new Error("unexpected notification kind value")},I.createNext=function(g){return"undefined"!==typeof g?new I("N",g):I.undefinedValueNotification},I.createError=function(g){return new I("E",void 0,g)},I.createComplete=function(){return I.completeNotification},I.completeNotification=new I("C"),I.undefinedValueNotification=new I("N",void 0),I}();var Cl=function(){function I(I,g){void 0===g&&(g=0),this.scheduler=I,this.delay=g}return I.prototype.call=function(I,g){return g.subscribe(new Al(I,this.scheduler,this.delay))},I}(),Al=function(I){function g(g,C,A){void 0===A&&(A=0);var i=I.call(this,g)||this;return i.scheduler=C,i.delay=A,i}return qi(g,I),g.dispatch=function(I){var g=I.notification,C=I.destination;g.observe(C),this.unsubscribe()},g.prototype.scheduleMessage=function(I){this.destination.add(this.scheduler.schedule(g.dispatch,this.delay,new il(I,this.destination)))},g.prototype._next=function(I){this.scheduleMessage(gl.createNext(I))},g.prototype._error=function(I){this.scheduleMessage(gl.createError(I)),this.unsubscribe()},g.prototype._complete=function(){this.scheduleMessage(gl.createComplete()),this.unsubscribe()},g}(se),il=function(){return function(I,g){this.notification=I,this.destination=g}}(),el=function(I){function g(g,C,A){void 0===g&&(g=Number.POSITIVE_INFINITY),void 0===C&&(C=Number.POSITIVE_INFINITY);var i=I.call(this)||this;return i.scheduler=A,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=g<1?1:g,i._windowTime=C<1?1:C,C===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return qi(g,I),g.prototype.nextInfiniteTimeWindow=function(g){if(!this.isStopped){var C=this._events;C.push(g),C.length>this._bufferSize&&C.shift()}I.prototype.next.call(this,g)},g.prototype.nextTimeWindow=function(g){this.isStopped||(this._events.push(new ll(this._getNow(),g)),this._trimBufferThenGetEvents()),I.prototype.next.call(this,g)},g.prototype._subscribe=function(I){var g,C=this._infiniteTimeWindow,A=C?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,e=A.length;if(this.closed)throw new ye;if(this.isStopped||this.hasError?g=ce.EMPTY:(this.observers.push(I),g=new Be(this,I)),i&&I.add(I=new Al(I,i)),C)for(var l=0;l<e&&!I.closed;l++)I.next(A[l]);else for(l=0;l<e&&!I.closed;l++)I.next(A[l].value);return this.hasError?I.error(this.thrownError):this.isStopped&&I.complete(),g},g.prototype._getNow=function(){return(this.scheduler||Te).now()},g.prototype._trimBufferThenGetEvents=function(){for(var I=this._getNow(),g=this._bufferSize,C=this._windowTime,A=this._events,i=A.length,e=0;e<i&&!(I-A[e].time<C);)e++;return i>g&&(e=Math.max(e,i-g)),e>0&&A.splice(0,e),A},g}(pe),ll=function(){return function(I,g){this.time=I,this.value=g}}(),ol=function(I){function g(){var g=null!==I&&I.apply(this,arguments)||this;return g.value=null,g.hasNext=!1,g.hasCompleted=!1,g}return qi(g,I),g.prototype._subscribe=function(g){return this.hasError?(g.error(this.thrownError),ce.EMPTY):this.hasCompleted&&this.hasNext?(g.next(this.value),g.complete(),ce.EMPTY):I.prototype._subscribe.call(this,g)},g.prototype.next=function(I){this.hasCompleted||(this.value=I,this.hasNext=!0)},g.prototype.error=function(g){this.hasCompleted||I.prototype.error.call(this,g)},g.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&I.prototype.next.call(this,this.value),I.prototype.complete.call(this)},g}(pe),tl=1,cl=function(){return Promise.resolve()}(),nl={};function dl(I){return I in nl&&(delete nl[I],!0)}var sl=function(I){var g=tl++;return nl[g]=!0,cl.then((function(){return dl(g)&&I()})),g},al=function(I){dl(I)},Zl=function(I){function g(g,C){var A=I.call(this,g,C)||this;return A.scheduler=g,A.work=C,A}return qi(g,I),g.prototype.requestAsyncId=function(g,C,A){return void 0===A&&(A=0),null!==A&&A>0?I.prototype.requestAsyncId.call(this,g,C,A):(g.actions.push(this),g.scheduled||(g.scheduled=sl(g.flush.bind(g,null))))},g.prototype.recycleAsyncId=function(g,C,A){if(void 0===A&&(A=0),null!==A&&A>0||null===A&&this.delay>0)return I.prototype.recycleAsyncId.call(this,g,C,A);0===g.actions.length&&(al(C),g.scheduled=void 0)},g}(ke),ml=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g.prototype.flush=function(I){this.active=!0,this.scheduled=void 0;var g,C=this.actions,A=-1,i=C.length;I=I||C.shift();do{if(g=I.execute(I.state,I.delay))break}while(++A<i&&(I=C.shift()));if(this.active=!1,g){for(;++A<i&&(I=C.shift());)I.unsubscribe();throw g}},g}(Me),bl=new ml(Zl),rl=bl,hl=new Me(ke),Gl=hl,ul=function(I){function g(g,C){var A=I.call(this,g,C)||this;return A.scheduler=g,A.work=C,A}return qi(g,I),g.prototype.requestAsyncId=function(g,C,A){return void 0===A&&(A=0),null!==A&&A>0?I.prototype.requestAsyncId.call(this,g,C,A):(g.actions.push(this),g.scheduled||(g.scheduled=requestAnimationFrame((function(){return g.flush(null)}))))},g.prototype.recycleAsyncId=function(g,C,A){if(void 0===A&&(A=0),null!==A&&A>0||null===A&&this.delay>0)return I.prototype.recycleAsyncId.call(this,g,C,A);0===g.actions.length&&(cancelAnimationFrame(C),g.scheduled=void 0)},g}(ke),yl=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g.prototype.flush=function(I){this.active=!0,this.scheduled=void 0;var g,C=this.actions,A=-1,i=C.length;I=I||C.shift();do{if(g=I.execute(I.state,I.delay))break}while(++A<i&&(I=C.shift()));if(this.active=!1,g){for(;++A<i&&(I=C.shift());)I.unsubscribe();throw g}},g}(Me),Bl=new yl(ul),Vl=Bl,pl=function(I){function g(g,C){void 0===g&&(g=Xl),void 0===C&&(C=Number.POSITIVE_INFINITY);var A=I.call(this,g,(function(){return A.frame}))||this;return A.maxFrames=C,A.frame=0,A.index=-1,A}return qi(g,I),g.prototype.flush=function(){for(var I,g,C=this.actions,A=this.maxFrames;(g=C[0])&&g.delay<=A&&(C.shift(),this.frame=g.delay,!(I=g.execute(g.state,g.delay))););if(I){for(;g=C.shift();)g.unsubscribe();throw I}},g.frameTimeFactor=10,g}(Me),Xl=function(I){function g(g,C,A){void 0===A&&(A=g.index+=1);var i=I.call(this,g,C)||this;return i.scheduler=g,i.work=C,i.index=A,i.active=!0,i.index=g.index=A,i}return qi(g,I),g.prototype.schedule=function(C,A){if(void 0===A&&(A=0),!this.id)return I.prototype.schedule.call(this,C,A);this.active=!1;var i=new g(this.scheduler,this.work);return this.add(i),i.schedule(C,A)},g.prototype.requestAsyncId=function(I,C,A){void 0===A&&(A=0),this.delay=I.frame+A;var i=I.actions;return i.push(this),i.sort(g.sortActions),!0},g.prototype.recycleAsyncId=function(I,g,C){},g.prototype._execute=function(g,C){if(!0===this.active)return I.prototype._execute.call(this,g,C)},g.sortActions=function(I,g){return I.delay===g.delay?I.index===g.index?0:I.index>g.index?1:-1:I.delay>g.delay?1:-1},g}(ke);function Wl(){}var Hl=function(){function I(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return I.prototype=Object.create(Error.prototype),I}(),Yl=function(){function I(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return I.prototype=Object.create(Error.prototype),I}(),Rl=function(){function I(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return I.prototype=Object.create(Error.prototype),I}();function fl(I,g){return function(C){if("function"!==typeof I)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return C.lift(new Kl(I,g))}}var Kl=function(){function I(I,g){this.project=I,this.thisArg=g}return I.prototype.call=function(I,g){return g.subscribe(new wl(I,this.project,this.thisArg))},I}(),wl=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.project=C,i.count=0,i.thisArg=A||i,i}return qi(g,I),g.prototype._next=function(I){var g;try{g=this.project.call(this.thisArg,I,this.count++)}catch(C){return void this.destination.error(C)}this.destination.next(g)},g}(se);function Jl(I){var g=this,C=I.args,A=I.subscriber,i=I.params,e=i.callbackFunc,l=i.context,o=i.scheduler,t=i.subject;if(!t){t=i.subject=new ol;try{e.apply(l,C.concat([function(){for(var I=[],C=0;C<arguments.length;C++)I[C]=arguments[C];var A=I.length<=1?I[0]:I;g.add(o.schedule(Sl,0,{value:A,subject:t}))}]))}catch(c){t.error(c)}}this.add(t.subscribe(A))}function Sl(I){var g=I.value,C=I.subject;C.next(g),C.complete()}function Fl(I){var g=this,C=I.params,A=I.subscriber,i=I.context,e=C.callbackFunc,l=C.args,o=C.scheduler,t=C.subject;if(!t){t=C.subject=new ol;try{e.apply(i,l.concat([function(){for(var I=[],C=0;C<arguments.length;C++)I[C]=arguments[C];var A=I.shift();if(A)g.add(o.schedule(vl,0,{err:A,subject:t}));else{var i=I.length<=1?I[0]:I;g.add(o.schedule(Nl,0,{value:i,subject:t}))}}]))}catch(c){this.add(o.schedule(vl,0,{err:c,subject:t}))}}this.add(t.subscribe(A))}function Nl(I){var g=I.value,C=I.subject;C.next(g),C.complete()}function vl(I){var g=I.err;I.subject.error(g)}var kl=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g.prototype.notifyNext=function(I,g,C,A,i){this.destination.next(g)},g.prototype.notifyError=function(I,g){this.destination.error(I)},g.prototype.notifyComplete=function(I){this.destination.complete()},g}(se),Dl=function(I){function g(g,C,A){var i=I.call(this)||this;return i.parent=g,i.outerValue=C,i.outerIndex=A,i.index=0,i}return qi(g,I),g.prototype._next=function(I){this.parent.notifyNext(this.outerValue,I,this.outerIndex,this.index++,this)},g.prototype._error=function(I){this.parent.notifyError(I,this),this.unsubscribe()},g.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},g}(se);function zl(){return"function"===typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Ml=zl(),Ul=function(I){return I&&"number"===typeof I.length&&"function"!==typeof I};function xl(I){return!!I&&"function"!==typeof I.subscribe&&"function"===typeof I.then}var Tl=function(I){if(I&&"function"===typeof I[me])return A=I,function(I){var g=A[me]();if("function"!==typeof g.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return g.subscribe(I)};if(Ul(I))return Le(I);if(xl(I))return C=I,function(I){return C.then((function(g){I.closed||(I.next(g),I.complete())}),(function(g){return I.error(g)})).then(null,Ae),I};if(I&&"function"===typeof I[Ml])return g=I,function(I){for(var C=g[Ml]();;){var A=void 0;try{A=C.next()}catch(i){return I.error(i),I}if(A.done){I.complete();break}if(I.next(A.value),I.closed)break}return"function"===typeof C.return&&I.add((function(){C.return&&C.return()})),I};var g,C,A,i=le(I)?"an invalid object":"'"+I+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Ql(I,g,C,A,i){if(void 0===i&&(i=new Dl(I,C,A)),!i.closed)return g instanceof Ge?g.subscribe(i):Tl(g)(i)}var Pl={};var Ol=function(){function I(I){this.resultSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new jl(I,this.resultSelector))},I}(),jl=function(I){function g(g,C){var A=I.call(this,g)||this;return A.resultSelector=C,A.active=0,A.values=[],A.observables=[],A}return qi(g,I),g.prototype._next=function(I){this.values.push(Pl),this.observables.push(I)},g.prototype._complete=function(){var I=this.observables,g=I.length;if(0===g)this.destination.complete();else{this.active=g,this.toRespond=g;for(var C=0;C<g;C++){var A=I[C];this.add(Ql(this,A,void 0,C))}}},g.prototype.notifyComplete=function(I){0===(this.active-=1)&&this.destination.complete()},g.prototype.notifyNext=function(I,g,C){var A=this.values,i=A[C],e=this.toRespond?i===Pl?--this.toRespond:this.toRespond:0;A[C]=g,0===e&&(this.resultSelector?this._tryResultSelector(A):this.destination.next(A.slice()))},g.prototype._tryResultSelector=function(I){var g;try{g=this.resultSelector.apply(this,I)}catch(C){return void this.destination.error(C)}this.destination.next(g)},g}(kl);function Ll(I,g){if(null!=I){if(function(I){return I&&"function"===typeof I[me]}(I))return function(I,g){return new Ge((function(C){var A=new ce;return A.add(g.schedule((function(){var i=I[me]();A.add(i.subscribe({next:function(I){A.add(g.schedule((function(){return C.next(I)})))},error:function(I){A.add(g.schedule((function(){return C.error(I)})))},complete:function(){A.add(g.schedule((function(){return C.complete()})))}}))}))),A}))}(I,g);if(xl(I))return function(I,g){return new Ge((function(C){var A=new ce;return A.add(g.schedule((function(){return I.then((function(I){A.add(g.schedule((function(){C.next(I),A.add(g.schedule((function(){return C.complete()})))})))}),(function(I){A.add(g.schedule((function(){return C.error(I)})))}))}))),A}))}(I,g);if(Ul(I))return Ee(I,g);if(function(I){return I&&"function"===typeof I[Ml]}(I)||"string"===typeof I)return function(I,g){if(!I)throw new Error("Iterable cannot be null");return new Ge((function(C){var A,i=new ce;return i.add((function(){A&&"function"===typeof A.return&&A.return()})),i.add(g.schedule((function(){A=I[Ml](),i.add(g.schedule((function(){if(!C.closed){var I,g;try{var i=A.next();I=i.value,g=i.done}catch(e){return void C.error(e)}g?C.complete():(C.next(I),this.schedule())}})))}))),i}))}(I,g)}throw new TypeError((null!==I&&typeof I||I)+" is not observable")}function El(I,g){return g?Ll(I,g):I instanceof Ge?I:new Ge(Tl(I))}var _l=function(I){function g(g){var C=I.call(this)||this;return C.parent=g,C}return qi(g,I),g.prototype._next=function(I){this.parent.notifyNext(I)},g.prototype._error=function(I){this.parent.notifyError(I),this.unsubscribe()},g.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},g}(se),$l=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g.prototype.notifyNext=function(I){this.destination.next(I)},g.prototype.notifyError=function(I){this.destination.error(I)},g.prototype.notifyComplete=function(){this.destination.complete()},g}(se);function ql(I,g){if(!g.closed){if(I instanceof Ge)return I.subscribe(g);var C;try{C=Tl(I)(g)}catch(A){g.error(A)}return C}}function Io(I,g,C){return void 0===C&&(C=Number.POSITIVE_INFINITY),"function"===typeof g?function(A){return A.pipe(Io((function(C,A){return El(I(C,A)).pipe(fl((function(I,i){return g(C,I,A,i)})))}),C))}:("number"===typeof g&&(C=g),function(g){return g.lift(new go(I,C))})}var go=function(){function I(I,g){void 0===g&&(g=Number.POSITIVE_INFINITY),this.project=I,this.concurrent=g}return I.prototype.call=function(I,g){return g.subscribe(new Co(I,this.project,this.concurrent))},I}(),Co=function(I){function g(g,C,A){void 0===A&&(A=Number.POSITIVE_INFINITY);var i=I.call(this,g)||this;return i.project=C,i.concurrent=A,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return qi(g,I),g.prototype._next=function(I){this.active<this.concurrent?this._tryNext(I):this.buffer.push(I)},g.prototype._tryNext=function(I){var g,C=this.index++;try{g=this.project(I,C)}catch(A){return void this.destination.error(A)}this.active++,this._innerSub(g)},g.prototype._innerSub=function(I){var g=new _l(this),C=this.destination;C.add(g);var A=ql(I,g);A!==g&&C.add(A)},g.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},g.prototype.notifyNext=function(I){this.destination.next(I)},g.prototype.notifyComplete=function(){var I=this.buffer;this.active--,I.length>0?this._next(I.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},g}($l),Ao=Io;function io(I){return void 0===I&&(I=Number.POSITIVE_INFINITY),Io(be,I)}function eo(){return io(1)}function lo(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return eo()($e.apply(void 0,I))}function oo(I){return new Ge((function(g){var C;try{C=I()}catch(A){return void g.error(A)}return(C?El(C):Pe()).subscribe(g)}))}function to(I,g){return new Ge((function(C){var A=I.length;if(0!==A)for(var i=new Array(A),e=0,l=0,o=function(o){var t=El(I[o]),c=!1;C.add(t.subscribe({next:function(I){c||(c=!0,l++),i[o]=I},error:function(I){return C.error(I)},complete:function(){++e!==A&&c||(l===A&&C.next(g?g.reduce((function(I,g,C){return I[g]=i[C],I}),{}):i),C.complete())}}))},t=0;t<A;t++)o(t);else C.complete()}))}function co(I,g,C,A,i){var e;if(function(I){return I&&"function"===typeof I.addEventListener&&"function"===typeof I.removeEventListener}(I)){var l=I;I.addEventListener(g,C,i),e=function(){return l.removeEventListener(g,C,i)}}else if(function(I){return I&&"function"===typeof I.on&&"function"===typeof I.off}(I)){var o=I;I.on(g,C),e=function(){return o.off(g,C)}}else if(function(I){return I&&"function"===typeof I.addListener&&"function"===typeof I.removeListener}(I)){var t=I;I.addListener(g,C),e=function(){return t.removeListener(g,C)}}else{if(!I||!I.length)throw new TypeError("Invalid event target");for(var c=0,n=I.length;c<n;c++)co(I[c],g,C,A,i)}A.add(e)}function no(I){var g=I.subscriber,C=I.condition;if(!g.closed){if(I.needIterate)try{I.state=I.iterate(I.state)}catch(e){return void g.error(e)}else I.needIterate=!0;if(C){var A=void 0;try{A=C(I.state)}catch(e){return void g.error(e)}if(!A)return void g.complete();if(g.closed)return}var i;try{i=I.resultSelector(I.state)}catch(e){return void g.error(e)}if(!g.closed&&(g.next(i),!g.closed))return this.schedule(I)}}function so(I){return!ee(I)&&I-parseFloat(I)+1>=0}function ao(I){var g=I.subscriber,C=I.counter,A=I.period;g.next(C),this.schedule({subscriber:g,counter:C+1,period:A},A)}function Zo(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=Number.POSITIVE_INFINITY,A=null,i=I[I.length-1];return Oe(i)?(A=I.pop(),I.length>1&&"number"===typeof I[I.length-1]&&(C=I.pop())):"number"===typeof i&&(C=I.pop()),null===A&&1===I.length&&I[0]instanceof Ge?I[0]:io(C)(_e(I,A))}var mo=new Ge(Wl);function bo(I){var g=I.keys,C=I.index,A=I.subscriber,i=I.subscription,e=I.obj;if(!A.closed)if(C<g.length){var l=g[C];A.next([l,e[l]]),i.add(this.schedule({keys:g,index:C+1,subscriber:A,subscription:i,obj:e}))}else A.complete()}function ro(I,g){function C(){return!C.pred.apply(C.thisArg,arguments)}return C.pred=I,C.thisArg=g,C}function ho(I,g){return function(C){return C.lift(new Go(I,g))}}var Go=function(){function I(I,g){this.predicate=I,this.thisArg=g}return I.prototype.call=function(I,g){return g.subscribe(new uo(I,this.predicate,this.thisArg))},I}(),uo=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.predicate=C,i.thisArg=A,i.count=0,i}return qi(g,I),g.prototype._next=function(I){var g;try{g=this.predicate.call(this.thisArg,I,this.count++)}catch(C){return void this.destination.error(C)}g&&this.destination.next(I)},g}(se);function yo(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];if(1===I.length){if(!ee(I[0]))return I[0];I=I[0]}return _e(I,void 0).lift(new Bo)}var Bo=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new Vo(I))},I}(),Vo=function(I){function g(g){var C=I.call(this,g)||this;return C.hasFirst=!1,C.observables=[],C.subscriptions=[],C}return qi(g,I),g.prototype._next=function(I){this.observables.push(I)},g.prototype._complete=function(){var I=this.observables,g=I.length;if(0===g)this.destination.complete();else{for(var C=0;C<g&&!this.hasFirst;C++){var A=Ql(this,I[C],void 0,C);this.subscriptions&&this.subscriptions.push(A),this.add(A)}this.observables=null}},g.prototype.notifyNext=function(I,g,C){if(!this.hasFirst){this.hasFirst=!0;for(var A=0;A<this.subscriptions.length;A++)if(A!==C){var i=this.subscriptions[A];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(g)},g}(kl);function po(I){var g=I.start,C=I.index,A=I.count,i=I.subscriber;C>=A?i.complete():(i.next(g),i.closed||(I.index=C+1,I.start=g+1,this.schedule(I)))}function Xo(I,g,C){void 0===I&&(I=0);var A=-1;return so(g)?A=Number(g)<1?1:Number(g):Oe(g)&&(C=g),Oe(C)||(C=Gl),new Ge((function(g){var i=so(I)?I:+I-C.now();return C.schedule(Wo,i,{index:0,period:A,subscriber:g})}))}function Wo(I){var g=I.index,C=I.period,A=I.subscriber;if(A.next(g),!A.closed){if(-1===C)return A.complete();I.index=g+1,this.schedule(I,C)}}function Ho(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=I[I.length-1];return"function"===typeof C&&I.pop(),_e(I,void 0).lift(new Yo(C))}var Yo=function(){function I(I){this.resultSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new Ro(I,this.resultSelector))},I}(),Ro=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.resultSelector=C,i.iterators=[],i.active=0,i.resultSelector="function"===typeof C?C:void 0,i}return qi(g,I),g.prototype._next=function(I){var g=this.iterators;ee(I)?g.push(new Ko(I)):"function"===typeof I[Ml]?g.push(new fo(I[Ml]())):g.push(new wo(this.destination,this,I))},g.prototype._complete=function(){var I=this.iterators,g=I.length;if(this.unsubscribe(),0!==g){this.active=g;for(var C=0;C<g;C++){var A=I[C];if(A.stillUnsubscribed)this.destination.add(A.subscribe());else this.active--}}else this.destination.complete()},g.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},g.prototype.checkIterators=function(){for(var I=this.iterators,g=I.length,C=this.destination,A=0;A<g;A++){if("function"===typeof(l=I[A]).hasValue&&!l.hasValue())return}var i=!1,e=[];for(A=0;A<g;A++){var l,o=(l=I[A]).next();if(l.hasCompleted()&&(i=!0),o.done)return void C.complete();e.push(o.value)}this.resultSelector?this._tryresultSelector(e):C.next(e),i&&C.complete()},g.prototype._tryresultSelector=function(I){var g;try{g=this.resultSelector.apply(this,I)}catch(C){return void this.destination.error(C)}this.destination.next(g)},g}(se),fo=function(){function I(I){this.iterator=I,this.nextResult=I.next()}return I.prototype.hasValue=function(){return!0},I.prototype.next=function(){var I=this.nextResult;return this.nextResult=this.iterator.next(),I},I.prototype.hasCompleted=function(){var I=this.nextResult;return Boolean(I&&I.done)},I}(),Ko=function(){function I(I){this.array=I,this.index=0,this.length=0,this.length=I.length}return I.prototype[Ml]=function(){return this},I.prototype.next=function(I){var g=this.index++,C=this.array;return g<this.length?{value:C[g],done:!1}:{value:null,done:!0}},I.prototype.hasValue=function(){return this.array.length>this.index},I.prototype.hasCompleted=function(){return this.array.length===this.index},I}(),wo=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.parent=C,i.observable=A,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return qi(g,I),g.prototype[Ml]=function(){return this},g.prototype.next=function(){var I=this.buffer;return 0===I.length&&this.isComplete?{value:null,done:!0}:{value:I.shift(),done:!1}},g.prototype.hasValue=function(){return this.buffer.length>0},g.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},g.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},g.prototype.notifyNext=function(I){this.buffer.push(I),this.parent.checkIterators()},g.prototype.subscribe=function(){return ql(this.observable,new _l(this))},g}($l),Jo=Object.freeze(Object.defineProperty({__proto__:null,Observable:Ge,ConnectableObservable:Re,GroupedObservable:Fe,observable:me,Subject:pe,BehaviorSubject:ve,ReplaySubject:el,AsyncSubject:ol,asap:rl,asapScheduler:bl,async:Gl,asyncScheduler:hl,queue:Te,queueScheduler:xe,animationFrame:Vl,animationFrameScheduler:Bl,VirtualTimeScheduler:pl,VirtualAction:Xl,Scheduler:ze,Subscription:ce,Subscriber:se,Notification:gl,get NotificationKind(){return je},pipe:re,noop:Wl,identity:be,isObservable:function(I){return!!I&&(I instanceof Ge||"function"===typeof I.lift&&"function"===typeof I.subscribe)},ArgumentOutOfRangeError:Hl,EmptyError:Yl,ObjectUnsubscribedError:ye,UnsubscriptionError:te,TimeoutError:Rl,bindCallback:function I(g,C,A){if(C){if(!Oe(C))return function(){for(var i=[],e=0;e<arguments.length;e++)i[e]=arguments[e];return I(g,A).apply(void 0,i).pipe(fl((function(I){return ee(I)?C.apply(void 0,I):C(I)})))};A=C}return function(){for(var I=[],C=0;C<arguments.length;C++)I[C]=arguments[C];var i,e=this,l={context:e,subject:i,callbackFunc:g,scheduler:A};return new Ge((function(C){if(A){var o={args:I,subscriber:C,params:l};return A.schedule(Jl,0,o)}if(!i){i=new ol;try{g.apply(e,I.concat([function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];i.next(I.length<=1?I[0]:I),i.complete()}]))}catch(t){Ze(i)?i.error(t):console.warn(t)}}return i.subscribe(C)}))}},bindNodeCallback:function I(g,C,A){if(C){if(!Oe(C))return function(){for(var i=[],e=0;e<arguments.length;e++)i[e]=arguments[e];return I(g,A).apply(void 0,i).pipe(fl((function(I){return ee(I)?C.apply(void 0,I):C(I)})))};A=C}return function(){for(var I=[],C=0;C<arguments.length;C++)I[C]=arguments[C];var i={subject:void 0,args:I,callbackFunc:g,scheduler:A,context:this};return new Ge((function(C){var e=i.context,l=i.subject;if(A)return A.schedule(Fl,0,{params:i,subscriber:C,context:e});if(!l){l=i.subject=new ol;try{g.apply(e,I.concat([function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=I.shift();C?l.error(C):(l.next(I.length<=1?I[0]:I),l.complete())}]))}catch(o){Ze(l)?l.error(o):console.warn(o)}}return l.subscribe(C)}))}},combineLatest:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=void 0,A=void 0;return Oe(I[I.length-1])&&(A=I.pop()),"function"===typeof I[I.length-1]&&(C=I.pop()),1===I.length&&ee(I[0])&&(I=I[0]),_e(I,A).lift(new Ol(C))},concat:lo,defer:oo,empty:Pe,forkJoin:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];if(1===I.length){var C=I[0];if(ee(C))return to(C,null);if(le(C)&&Object.getPrototypeOf(C)===Object.prototype){var A=Object.keys(C);return to(A.map((function(I){return C[I]})),A)}}if("function"===typeof I[I.length-1]){var i=I.pop();return to(I=1===I.length&&ee(I[0])?I[0]:I,null).pipe(fl((function(I){return i.apply(void 0,I)})))}return to(I,null)},from:El,fromEvent:function I(g,C,A,i){return Ie(A)&&(i=A,A=void 0),i?I(g,C,A).pipe(fl((function(I){return ee(I)?i.apply(void 0,I):i(I)}))):new Ge((function(I){co(g,C,(function(g){arguments.length>1?I.next(Array.prototype.slice.call(arguments)):I.next(g)}),I,A)}))},fromEventPattern:function I(g,C,A){return A?I(g,C).pipe(fl((function(I){return ee(I)?A.apply(void 0,I):A(I)}))):new Ge((function(I){var A,i=function(){for(var g=[],C=0;C<arguments.length;C++)g[C]=arguments[C];return I.next(1===g.length?g[0]:g)};try{A=g(i)}catch(e){return void I.error(e)}if(Ie(C))return function(){return C(i,A)}}))},generate:function(I,g,C,A,i){var e,l;if(1==arguments.length){var o=I;l=o.initialState,g=o.condition,C=o.iterate,e=o.resultSelector||be,i=o.scheduler}else void 0===A||Oe(A)?(l=I,e=be,i=A):(l=I,e=A);return new Ge((function(I){var A=l;if(i)return i.schedule(no,0,{subscriber:I,iterate:C,condition:g,resultSelector:e,state:A});for(;;){if(g){var o=void 0;try{o=g(A)}catch(c){return void I.error(c)}if(!o){I.complete();break}}var t=void 0;try{t=e(A)}catch(c){return void I.error(c)}if(I.next(t),I.closed)break;try{A=C(A)}catch(c){return void I.error(c)}}}))},iif:function(I,g,C){return void 0===g&&(g=Qe),void 0===C&&(C=Qe),oo((function(){return I()?g:C}))},interval:function(I,g){return void 0===I&&(I=0),void 0===g&&(g=Gl),(!so(I)||I<0)&&(I=0),g&&"function"===typeof g.schedule||(g=Gl),new Ge((function(C){return C.add(g.schedule(ao,I,{subscriber:C,counter:0,period:I})),C}))},merge:Zo,never:function(){return mo},of:$e,onErrorResumeNext:function I(){for(var g=[],C=0;C<arguments.length;C++)g[C]=arguments[C];if(0===g.length)return Qe;var A=g[0],i=g.slice(1);return 1===g.length&&ee(A)?I.apply(void 0,A):new Ge((function(g){var C=function(){return g.add(I.apply(void 0,i).subscribe(g))};return El(A).subscribe({next:function(I){g.next(I)},error:C,complete:C})}))},pairs:function(I,g){return new Ge(g?function(C){var A=Object.keys(I),i=new ce;return i.add(g.schedule(bo,0,{keys:A,index:0,subscriber:C,subscription:i,obj:I})),i}:function(g){for(var C=Object.keys(I),A=0;A<C.length&&!g.closed;A++){var i=C[A];I.hasOwnProperty(i)&&g.next([i,I[i]])}g.complete()})},partition:function(I,g,C){return[ho(g,C)(new Ge(Tl(I))),ho(ro(g,C))(new Ge(Tl(I)))]},race:yo,range:function(I,g,C){return void 0===I&&(I=0),new Ge((function(A){void 0===g&&(g=I,I=0);var i=0,e=I;if(C)return C.schedule(po,0,{index:i,count:g,start:I,subscriber:A});for(;;){if(i++>=g){A.complete();break}if(A.next(e++),A.closed)break}}))},throwError:qe,timer:Xo,using:function(I,g){return new Ge((function(C){var A,i;try{A=I()}catch(l){return void C.error(l)}try{i=g(A)}catch(l){return void C.error(l)}var e=(i?El(i):Qe).subscribe(C);return function(){e.unsubscribe(),A&&A.unsubscribe()}}))},zip:Ho,scheduled:Ll,EMPTY:Qe,NEVER:mo,config:Ce},Symbol.toStringTag,{value:"Module"})),So=aC(Jo);function Fo(I){return function(g){return g.lift(new No(I))}}var No=function(){function I(I){this.durationSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new vo(I,this.durationSelector))},I}(),vo=function(I){function g(g,C){var A=I.call(this,g)||this;return A.durationSelector=C,A.hasValue=!1,A}return qi(g,I),g.prototype._next=function(I){if(this.value=I,this.hasValue=!0,!this.throttled){var g=void 0;try{g=(0,this.durationSelector)(I)}catch(A){return this.destination.error(A)}var C=ql(g,new _l(this));!C||C.closed?this.clearThrottle():this.add(this.throttled=C)}},g.prototype.clearThrottle=function(){var I=this,g=I.value,C=I.hasValue,A=I.throttled;A&&(this.remove(A),this.throttled=void 0,A.unsubscribe()),C&&(this.value=void 0,this.hasValue=!1,this.destination.next(g))},g.prototype.notifyNext=function(){this.clearThrottle()},g.prototype.notifyComplete=function(){this.clearThrottle()},g}($l);var ko=function(){function I(I){this.closingNotifier=I}return I.prototype.call=function(I,g){return g.subscribe(new Do(I,this.closingNotifier))},I}(),Do=function(I){function g(g,C){var A=I.call(this,g)||this;return A.buffer=[],A.add(ql(C,new _l(A))),A}return qi(g,I),g.prototype._next=function(I){this.buffer.push(I)},g.prototype.notifyNext=function(){var I=this.buffer;this.buffer=[],this.destination.next(I)},g}($l);var zo=function(){function I(I,g){this.bufferSize=I,this.startBufferEvery=g,this.subscriberClass=g&&I!==g?Uo:Mo}return I.prototype.call=function(I,g){return g.subscribe(new this.subscriberClass(I,this.bufferSize,this.startBufferEvery))},I}(),Mo=function(I){function g(g,C){var A=I.call(this,g)||this;return A.bufferSize=C,A.buffer=[],A}return qi(g,I),g.prototype._next=function(I){var g=this.buffer;g.push(I),g.length==this.bufferSize&&(this.destination.next(g),this.buffer=[])},g.prototype._complete=function(){var g=this.buffer;g.length>0&&this.destination.next(g),I.prototype._complete.call(this)},g}(se),Uo=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.bufferSize=C,i.startBufferEvery=A,i.buffers=[],i.count=0,i}return qi(g,I),g.prototype._next=function(I){var g=this,C=g.bufferSize,A=g.startBufferEvery,i=g.buffers,e=g.count;this.count++,e%A===0&&i.push([]);for(var l=i.length;l--;){var o=i[l];o.push(I),o.length===C&&(i.splice(l,1),this.destination.next(o))}},g.prototype._complete=function(){for(var g=this.buffers,C=this.destination;g.length>0;){var A=g.shift();A.length>0&&C.next(A)}I.prototype._complete.call(this)},g}(se);var xo=function(){function I(I,g,C,A){this.bufferTimeSpan=I,this.bufferCreationInterval=g,this.maxBufferSize=C,this.scheduler=A}return I.prototype.call=function(I,g){return g.subscribe(new Qo(I,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},I}(),To=function(){return function(){this.buffer=[]}}(),Qo=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;l.bufferTimeSpan=C,l.bufferCreationInterval=A,l.maxBufferSize=i,l.scheduler=e,l.contexts=[];var o=l.openContext();if(l.timespanOnly=null==A||A<0,l.timespanOnly){var t={subscriber:l,context:o,bufferTimeSpan:C};l.add(o.closeAction=e.schedule(Po,C,t))}else{var c={subscriber:l,context:o},n={bufferTimeSpan:C,bufferCreationInterval:A,subscriber:l,scheduler:e};l.add(o.closeAction=e.schedule(jo,C,c)),l.add(e.schedule(Oo,A,n))}return l}return qi(g,I),g.prototype._next=function(I){for(var g,C=this.contexts,A=C.length,i=0;i<A;i++){var e=C[i],l=e.buffer;l.push(I),l.length==this.maxBufferSize&&(g=e)}g&&this.onBufferFull(g)},g.prototype._error=function(g){this.contexts.length=0,I.prototype._error.call(this,g)},g.prototype._complete=function(){for(var g=this.contexts,C=this.destination;g.length>0;){var A=g.shift();C.next(A.buffer)}I.prototype._complete.call(this)},g.prototype._unsubscribe=function(){this.contexts=null},g.prototype.onBufferFull=function(I){this.closeContext(I);var g=I.closeAction;if(g.unsubscribe(),this.remove(g),!this.closed&&this.timespanOnly){I=this.openContext();var C=this.bufferTimeSpan,A={subscriber:this,context:I,bufferTimeSpan:C};this.add(I.closeAction=this.scheduler.schedule(Po,C,A))}},g.prototype.openContext=function(){var I=new To;return this.contexts.push(I),I},g.prototype.closeContext=function(I){this.destination.next(I.buffer);var g=this.contexts;(g?g.indexOf(I):-1)>=0&&g.splice(g.indexOf(I),1)},g}(se);function Po(I){var g=I.subscriber,C=I.context;C&&g.closeContext(C),g.closed||(I.context=g.openContext(),I.context.closeAction=this.schedule(I,I.bufferTimeSpan))}function Oo(I){var g=I.bufferCreationInterval,C=I.bufferTimeSpan,A=I.subscriber,i=I.scheduler,e=A.openContext();A.closed||(A.add(e.closeAction=i.schedule(jo,C,{subscriber:A,context:e})),this.schedule(I,g))}function jo(I){var g=I.subscriber,C=I.context;g.closeContext(C)}var Lo=function(){function I(I,g){this.openings=I,this.closingSelector=g}return I.prototype.call=function(I,g){return g.subscribe(new Eo(I,this.openings,this.closingSelector))},I}(),Eo=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.closingSelector=A,i.contexts=[],i.add(Ql(i,C)),i}return qi(g,I),g.prototype._next=function(I){for(var g=this.contexts,C=g.length,A=0;A<C;A++)g[A].buffer.push(I)},g.prototype._error=function(g){for(var C=this.contexts;C.length>0;){var A=C.shift();A.subscription.unsubscribe(),A.buffer=null,A.subscription=null}this.contexts=null,I.prototype._error.call(this,g)},g.prototype._complete=function(){for(var g=this.contexts;g.length>0;){var C=g.shift();this.destination.next(C.buffer),C.subscription.unsubscribe(),C.buffer=null,C.subscription=null}this.contexts=null,I.prototype._complete.call(this)},g.prototype.notifyNext=function(I,g){I?this.closeBuffer(I):this.openBuffer(g)},g.prototype.notifyComplete=function(I){this.closeBuffer(I.context)},g.prototype.openBuffer=function(I){try{var g=this.closingSelector.call(this,I);g&&this.trySubscribe(g)}catch(C){this._error(C)}},g.prototype.closeBuffer=function(I){var g=this.contexts;if(g&&I){var C=I.buffer,A=I.subscription;this.destination.next(C),g.splice(g.indexOf(I),1),this.remove(A),A.unsubscribe()}},g.prototype.trySubscribe=function(I){var g=this.contexts,C=new ce,A={buffer:[],subscription:C};g.push(A);var i=Ql(this,I,A);!i||i.closed?this.closeBuffer(A):(i.context=A,this.add(i),C.add(i))},g}(kl);var _o=function(){function I(I){this.closingSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new $o(I,this.closingSelector))},I}(),$o=function(I){function g(g,C){var A=I.call(this,g)||this;return A.closingSelector=C,A.subscribing=!1,A.openBuffer(),A}return qi(g,I),g.prototype._next=function(I){this.buffer.push(I)},g.prototype._complete=function(){var g=this.buffer;g&&this.destination.next(g),I.prototype._complete.call(this)},g.prototype._unsubscribe=function(){this.buffer=void 0,this.subscribing=!1},g.prototype.notifyNext=function(){this.openBuffer()},g.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},g.prototype.openBuffer=function(){var I=this.closingSubscription;I&&(this.remove(I),I.unsubscribe());var g,C=this.buffer;this.buffer&&this.destination.next(C),this.buffer=[];try{g=(0,this.closingSelector)()}catch(A){return this.error(A)}I=new ce,this.closingSubscription=I,this.add(I),this.subscribing=!0,I.add(ql(g,new _l(this))),this.subscribing=!1},g}($l);var qo=function(){function I(I){this.selector=I}return I.prototype.call=function(I,g){return g.subscribe(new It(I,this.selector,this.caught))},I}(),It=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.selector=C,i.caught=A,i}return qi(g,I),g.prototype.error=function(g){if(!this.isStopped){var C=void 0;try{C=this.selector(g,this.caught)}catch(e){return void I.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var A=new _l(this);this.add(A);var i=ql(C,A);i!==A&&this.add(i)}},g}($l);function gt(I,g){return Io(I,g,1)}var Ct=function(){function I(I,g){this.predicate=I,this.source=g}return I.prototype.call=function(I,g){return g.subscribe(new At(I,this.predicate,this.source))},I}(),At=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.predicate=C,i.source=A,i.count=0,i.index=0,i}return qi(g,I),g.prototype._next=function(I){this.predicate?this._tryPredicate(I):this.count++},g.prototype._tryPredicate=function(I){var g;try{g=this.predicate(I,this.index++,this.source)}catch(C){return void this.destination.error(C)}g&&this.count++},g.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},g}(se);var it=function(){function I(I){this.durationSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new et(I,this.durationSelector))},I}(),et=function(I){function g(g,C){var A=I.call(this,g)||this;return A.durationSelector=C,A.hasValue=!1,A}return qi(g,I),g.prototype._next=function(I){try{var g=this.durationSelector.call(this,I);g&&this._tryNext(I,g)}catch(C){this.destination.error(C)}},g.prototype._complete=function(){this.emitValue(),this.destination.complete()},g.prototype._tryNext=function(I,g){var C=this.durationSubscription;this.value=I,this.hasValue=!0,C&&(C.unsubscribe(),this.remove(C)),(C=ql(g,new _l(this)))&&!C.closed&&this.add(this.durationSubscription=C)},g.prototype.notifyNext=function(){this.emitValue()},g.prototype.notifyComplete=function(){this.emitValue()},g.prototype.emitValue=function(){if(this.hasValue){var g=this.value,C=this.durationSubscription;C&&(this.durationSubscription=void 0,C.unsubscribe(),this.remove(C)),this.value=void 0,this.hasValue=!1,I.prototype._next.call(this,g)}},g}($l);var lt=function(){function I(I,g){this.dueTime=I,this.scheduler=g}return I.prototype.call=function(I,g){return g.subscribe(new ot(I,this.dueTime,this.scheduler))},I}(),ot=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.dueTime=C,i.scheduler=A,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return qi(g,I),g.prototype._next=function(I){this.clearDebounce(),this.lastValue=I,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(tt,this.dueTime,this))},g.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},g.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var I=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(I)}},g.prototype.clearDebounce=function(){var I=this.debouncedSubscription;null!==I&&(this.remove(I),I.unsubscribe(),this.debouncedSubscription=null)},g}(se);function tt(I){I.debouncedNext()}function ct(I){return void 0===I&&(I=null),function(g){return g.lift(new nt(I))}}var nt=function(){function I(I){this.defaultValue=I}return I.prototype.call=function(I,g){return g.subscribe(new dt(I,this.defaultValue))},I}(),dt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.defaultValue=C,A.isEmpty=!0,A}return qi(g,I),g.prototype._next=function(I){this.isEmpty=!1,this.destination.next(I)},g.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},g}(se);function st(I){return I instanceof Date&&!isNaN(+I)}var at=function(){function I(I,g){this.delay=I,this.scheduler=g}return I.prototype.call=function(I,g){return g.subscribe(new Zt(I,this.delay,this.scheduler))},I}(),Zt=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.delay=C,i.scheduler=A,i.queue=[],i.active=!1,i.errored=!1,i}return qi(g,I),g.dispatch=function(I){for(var g=I.source,C=g.queue,A=I.scheduler,i=I.destination;C.length>0&&C[0].time-A.now()<=0;)C.shift().notification.observe(i);if(C.length>0){var e=Math.max(0,C[0].time-A.now());this.schedule(I,e)}else this.unsubscribe(),g.active=!1},g.prototype._schedule=function(I){this.active=!0,this.destination.add(I.schedule(g.dispatch,this.delay,{source:this,destination:this.destination,scheduler:I}))},g.prototype.scheduleNotification=function(I){if(!0!==this.errored){var g=this.scheduler,C=new mt(g.now()+this.delay,I);this.queue.push(C),!1===this.active&&this._schedule(g)}},g.prototype._next=function(I){this.scheduleNotification(gl.createNext(I))},g.prototype._error=function(I){this.errored=!0,this.queue=[],this.destination.error(I),this.unsubscribe()},g.prototype._complete=function(){this.scheduleNotification(gl.createComplete()),this.unsubscribe()},g}(se),mt=function(){return function(I,g){this.time=I,this.notification=g}}();var bt=function(){function I(I){this.delayDurationSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new rt(I,this.delayDurationSelector))},I}(),rt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.delayDurationSelector=C,A.completed=!1,A.delayNotifierSubscriptions=[],A.index=0,A}return qi(g,I),g.prototype.notifyNext=function(I,g,C,A,i){this.destination.next(I),this.removeSubscription(i),this.tryComplete()},g.prototype.notifyError=function(I,g){this._error(I)},g.prototype.notifyComplete=function(I){var g=this.removeSubscription(I);g&&this.destination.next(g),this.tryComplete()},g.prototype._next=function(I){var g=this.index++;try{var C=this.delayDurationSelector(I,g);C&&this.tryDelay(C,I)}catch(A){this.destination.error(A)}},g.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},g.prototype.removeSubscription=function(I){I.unsubscribe();var g=this.delayNotifierSubscriptions.indexOf(I);return-1!==g&&this.delayNotifierSubscriptions.splice(g,1),I.outerValue},g.prototype.tryDelay=function(I,g){var C=Ql(this,I,g);C&&!C.closed&&(this.destination.add(C),this.delayNotifierSubscriptions.push(C))},g.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},g}(kl),ht=function(I){function g(g,C){var A=I.call(this)||this;return A.source=g,A.subscriptionDelay=C,A}return qi(g,I),g.prototype._subscribe=function(I){this.subscriptionDelay.subscribe(new Gt(I,this.source))},g}(Ge),Gt=function(I){function g(g,C){var A=I.call(this)||this;return A.parent=g,A.source=C,A.sourceSubscribed=!1,A}return qi(g,I),g.prototype._next=function(I){this.subscribeToSource()},g.prototype._error=function(I){this.unsubscribe(),this.parent.error(I)},g.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},g.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},g}(se);var ut=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new yt(I))},I}(),yt=function(I){function g(g){return I.call(this,g)||this}return qi(g,I),g.prototype._next=function(I){I.observe(this.destination)},g}(se);var Bt=function(){function I(I,g){this.keySelector=I,this.flushes=g}return I.prototype.call=function(I,g){return g.subscribe(new Vt(I,this.keySelector,this.flushes))},I}(),Vt=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.keySelector=C,i.values=new Set,A&&i.add(ql(A,new _l(i))),i}return qi(g,I),g.prototype.notifyNext=function(){this.values.clear()},g.prototype.notifyError=function(I){this._error(I)},g.prototype._next=function(I){this.keySelector?this._useKeySelector(I):this._finalizeNext(I,I)},g.prototype._useKeySelector=function(I){var g,C=this.destination;try{g=this.keySelector(I)}catch(A){return void C.error(A)}this._finalizeNext(g,I)},g.prototype._finalizeNext=function(I,g){var C=this.values;C.has(I)||(C.add(I),this.destination.next(g))},g}($l);function pt(I,g){return function(C){return C.lift(new Xt(I,g))}}var Xt=function(){function I(I,g){this.compare=I,this.keySelector=g}return I.prototype.call=function(I,g){return g.subscribe(new Wt(I,this.compare,this.keySelector))},I}(),Wt=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.keySelector=A,i.hasKey=!1,"function"===typeof C&&(i.compare=C),i}return qi(g,I),g.prototype.compare=function(I,g){return I===g},g.prototype._next=function(I){var g;try{var C=this.keySelector;g=C?C(I):I}catch(i){return this.destination.error(i)}var A=!1;if(this.hasKey)try{A=(0,this.compare)(this.key,g)}catch(i){return this.destination.error(i)}else this.hasKey=!0;A||(this.key=g,this.destination.next(I))},g}(se);function Ht(I){return void 0===I&&(I=ft),function(g){return g.lift(new Yt(I))}}var Yt=function(){function I(I){this.errorFactory=I}return I.prototype.call=function(I,g){return g.subscribe(new Rt(I,this.errorFactory))},I}(),Rt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.errorFactory=C,A.hasValue=!1,A}return qi(g,I),g.prototype._next=function(I){this.hasValue=!0,this.destination.next(I)},g.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var I=void 0;try{I=this.errorFactory()}catch(im){I=im}this.destination.error(I)},g}(se);function ft(){return new Yl}function Kt(I){return function(g){return 0===I?Pe():g.lift(new wt(I))}}var wt=function(){function I(I){if(this.total=I,this.total<0)throw new Hl}return I.prototype.call=function(I,g){return g.subscribe(new Jt(I,this.total))},I}(),Jt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.total=C,A.count=0,A}return qi(g,I),g.prototype._next=function(I){var g=this.total,C=++this.count;C<=g&&(this.destination.next(I),C===g&&(this.destination.complete(),this.unsubscribe()))},g}(se);var St=function(){function I(I,g,C){this.predicate=I,this.thisArg=g,this.source=C}return I.prototype.call=function(I,g){return g.subscribe(new Ft(I,this.predicate,this.thisArg,this.source))},I}(),Ft=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e.predicate=C,e.thisArg=A,e.source=i,e.index=0,e.thisArg=A||e,e}return qi(g,I),g.prototype.notifyComplete=function(I){this.destination.next(I),this.destination.complete()},g.prototype._next=function(I){var g=!1;try{g=this.predicate.call(this.thisArg,I,this.index++,this.source)}catch(C){return void this.destination.error(C)}g||this.notifyComplete(!1)},g.prototype._complete=function(){this.notifyComplete(!0)},g}(se);var Nt=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new vt(I))},I}(),vt=function(I){function g(g){var C=I.call(this,g)||this;return C.hasCompleted=!1,C.hasSubscription=!1,C}return qi(g,I),g.prototype._next=function(I){this.hasSubscription||(this.hasSubscription=!0,this.add(ql(I,new _l(this))))},g.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},g.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},g}($l);var kt=function(){function I(I){this.project=I}return I.prototype.call=function(I,g){return g.subscribe(new Dt(I,this.project))},I}(),Dt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.project=C,A.hasSubscription=!1,A.hasCompleted=!1,A.index=0,A}return qi(g,I),g.prototype._next=function(I){this.hasSubscription||this.tryNext(I)},g.prototype.tryNext=function(I){var g,C=this.index++;try{g=this.project(I,C)}catch(A){return void this.destination.error(A)}this.hasSubscription=!0,this._innerSub(g)},g.prototype._innerSub=function(I){var g=new _l(this),C=this.destination;C.add(g);var A=ql(I,g);A!==g&&C.add(A)},g.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},g.prototype.notifyNext=function(I){this.destination.next(I)},g.prototype.notifyError=function(I){this.destination.error(I)},g.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},g}($l);var zt=function(){function I(I,g,C){this.project=I,this.concurrent=g,this.scheduler=C}return I.prototype.call=function(I,g){return g.subscribe(new Mt(I,this.project,this.concurrent,this.scheduler))},I}(),Mt=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e.project=C,e.concurrent=A,e.scheduler=i,e.index=0,e.active=0,e.hasCompleted=!1,A<Number.POSITIVE_INFINITY&&(e.buffer=[]),e}return qi(g,I),g.dispatch=function(I){var g=I.subscriber,C=I.result,A=I.value,i=I.index;g.subscribeToProjection(C,A,i)},g.prototype._next=function(I){var C=this.destination;if(C.closed)this._complete();else{var A=this.index++;if(this.active<this.concurrent){C.next(I);try{var i=(0,this.project)(I,A);if(this.scheduler){var e={subscriber:this,result:i,value:I,index:A};this.destination.add(this.scheduler.schedule(g.dispatch,0,e))}else this.subscribeToProjection(i,I,A)}catch(im){C.error(im)}}else this.buffer.push(I)}},g.prototype.subscribeToProjection=function(I,g,C){this.active++,this.destination.add(ql(I,new _l(this)))},g.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},g.prototype.notifyNext=function(I){this._next(I)},g.prototype.notifyComplete=function(){var I=this.buffer;this.active--,I&&I.length>0&&this._next(I.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},g}($l);var Ut=function(){function I(I){this.callback=I}return I.prototype.call=function(I,g){return g.subscribe(new xt(I,this.callback))},I}(),xt=function(I){function g(g,C){var A=I.call(this,g)||this;return A.add(new ce(C)),A}return qi(g,I),g}(se);var Tt=function(){function I(I,g,C,A){this.predicate=I,this.source=g,this.yieldIndex=C,this.thisArg=A}return I.prototype.call=function(I,g){return g.subscribe(new Qt(I,this.predicate,this.source,this.yieldIndex,this.thisArg))},I}(),Qt=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;return l.predicate=C,l.source=A,l.yieldIndex=i,l.thisArg=e,l.index=0,l}return qi(g,I),g.prototype.notifyComplete=function(I){var g=this.destination;g.next(I),g.complete(),this.unsubscribe()},g.prototype._next=function(I){var g=this.predicate,C=this.thisArg,A=this.index++;try{g.call(C||this,I,A,this.source)&&this.notifyComplete(this.yieldIndex?A:I)}catch(i){this.destination.error(i)}},g.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},g}(se);var Pt=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new Ot(I))},I}(),Ot=function(I){function g(){return null!==I&&I.apply(this,arguments)||this}return qi(g,I),g.prototype._next=function(I){},g}(se);var jt=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new Lt(I))},I}(),Lt=function(I){function g(g){return I.call(this,g)||this}return qi(g,I),g.prototype.notifyComplete=function(I){var g=this.destination;g.next(I),g.complete()},g.prototype._next=function(I){this.notifyComplete(!1)},g.prototype._complete=function(){this.notifyComplete(!0)},g}(se);function Et(I){return function(g){return 0===I?Pe():g.lift(new _t(I))}}var _t=function(){function I(I){if(this.total=I,this.total<0)throw new Hl}return I.prototype.call=function(I,g){return g.subscribe(new $t(I,this.total))},I}(),$t=function(I){function g(g,C){var A=I.call(this,g)||this;return A.total=C,A.ring=new Array,A.count=0,A}return qi(g,I),g.prototype._next=function(I){var g=this.ring,C=this.total,A=this.count++;g.length<C?g.push(I):g[A%C]=I},g.prototype._complete=function(){var I=this.destination,g=this.count;if(g>0)for(var C=this.count>=this.total?this.total:this.count,A=this.ring,i=0;i<C;i++){var e=g++%C;I.next(A[e])}I.complete()},g}(se);var qt=function(){function I(I){this.value=I}return I.prototype.call=function(I,g){return g.subscribe(new Ic(I,this.value))},I}(),Ic=function(I){function g(g,C){var A=I.call(this,g)||this;return A.value=C,A}return qi(g,I),g.prototype._next=function(I){this.destination.next(this.value)},g}(se);var gc=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new Cc(I))},I}(),Cc=function(I){function g(g){return I.call(this,g)||this}return qi(g,I),g.prototype._next=function(I){this.destination.next(gl.createNext(I))},g.prototype._error=function(I){var g=this.destination;g.next(gl.createError(I)),g.complete()},g.prototype._complete=function(){var I=this.destination;I.next(gl.createComplete()),I.complete()},g}(se);function Ac(I,g){var C=!1;return arguments.length>=2&&(C=!0),function(A){return A.lift(new ic(I,g,C))}}var ic=function(){function I(I,g,C){void 0===C&&(C=!1),this.accumulator=I,this.seed=g,this.hasSeed=C}return I.prototype.call=function(I,g){return g.subscribe(new ec(I,this.accumulator,this.seed,this.hasSeed))},I}(),ec=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e.accumulator=C,e._seed=A,e.hasSeed=i,e.index=0,e}return qi(g,I),Object.defineProperty(g.prototype,"seed",{get:function(){return this._seed},set:function(I){this.hasSeed=!0,this._seed=I},enumerable:!0,configurable:!0}),g.prototype._next=function(I){if(this.hasSeed)return this._tryNext(I);this.seed=I,this.destination.next(I)},g.prototype._tryNext=function(I){var g,C=this.index++;try{g=this.accumulator(this.seed,I,C)}catch(A){this.destination.error(A)}this.seed=g,this.destination.next(g)},g}(se);function lc(I,g){return arguments.length>=2?function(C){return re(Ac(I,g),Et(1),ct(g))(C)}:function(g){return re(Ac((function(g,C,A){return I(g,C,A+1)})),Et(1))(g)}}var oc=function(){function I(I,g,C){this.accumulator=I,this.seed=g,this.concurrent=C}return I.prototype.call=function(I,g){return g.subscribe(new tc(I,this.accumulator,this.seed,this.concurrent))},I}(),tc=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e.accumulator=C,e.acc=A,e.concurrent=i,e.hasValue=!1,e.hasCompleted=!1,e.buffer=[],e.active=0,e.index=0,e}return qi(g,I),g.prototype._next=function(I){if(this.active<this.concurrent){var g=this.index++,C=this.destination,A=void 0;try{A=(0,this.accumulator)(this.acc,I,g)}catch(im){return C.error(im)}this.active++,this._innerSub(A)}else this.buffer.push(I)},g.prototype._innerSub=function(I){var g=new _l(this),C=this.destination;C.add(g);var A=ql(I,g);A!==g&&C.add(A)},g.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},g.prototype.notifyNext=function(I){var g=this.destination;this.acc=I,this.hasValue=!0,g.next(I)},g.prototype.notifyComplete=function(){var I=this.buffer;this.active--,I.length>0?this._next(I.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},g}($l);function cc(I,g){return function(C){var A;if(A="function"===typeof I?I:function(){return I},"function"===typeof g)return C.lift(new nc(A,g));var i=Object.create(C,fe);return i.source=C,i.subjectFactory=A,i}}var nc=function(){function I(I,g){this.subjectFactory=I,this.selector=g}return I.prototype.call=function(I,g){var C=this.selector,A=this.subjectFactory(),i=C(A).subscribe(I);return i.add(g.subscribe(A)),i},I}();var dc=function(){function I(I){this.nextSources=I}return I.prototype.call=function(I,g){return g.subscribe(new sc(I,this.nextSources))},I}(),sc=function(I){function g(g,C){var A=I.call(this,g)||this;return A.destination=g,A.nextSources=C,A}return qi(g,I),g.prototype.notifyError=function(){this.subscribeToNextSource()},g.prototype.notifyComplete=function(){this.subscribeToNextSource()},g.prototype._error=function(I){this.subscribeToNextSource(),this.unsubscribe()},g.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},g.prototype.subscribeToNextSource=function(){var I=this.nextSources.shift();if(I){var g=new _l(this),C=this.destination;C.add(g);var A=ql(I,g);A!==g&&C.add(A)}else this.destination.complete()},g}($l);var ac=function(){function I(){}return I.prototype.call=function(I,g){return g.subscribe(new Zc(I))},I}(),Zc=function(I){function g(g){var C=I.call(this,g)||this;return C.hasPrev=!1,C}return qi(g,I),g.prototype._next=function(I){var g;this.hasPrev?g=[this.prev,I]:this.hasPrev=!0,this.prev=I,g&&this.destination.next(g)},g}(se);function mc(I,g){return function(C){for(var A=C,i=0;i<g;i++){var e=null!=A?A[I[i]]:void 0;if(void 0===e)return;A=e}return A}}var bc=function(){function I(I,g){this.count=I,this.source=g}return I.prototype.call=function(I,g){return g.subscribe(new rc(I,this.count,this.source))},I}(),rc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.count=C,i.source=A,i}return qi(g,I),g.prototype.complete=function(){if(!this.isStopped){var g=this.source,C=this.count;if(0===C)return I.prototype.complete.call(this);C>-1&&(this.count=C-1),g.subscribe(this._unsubscribeAndRecycle())}},g}(se);var hc=function(){function I(I){this.notifier=I}return I.prototype.call=function(I,g){return g.subscribe(new Gc(I,this.notifier,g))},I}(),Gc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.notifier=C,i.source=A,i.sourceIsBeingSubscribedTo=!0,i}return qi(g,I),g.prototype.notifyNext=function(){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},g.prototype.notifyComplete=function(){if(!1===this.sourceIsBeingSubscribedTo)return I.prototype.complete.call(this)},g.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return I.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next(void 0)}},g.prototype._unsubscribe=function(){var I=this.notifications,g=this.retriesSubscription;I&&(I.unsubscribe(),this.notifications=void 0),g&&(g.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},g.prototype._unsubscribeAndRecycle=function(){var g=this._unsubscribe;return this._unsubscribe=null,I.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=g,this},g.prototype.subscribeToRetries=function(){var g;this.notifications=new pe;try{g=(0,this.notifier)(this.notifications)}catch(im){return I.prototype.complete.call(this)}this.retries=g,this.retriesSubscription=ql(g,new _l(this))},g}($l);var uc=function(){function I(I,g){this.count=I,this.source=g}return I.prototype.call=function(I,g){return g.subscribe(new yc(I,this.count,this.source))},I}(),yc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.count=C,i.source=A,i}return qi(g,I),g.prototype.error=function(g){if(!this.isStopped){var C=this.source,A=this.count;if(0===A)return I.prototype.error.call(this,g);A>-1&&(this.count=A-1),C.subscribe(this._unsubscribeAndRecycle())}},g}(se);var Bc=function(){function I(I,g){this.notifier=I,this.source=g}return I.prototype.call=function(I,g){return g.subscribe(new Vc(I,this.notifier,this.source))},I}(),Vc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.notifier=C,i.source=A,i}return qi(g,I),g.prototype.error=function(g){if(!this.isStopped){var C=this.errors,A=this.retries,i=this.retriesSubscription;if(A)this.errors=void 0,this.retriesSubscription=void 0;else{C=new pe;try{A=(0,this.notifier)(C)}catch(im){return I.prototype.error.call(this,im)}i=ql(A,new _l(this))}this._unsubscribeAndRecycle(),this.errors=C,this.retries=A,this.retriesSubscription=i,C.next(g)}},g.prototype._unsubscribe=function(){var I=this.errors,g=this.retriesSubscription;I&&(I.unsubscribe(),this.errors=void 0),g&&(g.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},g.prototype.notifyNext=function(){var I=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=I,this.source.subscribe(this)},g}($l);var pc=function(){function I(I){this.notifier=I}return I.prototype.call=function(I,g){var C=new Xc(I),A=g.subscribe(C);return A.add(ql(this.notifier,new _l(C))),A},I}(),Xc=function(I){function g(){var g=null!==I&&I.apply(this,arguments)||this;return g.hasValue=!1,g}return qi(g,I),g.prototype._next=function(I){this.value=I,this.hasValue=!0},g.prototype.notifyNext=function(){this.emitValue()},g.prototype.notifyComplete=function(){this.emitValue()},g.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},g}($l);var Wc=function(){function I(I,g){this.period=I,this.scheduler=g}return I.prototype.call=function(I,g){return g.subscribe(new Hc(I,this.period,this.scheduler))},I}(),Hc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.period=C,i.scheduler=A,i.hasValue=!1,i.add(A.schedule(Yc,C,{subscriber:i,period:C})),i}return qi(g,I),g.prototype._next=function(I){this.lastValue=I,this.hasValue=!0},g.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},g}(se);function Yc(I){var g=I.subscriber,C=I.period;g.notifyNext(),this.schedule(I,C)}var Rc=function(){function I(I,g){this.compareTo=I,this.comparator=g}return I.prototype.call=function(I,g){return g.subscribe(new fc(I,this.compareTo,this.comparator))},I}(),fc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.compareTo=C,i.comparator=A,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(C.subscribe(new Kc(g,i))),i}return qi(g,I),g.prototype._next=function(I){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(I),this.checkValues())},g.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},g.prototype.checkValues=function(){for(var I=this,g=I._a,C=I._b,A=I.comparator;g.length>0&&C.length>0;){var i=g.shift(),e=C.shift(),l=!1;try{l=A?A(i,e):i===e}catch(im){this.destination.error(im)}l||this.emit(!1)}},g.prototype.emit=function(I){var g=this.destination;g.next(I),g.complete()},g.prototype.nextB=function(I){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(I),this.checkValues())},g.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},g}(se),Kc=function(I){function g(g,C){var A=I.call(this,g)||this;return A.parent=C,A}return qi(g,I),g.prototype._next=function(I){this.parent.nextB(I)},g.prototype._error=function(I){this.parent.error(I),this.unsubscribe()},g.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},g}(se);function wc(){return new pe}var Jc=function(){function I(I,g){this.predicate=I,this.source=g}return I.prototype.call=function(I,g){return g.subscribe(new Sc(I,this.predicate,this.source))},I}(),Sc=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.predicate=C,i.source=A,i.seenValue=!1,i.index=0,i}return qi(g,I),g.prototype.applySingleValue=function(I){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=I)},g.prototype._next=function(I){var g=this.index++;this.predicate?this.tryNext(I,g):this.applySingleValue(I)},g.prototype.tryNext=function(I,g){try{this.predicate(I,g,this.source)&&this.applySingleValue(I)}catch(C){this.destination.error(C)}},g.prototype._complete=function(){var I=this.destination;this.index>0?(I.next(this.seenValue?this.singleValue:void 0),I.complete()):I.error(new Yl)},g}(se);var Fc=function(){function I(I){this.total=I}return I.prototype.call=function(I,g){return g.subscribe(new Nc(I,this.total))},I}(),Nc=function(I){function g(g,C){var A=I.call(this,g)||this;return A.total=C,A.count=0,A}return qi(g,I),g.prototype._next=function(I){++this.count>this.total&&this.destination.next(I)},g}(se);var vc=function(){function I(I){if(this._skipCount=I,this._skipCount<0)throw new Hl}return I.prototype.call=function(I,g){return 0===this._skipCount?g.subscribe(new se(I)):g.subscribe(new kc(I,this._skipCount))},I}(),kc=function(I){function g(g,C){var A=I.call(this,g)||this;return A._skipCount=C,A._count=0,A._ring=new Array(C),A}return qi(g,I),g.prototype._next=function(I){var g=this._skipCount,C=this._count++;if(C<g)this._ring[C]=I;else{var A=C%g,i=this._ring,e=i[A];i[A]=I,this.destination.next(e)}},g}(se);var Dc=function(){function I(I){this.notifier=I}return I.prototype.call=function(I,g){return g.subscribe(new zc(I,this.notifier))},I}(),zc=function(I){function g(g,C){var A=I.call(this,g)||this;A.hasValue=!1;var i=new _l(A);A.add(i),A.innerSubscription=i;var e=ql(C,i);return e!==i&&(A.add(e),A.innerSubscription=e),A}return qi(g,I),g.prototype._next=function(g){this.hasValue&&I.prototype._next.call(this,g)},g.prototype.notifyNext=function(){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},g.prototype.notifyComplete=function(){},g}($l);var Mc=function(){function I(I){this.predicate=I}return I.prototype.call=function(I,g){return g.subscribe(new Uc(I,this.predicate))},I}(),Uc=function(I){function g(g,C){var A=I.call(this,g)||this;return A.predicate=C,A.skipping=!0,A.index=0,A}return qi(g,I),g.prototype._next=function(I){var g=this.destination;this.skipping&&this.tryCallPredicate(I),this.skipping||g.next(I)},g.prototype.tryCallPredicate=function(I){try{var g=this.predicate(I,this.index++);this.skipping=Boolean(g)}catch(C){this.destination.error(C)}},g}(se);var xc=function(I){function g(g,C,A){void 0===C&&(C=0),void 0===A&&(A=rl);var i=I.call(this)||this;return i.source=g,i.delayTime=C,i.scheduler=A,(!so(C)||C<0)&&(i.delayTime=0),A&&"function"===typeof A.schedule||(i.scheduler=rl),i}return qi(g,I),g.create=function(I,C,A){return void 0===C&&(C=0),void 0===A&&(A=rl),new g(I,C,A)},g.dispatch=function(I){var g=I.source,C=I.subscriber;return this.add(g.subscribe(C))},g.prototype._subscribe=function(I){var C=this.delayTime,A=this.source;return this.scheduler.schedule(g.dispatch,C,{source:A,subscriber:I})},g}(Ge);var Tc=function(){function I(I,g){this.scheduler=I,this.delay=g}return I.prototype.call=function(I,g){return new xc(g,this.delay,this.scheduler).subscribe(I)},I}();function Qc(I,g){return"function"===typeof g?function(C){return C.pipe(Qc((function(C,A){return El(I(C,A)).pipe(fl((function(I,i){return g(C,I,A,i)})))})))}:function(g){return g.lift(new Pc(I))}}var Pc=function(){function I(I){this.project=I}return I.prototype.call=function(I,g){return g.subscribe(new Oc(I,this.project))},I}(),Oc=function(I){function g(g,C){var A=I.call(this,g)||this;return A.project=C,A.index=0,A}return qi(g,I),g.prototype._next=function(I){var g,C=this.index++;try{g=this.project(I,C)}catch(A){return void this.destination.error(A)}this._innerSub(g)},g.prototype._innerSub=function(I){var g=this.innerSubscription;g&&g.unsubscribe();var C=new _l(this),A=this.destination;A.add(C),this.innerSubscription=ql(I,C),this.innerSubscription!==C&&A.add(this.innerSubscription)},g.prototype._complete=function(){var g=this.innerSubscription;g&&!g.closed||I.prototype._complete.call(this),this.unsubscribe()},g.prototype._unsubscribe=function(){this.innerSubscription=void 0},g.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&I.prototype._complete.call(this)},g.prototype.notifyNext=function(I){this.destination.next(I)},g}($l);var jc=function(){function I(I){this.notifier=I}return I.prototype.call=function(I,g){var C=new Lc(I),A=ql(this.notifier,new _l(C));return A&&!C.seenValue?(C.add(A),g.subscribe(C)):C},I}(),Lc=function(I){function g(g){var C=I.call(this,g)||this;return C.seenValue=!1,C}return qi(g,I),g.prototype.notifyNext=function(){this.seenValue=!0,this.complete()},g.prototype.notifyComplete=function(){},g}($l);var Ec=function(){function I(I,g){this.predicate=I,this.inclusive=g}return I.prototype.call=function(I,g){return g.subscribe(new _c(I,this.predicate,this.inclusive))},I}(),_c=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.predicate=C,i.inclusive=A,i.index=0,i}return qi(g,I),g.prototype._next=function(I){var g,C=this.destination;try{g=this.predicate(I,this.index++)}catch(A){return void C.error(A)}this.nextOrComplete(I,g)},g.prototype.nextOrComplete=function(I,g){var C=this.destination;Boolean(g)?C.next(I):(this.inclusive&&C.next(I),C.complete())},g}(se);var $c=function(){function I(I,g,C){this.nextOrObserver=I,this.error=g,this.complete=C}return I.prototype.call=function(I,g){return g.subscribe(new qc(I,this.nextOrObserver,this.error,this.complete))},I}(),qc=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e._tapNext=Wl,e._tapError=Wl,e._tapComplete=Wl,e._tapError=A||Wl,e._tapComplete=i||Wl,Ie(C)?(e._context=e,e._tapNext=C):C&&(e._context=C,e._tapNext=C.next||Wl,e._tapError=C.error||Wl,e._tapComplete=C.complete||Wl),e}return qi(g,I),g.prototype._next=function(I){try{this._tapNext.call(this._context,I)}catch(g){return void this.destination.error(g)}this.destination.next(I)},g.prototype._error=function(I){try{this._tapError.call(this._context,I)}catch(g){return void this.destination.error(g)}this.destination.error(I)},g.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(I){return void this.destination.error(I)}return this.destination.complete()},g}(se),In={leading:!0,trailing:!1};var gn=function(){function I(I,g,C){this.durationSelector=I,this.leading=g,this.trailing=C}return I.prototype.call=function(I,g){return g.subscribe(new Cn(I,this.durationSelector,this.leading,this.trailing))},I}(),Cn=function(I){function g(g,C,A,i){var e=I.call(this,g)||this;return e.destination=g,e.durationSelector=C,e._leading=A,e._trailing=i,e._hasValue=!1,e}return qi(g,I),g.prototype._next=function(I){this._hasValue=!0,this._sendValue=I,this._throttled||(this._leading?this.send():this.throttle(I))},g.prototype.send=function(){var I=this._hasValue,g=this._sendValue;I&&(this.destination.next(g),this.throttle(g)),this._hasValue=!1,this._sendValue=void 0},g.prototype.throttle=function(I){var g=this.tryDurationSelector(I);g&&this.add(this._throttled=ql(g,new _l(this)))},g.prototype.tryDurationSelector=function(I){try{return this.durationSelector(I)}catch(g){return this.destination.error(g),null}},g.prototype.throttlingDone=function(){var I=this._throttled,g=this._trailing;I&&I.unsubscribe(),this._throttled=void 0,g&&this.send()},g.prototype.notifyNext=function(){this.throttlingDone()},g.prototype.notifyComplete=function(){this.throttlingDone()},g}($l);var An=function(){function I(I,g,C,A){this.duration=I,this.scheduler=g,this.leading=C,this.trailing=A}return I.prototype.call=function(I,g){return g.subscribe(new en(I,this.duration,this.scheduler,this.leading,this.trailing))},I}(),en=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;return l.duration=C,l.scheduler=A,l.leading=i,l.trailing=e,l._hasTrailingValue=!1,l._trailingValue=null,l}return qi(g,I),g.prototype._next=function(I){this.throttled?this.trailing&&(this._trailingValue=I,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(ln,this.duration,{subscriber:this})),this.leading?this.destination.next(I):this.trailing&&(this._trailingValue=I,this._hasTrailingValue=!0))},g.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},g.prototype.clearThrottle=function(){var I=this.throttled;I&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),I.unsubscribe(),this.remove(I),this.throttled=null)},g}(se);function ln(I){I.subscriber.clearThrottle()}var on=function(){return function(I,g){this.value=I,this.interval=g}}();function tn(I,g,C){return void 0===C&&(C=Gl),function(A){var i=st(I),e=i?+I-C.now():Math.abs(I);return A.lift(new cn(e,i,g,C))}}var cn=function(){function I(I,g,C,A){this.waitFor=I,this.absoluteTimeout=g,this.withObservable=C,this.scheduler=A}return I.prototype.call=function(I,g){return g.subscribe(new nn(I,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},I}(),nn=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;return l.absoluteTimeout=C,l.waitFor=A,l.withObservable=i,l.scheduler=e,l.scheduleTimeout(),l}return qi(g,I),g.dispatchTimeout=function(I){var g=I.withObservable;I._unsubscribeAndRecycle(),I.add(ql(g,new _l(I)))},g.prototype.scheduleTimeout=function(){var I=this.action;I?this.action=I.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(g.dispatchTimeout,this.waitFor,this))},g.prototype._next=function(g){this.absoluteTimeout||this.scheduleTimeout(),I.prototype._next.call(this,g)},g.prototype._unsubscribe=function(){this.action=void 0,this.scheduler=null,this.withObservable=null},g}($l);var dn=function(){return function(I,g){this.value=I,this.timestamp=g}}();function sn(I,g,C){return 0===C?[g]:(I.push(g),I)}var an=function(){function I(I){this.windowBoundaries=I}return I.prototype.call=function(I,g){var C=new Zn(I),A=g.subscribe(C);return A.closed||C.add(ql(this.windowBoundaries,new _l(C))),A},I}(),Zn=function(I){function g(g){var C=I.call(this,g)||this;return C.window=new pe,g.next(C.window),C}return qi(g,I),g.prototype.notifyNext=function(){this.openWindow()},g.prototype.notifyError=function(I){this._error(I)},g.prototype.notifyComplete=function(){this._complete()},g.prototype._next=function(I){this.window.next(I)},g.prototype._error=function(I){this.window.error(I),this.destination.error(I)},g.prototype._complete=function(){this.window.complete(),this.destination.complete()},g.prototype._unsubscribe=function(){this.window=null},g.prototype.openWindow=function(){var I=this.window;I&&I.complete();var g=this.destination,C=this.window=new pe;g.next(C)},g}($l);var mn=function(){function I(I,g){this.windowSize=I,this.startWindowEvery=g}return I.prototype.call=function(I,g){return g.subscribe(new bn(I,this.windowSize,this.startWindowEvery))},I}(),bn=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.destination=g,i.windowSize=C,i.startWindowEvery=A,i.windows=[new pe],i.count=0,g.next(i.windows[0]),i}return qi(g,I),g.prototype._next=function(I){for(var g=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,C=this.destination,A=this.windowSize,i=this.windows,e=i.length,l=0;l<e&&!this.closed;l++)i[l].next(I);var o=this.count-A+1;if(o>=0&&o%g===0&&!this.closed&&i.shift().complete(),++this.count%g===0&&!this.closed){var t=new pe;i.push(t),C.next(t)}},g.prototype._error=function(I){var g=this.windows;if(g)for(;g.length>0&&!this.closed;)g.shift().error(I);this.destination.error(I)},g.prototype._complete=function(){var I=this.windows;if(I)for(;I.length>0&&!this.closed;)I.shift().complete();this.destination.complete()},g.prototype._unsubscribe=function(){this.count=0,this.windows=null},g}(se);var rn=function(){function I(I,g,C,A){this.windowTimeSpan=I,this.windowCreationInterval=g,this.maxWindowSize=C,this.scheduler=A}return I.prototype.call=function(I,g){return g.subscribe(new Gn(I,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},I}(),hn=function(I){function g(){var g=null!==I&&I.apply(this,arguments)||this;return g._numberOfNextedValues=0,g}return qi(g,I),g.prototype.next=function(g){this._numberOfNextedValues++,I.prototype.next.call(this,g)},Object.defineProperty(g.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),g}(pe),Gn=function(I){function g(g,C,A,i,e){var l=I.call(this,g)||this;l.destination=g,l.windowTimeSpan=C,l.windowCreationInterval=A,l.maxWindowSize=i,l.scheduler=e,l.windows=[];var o=l.openWindow();if(null!==A&&A>=0){var t={subscriber:l,window:o,context:null},c={windowTimeSpan:C,windowCreationInterval:A,subscriber:l,scheduler:e};l.add(e.schedule(Bn,C,t)),l.add(e.schedule(yn,A,c))}else{var n={subscriber:l,window:o,windowTimeSpan:C};l.add(e.schedule(un,C,n))}return l}return qi(g,I),g.prototype._next=function(I){for(var g=this.windows,C=g.length,A=0;A<C;A++){var i=g[A];i.closed||(i.next(I),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},g.prototype._error=function(I){for(var g=this.windows;g.length>0;)g.shift().error(I);this.destination.error(I)},g.prototype._complete=function(){for(var I=this.windows;I.length>0;){var g=I.shift();g.closed||g.complete()}this.destination.complete()},g.prototype.openWindow=function(){var I=new hn;return this.windows.push(I),this.destination.next(I),I},g.prototype.closeWindow=function(I){I.complete();var g=this.windows;g.splice(g.indexOf(I),1)},g}(se);function un(I){var g=I.subscriber,C=I.windowTimeSpan,A=I.window;A&&g.closeWindow(A),I.window=g.openWindow(),this.schedule(I,C)}function yn(I){var g=I.windowTimeSpan,C=I.subscriber,A=I.scheduler,i=I.windowCreationInterval,e=C.openWindow(),l=this,o={action:l,subscription:null},t={subscriber:C,window:e,context:o};o.subscription=A.schedule(Bn,g,t),l.add(o.subscription),l.schedule(I,i)}function Bn(I){var g=I.subscriber,C=I.window,A=I.context;A&&A.action&&A.subscription&&A.action.remove(A.subscription),g.closeWindow(C)}var Vn=function(){function I(I,g){this.openings=I,this.closingSelector=g}return I.prototype.call=function(I,g){return g.subscribe(new pn(I,this.openings,this.closingSelector))},I}(),pn=function(I){function g(g,C,A){var i=I.call(this,g)||this;return i.openings=C,i.closingSelector=A,i.contexts=[],i.add(i.openSubscription=Ql(i,C,C)),i}return qi(g,I),g.prototype._next=function(I){var g=this.contexts;if(g)for(var C=g.length,A=0;A<C;A++)g[A].window.next(I)},g.prototype._error=function(g){var C=this.contexts;if(this.contexts=null,C)for(var A=C.length,i=-1;++i<A;){var e=C[i];e.window.error(g),e.subscription.unsubscribe()}I.prototype._error.call(this,g)},g.prototype._complete=function(){var g=this.contexts;if(this.contexts=null,g)for(var C=g.length,A=-1;++A<C;){var i=g[A];i.window.complete(),i.subscription.unsubscribe()}I.prototype._complete.call(this)},g.prototype._unsubscribe=function(){var I=this.contexts;if(this.contexts=null,I)for(var g=I.length,C=-1;++C<g;){var A=I[C];A.window.unsubscribe(),A.subscription.unsubscribe()}},g.prototype.notifyNext=function(I,g,C,A,i){if(I===this.openings){var e=void 0;try{e=(0,this.closingSelector)(g)}catch(im){return this.error(im)}var l=new pe,o=new ce,t={window:l,subscription:o};this.contexts.push(t);var c=Ql(this,e,t);c.closed?this.closeWindow(this.contexts.length-1):(c.context=t,o.add(c)),this.destination.next(l)}else this.closeWindow(this.contexts.indexOf(I))},g.prototype.notifyError=function(I){this.error(I)},g.prototype.notifyComplete=function(I){I!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(I.context))},g.prototype.closeWindow=function(I){if(-1!==I){var g=this.contexts,C=g[I],A=C.window,i=C.subscription;g.splice(I,1),A.complete(),i.unsubscribe()}},g}(kl);var Xn=function(){function I(I){this.closingSelector=I}return I.prototype.call=function(I,g){return g.subscribe(new Wn(I,this.closingSelector))},I}(),Wn=function(I){function g(g,C){var A=I.call(this,g)||this;return A.destination=g,A.closingSelector=C,A.openWindow(),A}return qi(g,I),g.prototype.notifyNext=function(I,g,C,A,i){this.openWindow(i)},g.prototype.notifyError=function(I){this._error(I)},g.prototype.notifyComplete=function(I){this.openWindow(I)},g.prototype._next=function(I){this.window.next(I)},g.prototype._error=function(I){this.window.error(I),this.destination.error(I),this.unsubscribeClosingNotification()},g.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},g.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},g.prototype.openWindow=function(I){void 0===I&&(I=null),I&&(this.remove(I),I.unsubscribe());var g=this.window;g&&g.complete();var C,A=this.window=new pe;this.destination.next(A);try{C=(0,this.closingSelector)()}catch(im){return this.destination.error(im),void this.window.error(im)}this.add(this.closingNotification=Ql(this,C))},g}(kl);var Hn=function(){function I(I,g){this.observables=I,this.project=g}return I.prototype.call=function(I,g){return g.subscribe(new Yn(I,this.observables,this.project))},I}(),Yn=function(I){function g(g,C,A){var i=I.call(this,g)||this;i.observables=C,i.project=A,i.toRespond=[];var e=C.length;i.values=new Array(e);for(var l=0;l<e;l++)i.toRespond.push(l);for(l=0;l<e;l++){var o=C[l];i.add(Ql(i,o,void 0,l))}return i}return qi(g,I),g.prototype.notifyNext=function(I,g,C){this.values[C]=g;var A=this.toRespond;if(A.length>0){var i=A.indexOf(C);-1!==i&&A.splice(i,1)}},g.prototype.notifyComplete=function(){},g.prototype._next=function(I){if(0===this.toRespond.length){var g=[I].concat(this.values);this.project?this._tryProject(g):this.destination.next(g)}},g.prototype._tryProject=function(I){var g;try{g=this.project.apply(this,I)}catch(C){return void this.destination.error(C)}this.destination.next(g)},g}(kl);var Rn=Object.freeze(Object.defineProperty({__proto__:null,audit:Fo,auditTime:function(I,g){return void 0===g&&(g=Gl),Fo((function(){return Xo(I,g)}))},buffer:function(I){return function(g){return g.lift(new ko(I))}},bufferCount:function(I,g){return void 0===g&&(g=null),function(C){return C.lift(new zo(I,g))}},bufferTime:function(I){var g=arguments.length,C=Gl;Oe(arguments[arguments.length-1])&&(C=arguments[arguments.length-1],g--);var A=null;g>=2&&(A=arguments[1]);var i=Number.POSITIVE_INFINITY;return g>=3&&(i=arguments[2]),function(g){return g.lift(new xo(I,A,i,C))}},bufferToggle:function(I,g){return function(C){return C.lift(new Lo(I,g))}},bufferWhen:function(I){return function(g){return g.lift(new _o(I))}},catchError:function(I){return function(g){var C=new qo(I),A=g.lift(C);return C.caught=A}},combineAll:function(I){return function(g){return g.lift(new Ol(I))}},combineLatest:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=null;return"function"===typeof I[I.length-1]&&(C=I.pop()),1===I.length&&ee(I[0])&&(I=I[0].slice()),function(g){return g.lift.call(El([g].concat(I)),new Ol(C))}},concat:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){return g.lift.call(lo.apply(void 0,[g].concat(I)))}},concatAll:eo,concatMap:gt,concatMapTo:function(I,g){return gt((function(){return I}),g)},count:function(I){return function(g){return g.lift(new Ct(I,g))}},debounce:function(I){return function(g){return g.lift(new it(I))}},debounceTime:function(I,g){return void 0===g&&(g=Gl),function(C){return C.lift(new lt(I,g))}},defaultIfEmpty:ct,delay:function(I,g){void 0===g&&(g=Gl);var C=st(I)?+I-g.now():Math.abs(I);return function(I){return I.lift(new at(C,g))}},delayWhen:function(I,g){return g?function(C){return new ht(C,g).lift(new bt(I))}:function(g){return g.lift(new bt(I))}},dematerialize:function(){return function(I){return I.lift(new ut)}},distinct:function(I,g){return function(C){return C.lift(new Bt(I,g))}},distinctUntilChanged:pt,distinctUntilKeyChanged:function(I,g){return pt((function(C,A){return g?g(C[I],A[I]):C[I]===A[I]}))},elementAt:function(I,g){if(I<0)throw new Hl;var C=arguments.length>=2;return function(A){return A.pipe(ho((function(g,C){return C===I})),Kt(1),C?ct(g):Ht((function(){return new Hl})))}},endWith:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){return lo(g,$e.apply(void 0,I))}},every:function(I,g){return function(C){return C.lift(new St(I,g,C))}},exhaust:function(){return function(I){return I.lift(new Nt)}},exhaustMap:function I(g,C){return C?function(A){return A.pipe(I((function(I,A){return El(g(I,A)).pipe(fl((function(g,i){return C(I,g,A,i)})))})))}:function(I){return I.lift(new kt(g))}},expand:function(I,g,C){return void 0===g&&(g=Number.POSITIVE_INFINITY),g=(g||0)<1?Number.POSITIVE_INFINITY:g,function(A){return A.lift(new zt(I,g,C))}},filter:ho,finalize:function(I){return function(g){return g.lift(new Ut(I))}},find:function(I,g){if("function"!==typeof I)throw new TypeError("predicate is not a function");return function(C){return C.lift(new Tt(I,C,!1,g))}},findIndex:function(I,g){return function(C){return C.lift(new Tt(I,C,!0,g))}},first:function(I,g){var C=arguments.length>=2;return function(A){return A.pipe(I?ho((function(g,C){return I(g,C,A)})):be,Kt(1),C?ct(g):Ht((function(){return new Yl})))}},groupBy:function(I,g,C,A){return function(i){return i.lift(new we(I,g,C,A))}},ignoreElements:function(){return function(I){return I.lift(new Pt)}},isEmpty:function(){return function(I){return I.lift(new jt)}},last:function(I,g){var C=arguments.length>=2;return function(A){return A.pipe(I?ho((function(g,C){return I(g,C,A)})):be,Et(1),C?ct(g):Ht((function(){return new Yl})))}},map:fl,mapTo:function(I){return function(g){return g.lift(new qt(I))}},materialize:function(){return function(I){return I.lift(new gc)}},max:function(I){return lc("function"===typeof I?function(g,C){return I(g,C)>0?g:C}:function(I,g){return I>g?I:g})},merge:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){return g.lift.call(Zo.apply(void 0,[g].concat(I)))}},mergeAll:io,mergeMap:Io,flatMap:Ao,mergeMapTo:function(I,g,C){return void 0===C&&(C=Number.POSITIVE_INFINITY),"function"===typeof g?Io((function(){return I}),g,C):("number"===typeof g&&(C=g),Io((function(){return I}),C))},mergeScan:function(I,g,C){return void 0===C&&(C=Number.POSITIVE_INFINITY),function(A){return A.lift(new oc(I,g,C))}},min:function(I){return lc("function"===typeof I?function(g,C){return I(g,C)<0?g:C}:function(I,g){return I<g?I:g})},multicast:cc,observeOn:function(I,g){return void 0===g&&(g=0),function(C){return C.lift(new Cl(I,g))}},onErrorResumeNext:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return 1===I.length&&ee(I[0])&&(I=I[0]),function(g){return g.lift(new dc(I))}},pairwise:function(){return function(I){return I.lift(new ac)}},partition:function(I,g){return function(C){return[ho(I,g)(C),ho(ro(I,g))(C)]}},pluck:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=I.length;if(0===C)throw new Error("list of properties cannot be empty.");return function(g){return fl(mc(I,C))(g)}},publish:function(I){return I?cc((function(){return new pe}),I):cc(new pe)},publishBehavior:function(I){return function(g){return cc(new ve(I))(g)}},publishLast:function(){return function(I){return cc(new ol)(I)}},publishReplay:function(I,g,C,A){C&&"function"!==typeof C&&(A=C);var i="function"===typeof C?C:void 0,e=new el(I,g,A);return function(I){return cc((function(){return e}),i)(I)}},race:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){return 1===I.length&&ee(I[0])&&(I=I[0]),g.lift.call(yo.apply(void 0,[g].concat(I)))}},reduce:lc,repeat:function(I){return void 0===I&&(I=-1),function(g){return 0===I?Pe():I<0?g.lift(new bc(-1,g)):g.lift(new bc(I-1,g))}},repeatWhen:function(I){return function(g){return g.lift(new hc(I))}},retry:function(I){return void 0===I&&(I=-1),function(g){return g.lift(new uc(I,g))}},retryWhen:function(I){return function(g){return g.lift(new Bc(I,g))}},refCount:We,sample:function(I){return function(g){return g.lift(new pc(I))}},sampleTime:function(I,g){return void 0===g&&(g=Gl),function(C){return C.lift(new Wc(I,g))}},scan:Ac,sequenceEqual:function(I,g){return function(C){return C.lift(new Rc(I,g))}},share:function(){return function(I){return We()(cc(wc)(I))}},shareReplay:function(I,g,C){var A;return A=I&&"object"===typeof I?I:{bufferSize:I,windowTime:g,refCount:!1,scheduler:C},function(I){return I.lift(function(I){var g,C,A=I.bufferSize,i=void 0===A?Number.POSITIVE_INFINITY:A,e=I.windowTime,l=void 0===e?Number.POSITIVE_INFINITY:e,o=I.refCount,t=I.scheduler,c=0,n=!1,d=!1;return function(I){var A;c++,!g||n?(n=!1,g=new el(i,l,t),A=g.subscribe(this),C=I.subscribe({next:function(I){g.next(I)},error:function(I){n=!0,g.error(I)},complete:function(){d=!0,C=void 0,g.complete()}}),d&&(C=void 0)):A=g.subscribe(this),this.add((function(){c--,A.unsubscribe(),A=void 0,C&&!d&&o&&0===c&&(C.unsubscribe(),C=void 0,g=void 0)}))}}(A))}},single:function(I){return function(g){return g.lift(new Jc(I,g))}},skip:function(I){return function(g){return g.lift(new Fc(I))}},skipLast:function(I){return function(g){return g.lift(new vc(I))}},skipUntil:function(I){return function(g){return g.lift(new Dc(I))}},skipWhile:function(I){return function(g){return g.lift(new Mc(I))}},startWith:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];var C=I[I.length-1];return Oe(C)?(I.pop(),function(g){return lo(I,g,C)}):function(g){return lo(I,g)}},subscribeOn:function(I,g){return void 0===g&&(g=0),function(C){return C.lift(new Tc(I,g))}},switchAll:function(){return Qc(be)},switchMap:Qc,switchMapTo:function(I,g){return g?Qc((function(){return I}),g):Qc((function(){return I}))},take:Kt,takeLast:Et,takeUntil:function(I){return function(g){return g.lift(new jc(I))}},takeWhile:function(I,g){return void 0===g&&(g=!1),function(C){return C.lift(new Ec(I,g))}},tap:function(I,g,C){return function(A){return A.lift(new $c(I,g,C))}},throttle:function(I,g){return void 0===g&&(g=In),function(C){return C.lift(new gn(I,!!g.leading,!!g.trailing))}},throttleTime:function(I,g,C){return void 0===g&&(g=Gl),void 0===C&&(C=In),function(A){return A.lift(new An(I,g,C.leading,C.trailing))}},throwIfEmpty:Ht,timeInterval:function(I){return void 0===I&&(I=Gl),function(g){return oo((function(){return g.pipe(Ac((function(g,C){var A=g.current;return{value:C,current:I.now(),last:A}}),{current:I.now(),value:void 0,last:void 0}),fl((function(I){var g=I.current,C=I.last,A=I.value;return new on(A,g-C)})))}))}},timeout:function(I,g){return void 0===g&&(g=Gl),tn(I,qe(new Rl),g)},timeoutWith:tn,timestamp:function(I){return void 0===I&&(I=Gl),fl((function(g){return new dn(g,I.now())}))},toArray:function(){return lc(sn,[])},window:function(I){return function(g){return g.lift(new an(I))}},windowCount:function(I,g){return void 0===g&&(g=0),function(C){return C.lift(new mn(I,g))}},windowTime:function(I){var g=Gl,C=null,A=Number.POSITIVE_INFINITY;return Oe(arguments[3])&&(g=arguments[3]),Oe(arguments[2])?g=arguments[2]:so(arguments[2])&&(A=Number(arguments[2])),Oe(arguments[1])?g=arguments[1]:so(arguments[1])&&(C=Number(arguments[1])),function(i){return i.lift(new rn(I,C,A,g))}},windowToggle:function(I,g){return function(C){return C.lift(new Vn(I,g))}},windowWhen:function(I){return function(g){return g.lift(new Xn(I))}},withLatestFrom:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){var C;"function"===typeof I[I.length-1]&&(C=I.pop());var A=I;return g.lift(new Hn(A,C))}},zip:function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];return function(g){return g.lift.call(Ho.apply(void 0,[g].concat(I)))}},zipAll:function(I){return function(g){return g.lift(new Yo(I))}}},Symbol.toStringTag,{value:"Module"})),fn=aC(Rn),Kn=bC.exports;Object.defineProperty(_i,"__esModule",{value:!0}),_i.BBI=void 0;var wn=Kn(hC),Jn=Kn(GC.exports),Sn=Kn(uC.exports),Fn=Kn(yC.exports),Nn=Kn(RC.exports),vn=fC,kn=gI.a,Dn=So,zn=fn,Mn=Kn(rA),Un=Kn(q.a),xn=YC;function Tn(I,g){var C=Object.keys(I);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(I);g&&(A=A.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),C.push.apply(C,A)}return C}function Qn(I){for(var g=1;g<arguments.length;g++){var C=null!=arguments[g]?arguments[g]:{};g%2?Tn(Object(C),!0).forEach((function(g){(0,Nn.default)(I,g,C[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(C)):Tn(Object(C)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(C,g))}))}return I}var Pn=-2003829722,On=-2021002517;function jn(I){var g=I?"big":"little",C=(new vn.Parser).endianess(g).int32("magic").uint16("version").uint16("numZoomLevels").uint64("chromTreeOffset").uint64("unzoomedDataOffset").uint64("unzoomedIndexOffset").uint16("fieldCount").uint16("definedFieldCount").uint64("asOffset").uint64("totalSummaryOffset").uint32("uncompressBufSize").uint64("extHeaderOffset").array("zoomLevels",{length:"numZoomLevels",type:(new vn.Parser).uint32("reductionLevel").uint32("reserved").uint64("dataOffset").uint64("indexOffset")}),A=(new vn.Parser).endianess(g).uint64("basesCovered").double("scoreMin").double("scoreMax").double("scoreSum").double("scoreSumSquares");return{chromTreeParser:(new vn.Parser).endianess(g).uint32("magic").uint32("blockSize").uint32("keySize").uint32("valSize").uint64("itemCount"),totalSummaryParser:A,headerParser:C,isLeafNode:(new vn.Parser).endianess(g).uint8("isLeafNode").skip(1).uint16("cnt")}}var Ln=function(){function I(){var g=this,C=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,Sn.default)(this,I),(0,Nn.default)(this,"bbi",void 0),(0,Nn.default)(this,"headerCache",new Mn.default({cache:new Un.default({maxSize:1}),fill:function(){var I=(0,Jn.default)(wn.default.mark((function I(C,A){return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.abrupt("return",g._getHeader(Qn(Qn({},C),{},{signal:A})));case 1:case"end":return I.stop()}}),I)})));return function(g,C){return I.apply(this,arguments)}}()})),(0,Nn.default)(this,"renameRefSeqs",void 0);var A=C.filehandle,i=C.renameRefSeqs,e=C.path,l=C.url;if(this.renameRefSeqs=i||function(I){return I},A)this.bbi=A;else if(l)this.bbi=new kn.RemoteFile(l);else{if(!e)throw new Error("no file given");this.bbi=new kn.LocalFile(e)}}return(0,Fn.default)(I,[{key:"getHeader",value:function(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},g="aborted"in I?{signal:I}:I;return this.headerCache.get(JSON.stringify(g),g,g.signal)}}]),(0,Fn.default)(I,[{key:"_getHeader",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g){var C,A;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this._getMainHeader(g);case 2:return C=I.sent,I.next=5,this._readChromTree(C,g);case 5:return A=I.sent,I.abrupt("return",Qn(Qn({},C),A));case 7:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"_getMainHeader",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g){var C,i,e,l,o,t,c,n=arguments;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return C=n.length>1&&void 0!==n[1]?n[1]:2e3,I.next=3,this.bbi.read(A.alloc(C),0,C,0,g);case 3:if(i=I.sent,e=i.buffer,l=this._isBigEndian(e),o=jn(l),(t=o.headerParser.parse(e).result).fileType=t.magic===On?"bigbed":"bigwig",!(t.asOffset>C||t.totalSummaryOffset>C)){I.next=11;break}return I.abrupt("return",this._getMainHeader(g,2*C));case 11:if(t.asOffset&&(t.autoSql=e.slice(t.asOffset,e.indexOf(0,t.asOffset)).toString("utf8")),!(t.totalSummaryOffset>C)){I.next=14;break}return I.abrupt("return",this._getMainHeader(g,2*C));case 14:return t.totalSummaryOffset&&(c=e.slice(t.totalSummaryOffset),t.totalSummary=o.totalSummaryParser.parse(c).result),I.abrupt("return",Qn(Qn({},t),{},{isBigEndian:l}));case 16:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"_isBigEndian",value:function(I){var g=I.readInt32LE(0);if(g===Pn||g===On)return!1;if((g=I.readInt32BE(0))===Pn||g===On)return!0;throw new Error("not a BigWig/BigBed file")}},{key:"_readChromTree",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g,C){var i,e,l,o,t,c,n,d,s,a,Z,m,b,r=this;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:for(i=g.isBigEndian,e=i?"big":"little",l=[],o={},t=g.chromTreeOffset,c=g.unzoomedDataOffset;c%4!==0;)c+=1;return I.next=9,this.bbi.read(A.alloc(c-t),0,c-t,t,C);case 9:return n=I.sent,d=n.buffer,s=jn(i),a=s.chromTreeParser.parse(d).result.keySize,Z=(new vn.Parser).endianess(e).string("key",{stripNull:!0,length:a}).uint32("refId").uint32("refSize"),m=(new vn.Parser).endianess(e).skip(a).uint64("childOffset"),32,b=function(){var I=(0,Jn.default)(wn.default.mark((function I(g){var C,A,i,e,c,n,a,h,G,u,y,B,V,p,X,W;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:if(!((C=g)>=d.length)){I.next=3;break}throw new Error("reading beyond end of buffer");case 3:if(A=s.isLeafNode.parse(d.slice(C)),i=A.result,e=i.isLeafNode,c=i.cnt,C+=A.offset,!e){I.next=10;break}for(n=0;n<c;n+=1)a=Z.parse(d.slice(C)),C+=a.offset,h=a.result,G=h.key,u=h.refId,y=h.refSize,B={name:G,id:u,length:y},o[r.renameRefSeqs(G)]=u,l[u]=B;I.next=14;break;case 10:for(V=[],p=0;p<c;p+=1)X=m.parse(d.slice(C)),W=X.result.childOffset,C+=X.offset,W-=t,V.push(b(W));return I.next=14,Promise.all(V);case 14:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),I.next=19,b(32);case 19:return I.abrupt("return",{refsByName:o,refsByNumber:l});case 20:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()},{key:"getUnzoomedView",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g){var C,A,i,e,l,o,t,c,n;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.getHeader(g);case 2:return C=I.sent,A=C.unzoomedIndexOffset,i=C.zoomLevels,e=C.refsByName,l=C.uncompressBufSize,o=C.isBigEndian,t=C.fileType,c=i[0],n=c?c.dataOffset-A:4e3,I.abrupt("return",new xn.BlockView(this.bbi,e,A,n,o,l>0,t));case 12:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"getFeatureStream",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g,C,A){var i,e,l,o=arguments;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return i=o.length>3&&void 0!==o[3]?o[3]:{scale:1},I.next=3,this.getHeader(i);case 3:if(e=this.renameRefSeqs(g),!i.basesPerSpan){I.next=10;break}return I.next=7,this.getView(1/i.basesPerSpan,i);case 7:l=I.sent,I.next=19;break;case 10:if(!i.scale){I.next=16;break}return I.next=13,this.getView(i.scale,i);case 13:l=I.sent,I.next=19;break;case 16:return I.next=18,this.getView(1,i);case 18:l=I.sent;case 19:if(l){I.next=21;break}throw new Error("unable to get block view for data");case 21:return I.abrupt("return",new Dn.Observable((function(I){l.readWigData(e,C,A,I,i)})));case 22:case"end":return I.stop()}}),I,this)})));return function(g,C,A){return I.apply(this,arguments)}}()},{key:"getFeatures",value:function(){var I=(0,Jn.default)(wn.default.mark((function I(g,C,A){var i,e,l,o=arguments;return wn.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return i=o.length>3&&void 0!==o[3]?o[3]:{scale:1},I.next=3,this.getFeatureStream(g,C,A,i);case 3:return e=I.sent,I.next=6,e.pipe((0,zn.reduce)((function(I,g){return I.concat(g)}))).toPromise();case 6:return l=I.sent,I.abrupt("return",l||[]);case 8:case"end":return I.stop()}}),I,this)})));return function(g,C,A){return I.apply(this,arguments)}}()}]),I}();_i.BBI=Ln;var En=bC.exports;Object.defineProperty(mC,"__esModule",{value:!0}),mC.BigWig=void 0;var _n=En(hC),$n=En(GC.exports),qn=En(uC.exports),Id=En(yC.exports),gd=En(BC.exports),Cd=En(pC.exports),Ad=En(HC.exports),id=YC;function ed(I){var g=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(im){return!1}}();return function(){var C,A=(0,Ad.default)(I);if(g){var i=(0,Ad.default)(this).constructor;C=Reflect.construct(A,arguments,i)}else C=A.apply(this,arguments);return(0,Cd.default)(this,C)}}var ld=function(I){(0,gd.default)(C,I);var g=ed(C);function C(){return(0,qn.default)(this,C),g.apply(this,arguments)}return(0,Id.default)(C,[{key:"getView",value:function(){var I=(0,$n.default)(_n.default.mark((function I(g,C){var A,i,e,l,o,t,c,n,d,s,a;return _n.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.getHeader(C);case 2:A=I.sent,i=A.zoomLevels,e=A.refsByName,l=A.fileSize,o=A.isBigEndian,t=A.uncompressBufSize,c=1/g,n=i.length,l||(n-=1),d=n;case 12:if(!(d>=0)){I.next=20;break}if(!((s=i[d])&&s.reductionLevel<=2*c)){I.next=17;break}return a=d<i.length-1?i[d+1].dataOffset-s.indexOffset:l-4-s.indexOffset,I.abrupt("return",new id.BlockView(this.bbi,e,s.indexOffset,a,o,t>0,"summary"));case 17:d-=1,I.next=12;break;case 20:return I.abrupt("return",this.getUnzoomedView(C));case 21:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()}]),C}(_i.BBI);mC.BigWig=ld;var od={},td={exports:{}},cd={exports:{}},nd={exports:{}};!function(I){I.exports=function(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A},I.exports.default=I.exports,I.exports.__esModule=!0}(nd),function(I){var g=nd.exports;I.exports=function(I){if(Array.isArray(I))return g(I)},I.exports.default=I.exports,I.exports.__esModule=!0}(cd);var dd={exports:{}};!function(I){I.exports=function(I){if("undefined"!==typeof Symbol&&null!=I[Symbol.iterator]||null!=I["@@iterator"])return Array.from(I)},I.exports.default=I.exports,I.exports.__esModule=!0}(dd);var sd={exports:{}};!function(I){var g=nd.exports;I.exports=function(I,C){if(I){if("string"===typeof I)return g(I,C);var A=Object.prototype.toString.call(I).slice(8,-1);return"Object"===A&&I.constructor&&(A=I.constructor.name),"Map"===A||"Set"===A?Array.from(I):"Arguments"===A||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(A)?g(I,C):void 0}},I.exports.default=I.exports,I.exports.__esModule=!0}(sd);var ad={exports:{}};!function(I){I.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},I.exports.default=I.exports,I.exports.__esModule=!0}(ad),function(I){var g=cd.exports,C=dd.exports,A=sd.exports,i=ad.exports;I.exports=function(I){return g(I)||C(I)||A(I)||i()},I.exports.default=I.exports,I.exports.__esModule=!0}(td);var Zd=bC.exports;Object.defineProperty(od,"__esModule",{value:!0}),od.filterUndef=Jd,od.BigBed=void 0;var md=Zd(td.exports),bd=Zd(hC),rd=Zd(GC.exports),hd=Zd(uC.exports),Gd=Zd(yC.exports),ud=Zd(WC.exports),yd=Zd(BC.exports),Bd=Zd(pC.exports),Vd=Zd(HC.exports),pd=Zd(RC.exports),Xd=fC,Wd=So,Hd=fn,Yd=Zd(rA),Rd=Zd(q.a);function fd(I,g){var C=Object.keys(I);if(Object.getOwnPropertySymbols){var A=Object.getOwnPropertySymbols(I);g&&(A=A.filter((function(g){return Object.getOwnPropertyDescriptor(I,g).enumerable}))),C.push.apply(C,A)}return C}function Kd(I){for(var g=1;g<arguments.length;g++){var C=null!=arguments[g]?arguments[g]:{};g%2?fd(Object(C),!0).forEach((function(g){(0,pd.default)(I,g,C[g])})):Object.getOwnPropertyDescriptors?Object.defineProperties(I,Object.getOwnPropertyDescriptors(C)):fd(Object(C)).forEach((function(g){Object.defineProperty(I,g,Object.getOwnPropertyDescriptor(C,g))}))}return I}function wd(I){var g=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(im){return!1}}();return function(){var C,A=(0,Vd.default)(I);if(g){var i=(0,Vd.default)(this).constructor;C=Reflect.construct(A,arguments,i)}else C=A.apply(this,arguments);return(0,Bd.default)(this,C)}}function Jd(I){return I.filter((function(I){return!!I}))}var Sd=function(I){(0,yd.default)(C,I);var g=wd(C);function C(I){var A;return(0,hd.default)(this,C),A=g.call(this,I),(0,pd.default)((0,ud.default)(A),"readIndicesCache",new Yd.default({cache:new Rd.default({maxSize:1}),fill:function(){var I=(0,rd.default)(bd.default.mark((function I(g,C){return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.abrupt("return",A._readIndices(Kd(Kd({},g),{},{signal:C})));case 1:case"end":return I.stop()}}),I)})));return function(g,C){return I.apply(this,arguments)}}()})),A}return(0,Gd.default)(C,[{key:"readIndices",value:function(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},g="aborted"in I?{signal:I}:I;return this.readIndicesCache.get(JSON.stringify(g),g,g.signal)}},{key:"getView",value:function(){var I=(0,rd.default)(bd.default.mark((function I(g,C){return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.abrupt("return",this.getUnzoomedView(C));case 1:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()},{key:"_readIndices",value:function(){var I=(0,rd.default)(bd.default.mark((function I(g){var C,i,e,l,o,t,c,n,d,s,a,Z,m,b,r,h;return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.getHeader(g);case 2:return C=I.sent,i=C.extHeaderOffset,e=C.isBigEndian,I.next=7,this.bbi.read(A.alloc(64),0,64,i);case 7:if(l=I.sent,o=l.buffer,t=e?"big":"little",c=(new Xd.Parser).endianess(t).uint16("size").uint16("count").uint64("offset").parse(o).result,n=c.count,d=c.offset,0!==n){I.next=14;break}return I.abrupt("return",[]);case 14:return a=(s=20)*n,I.next=18,this.bbi.read(A.alloc(a),0,a,d);case 18:for(Z=I.sent,m=Z.buffer,b=(new Xd.Parser).endianess(t).int16("type").int16("fieldcount").uint64("offset").skip(4).int16("field"),r=[],h=0;h<n;h+=1)r.push(b.parse(m.slice(h*s)).result);return I.abrupt("return",r);case 24:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"searchExtraIndexBlocks",value:function(){var I=(0,rd.default)(bd.default.mark((function I(g){var C,i,e,l,o,t=this,c=arguments;return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return C=c.length>1&&void 0!==c[1]?c[1]:{},I.next=3,this.getHeader(C);case 3:return i=I.sent,e=i.isBigEndian,I.next=7,this.readIndices(C);case 7:if((l=I.sent).length){I.next=10;break}return I.abrupt("return",[]);case 10:return o=l.map(function(){var I=(0,rd.default)(bd.default.mark((function I(i){var l,o,c,n,d,s,a,Z,m,b,r;return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return l=i.offset,o=i.field,I.next=3,t.bbi.read(A.alloc(32),0,32,l,C);case 3:return c=I.sent,n=c.buffer,d=(new Xd.Parser).endianess(e?"big":"little").int32("magic").int32("blockSize").int32("keySize").int32("valSize").uint64("itemCount"),s=d.parse(n).result,a=s.blockSize,Z=s.keySize,m=s.valSize,b=(new Xd.Parser).endianess(e?"big":"little").int8("nodeType").skip(1).int16("cnt").choice({tag:"nodeType",choices:{0:(new Xd.Parser).array("leafkeys",{length:"cnt",type:(new Xd.Parser).string("key",{length:Z,stripNull:!0}).uint64("offset")}),1:(new Xd.Parser).array("keys",{length:"cnt",type:(new Xd.Parser).string("key",{length:Z,stripNull:!0}).uint64("offset").uint32("length").uint32("reserved")})}}),r=function(){var I=(0,rd.default)(bd.default.mark((function I(i){var e,l,c,n,d,s,h,G;return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return e=4+a*(Z+m),I.next=3,t.bbi.read(A.alloc(e),0,e,i,C);case 3:if(l=I.sent,c=l.buffer,!(n=b.parse(c).result).leafkeys){I.next=17;break}s=0;case 8:if(!(s<n.leafkeys.length)){I.next=16;break}if(h=n.leafkeys[s].key,!(g.localeCompare(h)<0&&d)){I.next=12;break}return I.abrupt("return",r(d));case 12:d=n.leafkeys[s].offset;case 13:s+=1,I.next=8;break;case 16:return I.abrupt("return",r(d));case 17:G=0;case 18:if(!(G<n.keys.length)){I.next=24;break}if(n.keys[G].key!==g){I.next=21;break}return I.abrupt("return",Kd(Kd({},n.keys[G]),{},{field:o}));case 21:G+=1,I.next=18;break;case 24:return I.abrupt("return",void 0);case 25:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}(),32,I.abrupt("return",r(l+32));case 11:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}()),I.t0=Jd,I.next=14,Promise.all(o);case 14:return I.t1=I.sent,I.abrupt("return",(0,I.t0)(I.t1));case 16:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"searchExtraIndex",value:function(){var I=(0,rd.default)(bd.default.mark((function I(g){var C,A,i,e,l,o=arguments;return bd.default.wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return C=o.length>1&&void 0!==o[1]?o[1]:{},I.next=3,this.searchExtraIndexBlocks(g,C);case 3:if((A=I.sent).length){I.next=6;break}return I.abrupt("return",[]);case 6:return I.next=8,this.getUnzoomedView(C);case 8:return i=I.sent,e=A.map((function(I){return new Wd.Observable((function(g){i.readFeatures(g,[I],C)})).pipe((0,Hd.reduce)((function(I,g){return I.concat(g)})),(0,Hd.map)((function(g){for(var C=0;C<g.length;C+=1)g[C].field=I.field;return g})))})),I.next=12,Wd.merge.apply(void 0,(0,md.default)(e)).toPromise();case 12:return l=I.sent,I.abrupt("return",l.filter((function(I){return I.rest.split("\t")[I.field-3]===g})));case 14:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()}]),C}(_i.BBI);od.BigBed=Sd,function(I){Object.defineProperty(I,"__esModule",{value:!0}),Object.defineProperty(I,"BigWig",{enumerable:!0,get:function(){return g.BigWig}}),Object.defineProperty(I,"BigBed",{enumerable:!0,get:function(){return C.BigBed}}),Object.defineProperty(I,"Feature",{enumerable:!0,get:function(){return A.Feature}}),Object.defineProperty(I,"Header",{enumerable:!0,get:function(){return A.Header}}),Object.defineProperty(I,"RequestOptions",{enumerable:!0,get:function(){return A.RequestOptions}});var g=mC,C=od,A=_i}(ZC),Object(V.a)((function(I){return I.pos})).left;var Fd=function(I){Object(a.a)(C,I);var g=Object(Z.a)(C);function C(){var I;return Object(t.a)(this,C),(I=g.apply(this,arguments)).read=function(){var g=Object(e.a)(Object(i.a)().mark((function g(C){var A,e,l,o,t,c,n,d,s,a,Z,b,r,h,G,u=arguments;return Object(i.a)().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return A=u.length>1&&void 0!==u[1]?u[1]:0,e=u.length>2?u[2]:void 0,l=u.length>3&&void 0!==u[3]?u[3]:0,o=u.length>4&&void 0!==u[4]?u[4]:{},t=o.headers,c=void 0===t?{}:t,n=o.signal,d=o.overrides,s=void 0===d?{}:d,e<1/0?c.range="bytes=".concat(l,"-").concat(l+e):e===1/0&&0!==l&&(c.range="bytes=".concat(l,"-")),a=Object(m.a)(Object(m.a)(Object(m.a)({},I.baseOverrides),s),{},{headers:Object(m.a)(Object(m.a)(Object(m.a)({},c),s.headers),I.baseOverrides.headers),method:"GET",redirect:"follow",mode:"cors",signal:n}),g.next=9,I.fetch(I.url,a);case 9:if((Z=g.sent).ok){g.next=12;break}throw new Error("HTTP ".concat(Z.status," ").concat(Z.statusText," ").concat(I.url));case 12:if(200!==Z.status&&206!==Z.status){g.next=21;break}return g.next=15,I.getBufferFromResponse(Z);case 15:return b=g.sent,r=b.copy(C,A,0,Math.min(e,b.length)),h=Z.headers.get("content-range"),(G=/\/(\d+)$/.exec(h||""))&&G[1]&&(I._stat={size:parseInt(G[1],10)}),g.abrupt("return",{bytesRead:r,buffer:C});case 21:throw new Error("HTTP ".concat(Z.status," fetching ").concat(I.url));case 22:case"end":return g.stop()}}),g)})));return function(I){return g.apply(this,arguments)}}(),I}return Object(c.a)(C)}(II.RemoteFile);function Nd(I,g){if(!(this instanceof Nd?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');var C=function(){function C(){var I=this;Object(t.a)(this,C),g.chromSizesUrl="https://aveit.s3.amazonaws.com/higlass/data/sequence/hg38.chrom.sizes",this.dataConfig=g,this.bwFileHeader=null,this.bwFile=null,this.TILE_SIZE=1024,this.errorTxt="",this.dataPromises=[];var A=Qg(this.assembly).size,i=[],e={},l=0;Object.keys(Qg(this.assembly).size).forEach((function(g,C){var A={id:C,chr:g,pos:l};i.push(A),e[g]=A,l+=Qg(I.assembly).size[g]})),this.chromSizes={chrToAbs:function(g,C){return I.chromSizes.chrPositions[g].pos+C},cumPositions:i,chrPositions:e,totalLength:l,chromLengths:A},this.dataPromises.push(this.loadBBI(g))}return Object(c.a)(C,[{key:"loadBBI",value:function(I){var g=this;return I.url?(this.bwFile=new ZC.BigWig({filehandle:new Fd(I.url)}),this.bwFile.getHeader().then((function(I){g.bwFileHeader=I}))):(console.error('Please enter a "url" field to the data config'),null)}},{key:"tilesetInfo",value:function(I){var g=this;return this.tilesetInfoLoading=!0,Promise.all(this.dataPromises).then((function(){g.tilesetInfoLoading=!1;var C=g.chromSizes.totalLength,A={tile_size:g.TILE_SIZE,max_zoom:Math.ceil(Math.log(C/g.TILE_SIZE)/Math.log(2)),max_width:Math.pow(2,Math.ceil(Math.log(C)/Math.log(2))),min_pos:[0],max_pos:[C]};return I&&I(A),A})).catch((function(C){return g.tilesetInfoLoading=!1,console.error(C),I&&I({error:"Error parsing bigwig: ".concat(C)}),null}))}},{key:"fetchTilesDebounced",value:function(I,g){var C,A={},i=[],e=[],o=Object(l.a)(g);try{for(o.s();!(C=o.n()).done;){var t=C.value,c=t.split("."),n=parseInt(c[0],10),d=parseInt(c[1],10);Number.isNaN(d)||Number.isNaN(n)?console.warn("Invalid tile zoom or position:",n,d):(i.push(t),e.push(this.tile(n,d)))}}catch(s){o.e(s)}finally{o.f()}return Promise.all(e).then((function(g){for(var C=0;C<g.length;C++){var e=i[C];A[e]=g[C],A[e].tilePositionId=e}I(A)})),A}},{key:"tile",value:function(){var g=Object(e.a)(Object(i.a)().mark((function g(C,A){var e,l,o,t,c,n,d,s,a,Z,m,b,r,h=this;return Object(i.a)().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,this.tilesetInfo();case 2:for(e=g.sent,l=+e.max_width/Math.pow(2,+C),o=[],t={tilePos:[A],tileId:"bigwig.".concat(C,".").concat(A),zoomLevel:C},c=e.min_pos[0]+A*l,n=c,d=e.min_pos[0]+(A+1)*l,s=this.determineScale(n,d),a=(d-n)/this.TILE_SIZE,Z=[],m=0;m<this.TILE_SIZE;m++)Z.push(n+m*a);return b=this.chromSizes,r=b.chromLengths,b.cumPositions.forEach((function(g){var C,A,i=g.chr,e=g.pos,l=g.pos+r[i];if(e<=n&&n<l){if(!(d>l)){if(C=Math.floor(n-e),A=Math.ceil(d-e),!h.bwFile)return;return void o.push(h.bwFile.getFeatures(i,C,A,{scale:1/s}).then((function(g){return g.forEach((function(g){g.startAbs=I.utils.chrToAbs(i,g.start,h.chromSizes),g.endAbs=I.utils.chrToAbs(i,g.end,h.chromSizes)})),g})))}C=n-e,A=l-e,o.push(h.bwFile.getFeatures(i,C,A,{scale:1/s}).then((function(g){return g.forEach((function(g){g.startAbs=I.utils.chrToAbs(i,g.start,h.chromSizes),g.endAbs=I.utils.chrToAbs(i,g.end,h.chromSizes)})),g}))),n=l}})),g.abrupt("return",Promise.all(o).then((function(g){for(var C=g.flat(),A=[],i=0;i<h.TILE_SIZE;i++)A.push(null);Z.forEach((function(I,g){if(!(I<c||I>d)){var i=C.filter((function(g){return I>=g.startAbs&&I<g.endAbs})).map((function(I){return I.score}));A[g]=i.length>0?i[0]:null}}));var e=new I.utils.DenseDataExtrema1D(A);return t.min_value=Math.min.apply(Math,A),t.max_value=Math.max.apply(Math,A),t.dense=A,t.denseDataExtrema=e,t.minNonZero=e.minNonZeroInTile,t.maxNonZero=e.maxNonZeroInTile,t})));case 16:case"end":return g.stop()}}),g,this)})));return function(I,C){return g.apply(this,arguments)}}()},{key:"determineScale",value:function(I,g){var C,A=this,i=[1],e=g-I;if(!this.bwFileHeader)throw Error("no bigwig header");return this.bwFileHeader.zoomLevels.forEach((function(I){i.push(I.reductionLevel)})),i.forEach((function(I){C||e/I<=20*A.TILE_SIZE&&(C=I)})),C||i.slice(-1)[0]}}]),C}();return new C}Nd.config={type:"bigwig"};var vd={exports:{}};(function(I){function g(){for(var I=arguments.length,g=Array(I),C=0;C<I;C++)g[C]=arguments[C];if(g.length>1){g[0]=g[0].slice(0,-1);for(var A=g.length-1,i=1;i<A;++i)g[i]=g[i].slice(1,-1);return g[A]=g[A].slice(1),g.join("")}return g[0]}function C(I){return"(?:"+I+")"}function A(I){return void 0===I?"undefined":null===I?"null":Object.prototype.toString.call(I).split(" ").pop().split("]").shift().toLowerCase()}function i(I){return I.toUpperCase()}function e(I){return void 0!==I&&null!==I?I instanceof Array?I:"number"!==typeof I.length||I.split||I.setInterval||I.call?[I]:Array.prototype.slice.call(I):[]}function l(I,g){var C=I;if(g)for(var A in g)C[A]=g[A];return C}function o(I){var A="[A-Za-z]",i="[0-9]",e=g(i,"[A-Fa-f]"),l=C(C("%[EFef]"+e+"%"+e+e+"%"+e+e)+"|"+C("%[89A-Fa-f]"+e+"%"+e+e)+"|"+C("%"+e+e)),o="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",t=g("[\\:\\/\\?\\#\\[\\]\\@]",o),c=I?"[\\uE000-\\uF8FF]":"[]",n=g(A,i,"[\\-\\.\\_\\~]",I?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");C(A+g(A,i,"[\\+\\-\\.]")+"*"),C(C(l+"|"+g(n,o,"[\\:]"))+"*");var d=C(C("25[0-5]")+"|"+C("2[0-4]"+i)+"|"+C("1"+i+i)+"|"+C("0?[1-9]"+i)+"|0?0?"+i),s=C(d+"\\."+d+"\\."+d+"\\."+d),a=C(e+"{1,4}"),Z=C(C(a+"\\:"+a)+"|"+s),m=C(C(a+"\\:")+"{6}"+Z),b=C("\\:\\:"+C(a+"\\:")+"{5}"+Z),r=C(C(a)+"?\\:\\:"+C(a+"\\:")+"{4}"+Z),h=C(C(C(a+"\\:")+"{0,1}"+a)+"?\\:\\:"+C(a+"\\:")+"{3}"+Z),G=C(C(C(a+"\\:")+"{0,2}"+a)+"?\\:\\:"+C(a+"\\:")+"{2}"+Z),u=C(C(C(a+"\\:")+"{0,3}"+a)+"?\\:\\:"+a+"\\:"+Z),y=C(C(C(a+"\\:")+"{0,4}"+a)+"?\\:\\:"+Z),B=C(C(C(a+"\\:")+"{0,5}"+a)+"?\\:\\:"+a),V=C(C(C(a+"\\:")+"{0,6}"+a)+"?\\:\\:"),p=C([m,b,r,h,G,u,y,B,V].join("|")),X=C(C(n+"|"+l)+"+");C("[vV]"+e+"+\\."+g(n,o,"[\\:]")+"+"),C(C(l+"|"+g(n,o))+"*");var W=C(l+"|"+g(n,o,"[\\:\\@]"));return C(C(l+"|"+g(n,o,"[\\@]"))+"+"),C(C(W+"|"+g("[\\/\\?]",c))+"*"),{NOT_SCHEME:new RegExp(g("[^]",A,i,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(g("[^\\%\\:]",n,o),"g"),NOT_HOST:new RegExp(g("[^\\%\\[\\]\\:]",n,o),"g"),NOT_PATH:new RegExp(g("[^\\%\\/\\:\\@]",n,o),"g"),NOT_PATH_NOSCHEME:new RegExp(g("[^\\%\\/\\@]",n,o),"g"),NOT_QUERY:new RegExp(g("[^\\%]",n,o,"[\\:\\@\\/\\?]",c),"g"),NOT_FRAGMENT:new RegExp(g("[^\\%]",n,o,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(g("[^]",n,o),"g"),UNRESERVED:new RegExp(n,"g"),OTHER_CHARS:new RegExp(g("[^\\%]",n,t),"g"),PCT_ENCODED:new RegExp(l,"g"),IPV4ADDRESS:new RegExp("^("+s+")$"),IPV6ADDRESS:new RegExp("^\\[?("+p+")"+C(C("\\%25|\\%(?!"+e+"{2})")+"("+X+")")+"?\\]?$")}}var t=o(!1),c=o(!0),n=function(){function I(I,g){var C=[],A=!0,i=!1,e=void 0;try{for(var l,o=I[Symbol.iterator]();!(A=(l=o.next()).done)&&(C.push(l.value),!g||C.length!==g);A=!0);}catch(t){i=!0,e=t}finally{try{!A&&o.return&&o.return()}finally{if(i)throw e}}return C}return function(g,C){if(Array.isArray(g))return g;if(Symbol.iterator in Object(g))return I(g,C);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d=function(I){if(Array.isArray(I)){for(var g=0,C=Array(I.length);g<I.length;g++)C[g]=I[g];return C}return Array.from(I)},s=2147483647,a=36,Z=1,m=26,b=38,r=700,h=72,G=128,u="-",y=/^xn--/,B=/[^\0-\x7E]/,V=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},X=a-Z,W=Math.floor,H=String.fromCharCode;function Y(I){throw new RangeError(p[I])}function R(I,g){for(var C=[],A=I.length;A--;)C[A]=g(I[A]);return C}function f(I,g){var C=I.split("@"),A="";return C.length>1&&(A=C[0]+"@",I=C[1]),A+R((I=I.replace(V,".")).split("."),g).join(".")}function K(I){for(var g=[],C=0,A=I.length;C<A;){var i=I.charCodeAt(C++);if(i>=55296&&i<=56319&&C<A){var e=I.charCodeAt(C++);56320==(64512&e)?g.push(((1023&i)<<10)+(1023&e)+65536):(g.push(i),C--)}else g.push(i)}return g}var w=function(I){return I-48<10?I-22:I-65<26?I-65:I-97<26?I-97:a},J=function(I,g){return I+22+75*(I<26)-((0!=g)<<5)},S=function(I,g,C){var A=0;for(I=C?W(I/r):I>>1,I+=W(I/g);I>X*m>>1;A+=a)I=W(I/X);return W(A+(X+1)*I/(I+b))},F=function(I){var g=[],C=I.length,A=0,i=G,e=h,l=I.lastIndexOf(u);l<0&&(l=0);for(var o=0;o<l;++o)I.charCodeAt(o)>=128&&Y("not-basic"),g.push(I.charCodeAt(o));for(var t=l>0?l+1:0;t<C;){for(var c=A,n=1,d=a;;d+=a){t>=C&&Y("invalid-input");var b=w(I.charCodeAt(t++));(b>=a||b>W((s-A)/n))&&Y("overflow"),A+=b*n;var r=d<=e?Z:d>=e+m?m:d-e;if(b<r)break;var y=a-r;n>W(s/y)&&Y("overflow"),n*=y}var B=g.length+1;e=S(A-c,B,0==c),W(A/B)>s-i&&Y("overflow"),i+=W(A/B),A%=B,g.splice(A++,0,i)}return String.fromCodePoint.apply(String,g)},N=function(I){var g=[],C=(I=K(I)).length,A=G,i=0,e=h,l=!0,o=!1,t=void 0;try{for(var c,n=I[Symbol.iterator]();!(l=(c=n.next()).done);l=!0){var d=c.value;d<128&&g.push(H(d))}}catch(P){o=!0,t=P}finally{try{!l&&n.return&&n.return()}finally{if(o)throw t}}var b=g.length,r=b;for(b&&g.push(u);r<C;){var y=s,B=!0,V=!1,p=void 0;try{for(var X,R=I[Symbol.iterator]();!(B=(X=R.next()).done);B=!0){var f=X.value;f>=A&&f<y&&(y=f)}}catch(P){V=!0,p=P}finally{try{!B&&R.return&&R.return()}finally{if(V)throw p}}var w=r+1;y-A>W((s-i)/w)&&Y("overflow"),i+=(y-A)*w,A=y;var F=!0,N=!1,v=void 0;try{for(var k,D=I[Symbol.iterator]();!(F=(k=D.next()).done);F=!0){var z=k.value;if(z<A&&++i>s&&Y("overflow"),z==A){for(var M=i,U=a;;U+=a){var x=U<=e?Z:U>=e+m?m:U-e;if(M<x)break;var T=M-x,Q=a-x;g.push(H(J(x+T%Q,0))),M=W(T/Q)}g.push(H(J(M,0))),e=S(i,w,r==b),i=0,++r}}}catch(P){N=!0,v=P}finally{try{!F&&D.return&&D.return()}finally{if(N)throw v}}++i,++A}return g.join("")},v=function(I){return f(I,(function(I){return y.test(I)?F(I.slice(4).toLowerCase()):I}))},k=function(I){return f(I,(function(I){return B.test(I)?"xn--"+N(I):I}))},D={version:"2.1.0",ucs2:{decode:K,encode:function(I){return String.fromCodePoint.apply(String,d(I))}},decode:F,encode:N,toASCII:k,toUnicode:v},z={};function M(I){var g=I.charCodeAt(0);return g<16?"%0"+g.toString(16).toUpperCase():g<128?"%"+g.toString(16).toUpperCase():g<2048?"%"+(g>>6|192).toString(16).toUpperCase()+"%"+(63&g|128).toString(16).toUpperCase():"%"+(g>>12|224).toString(16).toUpperCase()+"%"+(g>>6&63|128).toString(16).toUpperCase()+"%"+(63&g|128).toString(16).toUpperCase()}function U(I){for(var g="",C=0,A=I.length;C<A;){var i=parseInt(I.substr(C+1,2),16);if(i<128)g+=String.fromCharCode(i),C+=3;else if(i>=194&&i<224){if(A-C>=6){var e=parseInt(I.substr(C+4,2),16);g+=String.fromCharCode((31&i)<<6|63&e)}else g+=I.substr(C,6);C+=6}else if(i>=224){if(A-C>=9){var l=parseInt(I.substr(C+4,2),16),o=parseInt(I.substr(C+7,2),16);g+=String.fromCharCode((15&i)<<12|(63&l)<<6|63&o)}else g+=I.substr(C,9);C+=9}else g+=I.substr(C,3),C+=3}return g}function x(I,g){function C(I){var C=U(I);return C.match(g.UNRESERVED)?C:I}return I.scheme&&(I.scheme=String(I.scheme).replace(g.PCT_ENCODED,C).toLowerCase().replace(g.NOT_SCHEME,"")),void 0!==I.userinfo&&(I.userinfo=String(I.userinfo).replace(g.PCT_ENCODED,C).replace(g.NOT_USERINFO,M).replace(g.PCT_ENCODED,i)),void 0!==I.host&&(I.host=String(I.host).replace(g.PCT_ENCODED,C).toLowerCase().replace(g.NOT_HOST,M).replace(g.PCT_ENCODED,i)),void 0!==I.path&&(I.path=String(I.path).replace(g.PCT_ENCODED,C).replace(I.scheme?g.NOT_PATH:g.NOT_PATH_NOSCHEME,M).replace(g.PCT_ENCODED,i)),void 0!==I.query&&(I.query=String(I.query).replace(g.PCT_ENCODED,C).replace(g.NOT_QUERY,M).replace(g.PCT_ENCODED,i)),void 0!==I.fragment&&(I.fragment=String(I.fragment).replace(g.PCT_ENCODED,C).replace(g.NOT_FRAGMENT,M).replace(g.PCT_ENCODED,i)),I}function T(I){return I.replace(/^0*(.*)/,"$1")||"0"}function Q(I,g){var C=I.match(g.IPV4ADDRESS)||[],A=n(C,2)[1];return A?A.split(".").map(T).join("."):I}function P(I,g){var C=I.match(g.IPV6ADDRESS)||[],A=n(C,3),i=A[1],e=A[2];if(i){for(var l=i.toLowerCase().split("::").reverse(),o=n(l,2),t=o[0],c=o[1],d=c?c.split(":").map(T):[],s=t.split(":").map(T),a=g.IPV4ADDRESS.test(s[s.length-1]),Z=a?7:8,m=s.length-Z,b=Array(Z),r=0;r<Z;++r)b[r]=d[r]||s[m+r]||"";a&&(b[Z-1]=Q(b[Z-1],g));var h=b.reduce((function(I,g,C){if(!g||"0"===g){var A=I[I.length-1];A&&A.index+A.length===C?A.length++:I.push({index:C,length:1})}return I}),[]).sort((function(I,g){return g.length-I.length}))[0],G=void 0;if(h&&h.length>1){var u=b.slice(0,h.index),y=b.slice(h.index+h.length);G=u.join(":")+"::"+y.join(":")}else G=b.join(":");return e&&(G+="%"+e),G}return I}var O=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,j=void 0==="".match(/(){0}/)[1];function L(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},C={},A=!1!==g.iri?c:t;"suffix"===g.reference&&(I=(g.scheme?g.scheme+":":"")+"//"+I);var i=I.match(O);if(i){j?(C.scheme=i[1],C.userinfo=i[3],C.host=i[4],C.port=parseInt(i[5],10),C.path=i[6]||"",C.query=i[7],C.fragment=i[8],isNaN(C.port)&&(C.port=i[5])):(C.scheme=i[1]||void 0,C.userinfo=-1!==I.indexOf("@")?i[3]:void 0,C.host=-1!==I.indexOf("//")?i[4]:void 0,C.port=parseInt(i[5],10),C.path=i[6]||"",C.query=-1!==I.indexOf("?")?i[7]:void 0,C.fragment=-1!==I.indexOf("#")?i[8]:void 0,isNaN(C.port)&&(C.port=I.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?i[4]:void 0)),C.host&&(C.host=P(Q(C.host,A),A)),void 0!==C.scheme||void 0!==C.userinfo||void 0!==C.host||void 0!==C.port||C.path||void 0!==C.query?void 0===C.scheme?C.reference="relative":void 0===C.fragment?C.reference="absolute":C.reference="uri":C.reference="same-document",g.reference&&"suffix"!==g.reference&&g.reference!==C.reference&&(C.error=C.error||"URI is not a "+g.reference+" reference.");var e=z[(g.scheme||C.scheme||"").toLowerCase()];if(g.unicodeSupport||e&&e.unicodeSupport)x(C,A);else{if(C.host&&(g.domainHost||e&&e.domainHost))try{C.host=D.toASCII(C.host.replace(A.PCT_ENCODED,U).toLowerCase())}catch(im){C.error=C.error||"Host's domain name can not be converted to ASCII via punycode: "+im}x(C,t)}e&&e.parse&&e.parse(C,g)}else C.error=C.error||"URI can not be parsed.";return C}function E(I,g){var C=!1!==g.iri?c:t,A=[];return void 0!==I.userinfo&&(A.push(I.userinfo),A.push("@")),void 0!==I.host&&A.push(P(Q(String(I.host),C),C).replace(C.IPV6ADDRESS,(function(I,g,C){return"["+g+(C?"%25"+C:"")+"]"}))),"number"!==typeof I.port&&"string"!==typeof I.port||(A.push(":"),A.push(String(I.port))),A.length?A.join(""):void 0}var _=/^\.\.?\//,$=/^\/\.(\/|$)/,q=/^\/\.\.(\/|$)/,II=/^\/?(?:.|\n)*?(?=\/|$)/;function gI(I){for(var g=[];I.length;)if(I.match(_))I=I.replace(_,"");else if(I.match($))I=I.replace($,"/");else if(I.match(q))I=I.replace(q,"/"),g.pop();else if("."===I||".."===I)I="";else{var C=I.match(II);if(!C)throw new Error("Unexpected dot segment condition");var A=C[0];I=I.slice(A.length),g.push(A)}return g.join("")}function CI(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},C=g.iri?c:t,A=[],i=z[(g.scheme||I.scheme||"").toLowerCase()];if(i&&i.serialize&&i.serialize(I,g),I.host)if(C.IPV6ADDRESS.test(I.host));else if(g.domainHost||i&&i.domainHost)try{I.host=g.iri?D.toUnicode(I.host):D.toASCII(I.host.replace(C.PCT_ENCODED,U).toLowerCase())}catch(im){I.error=I.error||"Host's domain name can not be converted to "+(g.iri?"Unicode":"ASCII")+" via punycode: "+im}x(I,C),"suffix"!==g.reference&&I.scheme&&(A.push(I.scheme),A.push(":"));var e=E(I,g);if(void 0!==e&&("suffix"!==g.reference&&A.push("//"),A.push(e),I.path&&"/"!==I.path.charAt(0)&&A.push("/")),void 0!==I.path){var l=I.path;g.absolutePath||i&&i.absolutePath||(l=gI(l)),void 0===e&&(l=l.replace(/^\/\//,"/%2F")),A.push(l)}return void 0!==I.query&&(A.push("?"),A.push(I.query)),void 0!==I.fragment&&(A.push("#"),A.push(I.fragment)),A.join("")}function AI(I,g){var C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},A={};return arguments[3]||(I=L(CI(I,C),C),g=L(CI(g,C),C)),!(C=C||{}).tolerant&&g.scheme?(A.scheme=g.scheme,A.userinfo=g.userinfo,A.host=g.host,A.port=g.port,A.path=gI(g.path||""),A.query=g.query):(void 0!==g.userinfo||void 0!==g.host||void 0!==g.port?(A.userinfo=g.userinfo,A.host=g.host,A.port=g.port,A.path=gI(g.path||""),A.query=g.query):(g.path?("/"===g.path.charAt(0)?A.path=gI(g.path):(void 0===I.userinfo&&void 0===I.host&&void 0===I.port||I.path?I.path?A.path=I.path.slice(0,I.path.lastIndexOf("/")+1)+g.path:A.path=g.path:A.path="/"+g.path,A.path=gI(A.path)),A.query=g.query):(A.path=I.path,void 0!==g.query?A.query=g.query:A.query=I.query),A.userinfo=I.userinfo,A.host=I.host,A.port=I.port),A.scheme=I.scheme),A.fragment=g.fragment,A}function iI(I,g,C){var A=l({scheme:"null"},C);return CI(AI(L(I,A),L(g,A),A,!0),A)}function eI(I,g){return"string"===typeof I?I=CI(L(I,g),g):"object"===A(I)&&(I=L(CI(I,g),g)),I}function lI(I,g,C){return"string"===typeof I?I=CI(L(I,C),C):"object"===A(I)&&(I=CI(I,C)),"string"===typeof g?g=CI(L(g,C),C):"object"===A(g)&&(g=CI(g,C)),I===g}function oI(I,g){return I&&I.toString().replace(g&&g.iri?c.ESCAPE:t.ESCAPE,M)}function tI(I,g){return I&&I.toString().replace(g&&g.iri?c.PCT_ENCODED:t.PCT_ENCODED,U)}var cI={scheme:"http",domainHost:!0,parse:function(I,g){return I.host||(I.error=I.error||"HTTP URIs must have a host."),I},serialize:function(I,g){var C="https"===String(I.scheme).toLowerCase();return I.port!==(C?443:80)&&""!==I.port||(I.port=void 0),I.path||(I.path="/"),I}},nI={scheme:"https",domainHost:cI.domainHost,parse:cI.parse,serialize:cI.serialize};function dI(I){return"boolean"===typeof I.secure?I.secure:"wss"===String(I.scheme).toLowerCase()}var sI={scheme:"ws",domainHost:!0,parse:function(I,g){var C=I;return C.secure=dI(C),C.resourceName=(C.path||"/")+(C.query?"?"+C.query:""),C.path=void 0,C.query=void 0,C},serialize:function(I,g){if(I.port!==(dI(I)?443:80)&&""!==I.port||(I.port=void 0),"boolean"===typeof I.secure&&(I.scheme=I.secure?"wss":"ws",I.secure=void 0),I.resourceName){var C=I.resourceName.split("?"),A=n(C,2),i=A[0],e=A[1];I.path=i&&"/"!==i?i:void 0,I.query=e,I.resourceName=void 0}return I.fragment=void 0,I}},aI={scheme:"wss",domainHost:sI.domainHost,parse:sI.parse,serialize:sI.serialize},ZI={},mI="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",bI="[0-9A-Fa-f]",rI=C(C("%[EFef]"+bI+"%"+bI+bI+"%"+bI+bI)+"|"+C("%[89A-Fa-f]"+bI+"%"+bI+bI)+"|"+C("%"+bI+bI)),hI="[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]",GI=g("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),uI="[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]",yI=new RegExp(mI,"g"),BI=new RegExp(rI,"g"),VI=new RegExp(g("[^]",hI,"[\\.]",'[\\"]',GI),"g"),pI=new RegExp(g("[^]",mI,uI),"g"),XI=pI;function WI(I){var g=U(I);return g.match(yI)?g:I}var HI={scheme:"mailto",parse:function(I,g){var C=I,A=C.to=C.path?C.path.split(","):[];if(C.path=void 0,C.query){for(var i=!1,e={},l=C.query.split("&"),o=0,t=l.length;o<t;++o){var c=l[o].split("=");switch(c[0]){case"to":for(var n=c[1].split(","),d=0,s=n.length;d<s;++d)A.push(n[d]);break;case"subject":C.subject=tI(c[1],g);break;case"body":C.body=tI(c[1],g);break;default:i=!0,e[tI(c[0],g)]=tI(c[1],g)}}i&&(C.headers=e)}C.query=void 0;for(var a=0,Z=A.length;a<Z;++a){var m=A[a].split("@");if(m[0]=tI(m[0]),g.unicodeSupport)m[1]=tI(m[1],g).toLowerCase();else try{m[1]=D.toASCII(tI(m[1],g).toLowerCase())}catch(im){C.error=C.error||"Email address's domain name can not be converted to ASCII via punycode: "+im}A[a]=m.join("@")}return C},serialize:function(I,g){var C=I,A=e(I.to);if(A){for(var l=0,o=A.length;l<o;++l){var t=String(A[l]),c=t.lastIndexOf("@"),n=t.slice(0,c).replace(BI,WI).replace(BI,i).replace(VI,M),d=t.slice(c+1);try{d=g.iri?D.toUnicode(d):D.toASCII(tI(d,g).toLowerCase())}catch(im){C.error=C.error||"Email address's domain name can not be converted to "+(g.iri?"Unicode":"ASCII")+" via punycode: "+im}A[l]=n+"@"+d}C.path=A.join(",")}var s=I.headers=I.headers||{};I.subject&&(s.subject=I.subject),I.body&&(s.body=I.body);var a=[];for(var Z in s)s[Z]!==ZI[Z]&&a.push(Z.replace(BI,WI).replace(BI,i).replace(pI,M)+"="+s[Z].replace(BI,WI).replace(BI,i).replace(XI,M));return a.length&&(C.query=a.join("&")),C}},YI=/^([^\:]+)\:(.*)/,RI={scheme:"urn",parse:function(I,g){var C=I.path&&I.path.match(YI),A=I;if(C){var i=g.scheme||A.scheme||"urn",e=C[1].toLowerCase(),l=C[2],o=i+":"+(g.nid||e),t=z[o];A.nid=e,A.nss=l,A.path=void 0,t&&(A=t.parse(A,g))}else A.error=A.error||"URN can not be parsed.";return A},serialize:function(I,g){var C=g.scheme||I.scheme||"urn",A=I.nid,i=C+":"+(g.nid||A),e=z[i];e&&(I=e.serialize(I,g));var l=I,o=I.nss;return l.path=(A||g.nid)+":"+o,l}},fI=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,KI={scheme:"urn:uuid",parse:function(I,g){var C=I;return C.uuid=C.nss,C.nss=void 0,g.tolerant||C.uuid&&C.uuid.match(fI)||(C.error=C.error||"UUID is not valid."),C},serialize:function(I,g){var C=I;return C.nss=(I.uuid||"").toLowerCase(),C}};z[cI.scheme]=cI,z[nI.scheme]=nI,z[sI.scheme]=sI,z[aI.scheme]=aI,z[HI.scheme]=HI,z[RI.scheme]=RI,z[KI.scheme]=KI,I.SCHEMES=z,I.pctEncChar=M,I.pctDecChars=U,I.parse=L,I.removeDotSegments=gI,I.serialize=CI,I.resolveComponents=AI,I.resolve=iI,I.normalize=eI,I.equal=lI,I.escapeComponent=oI,I.unescapeComponent=tI,Object.defineProperty(I,"__esModule",{value:!0})})(vd.exports);var kd=function I(g,C){if(g===C)return!0;if(g&&C&&"object"==typeof g&&"object"==typeof C){if(g.constructor!==C.constructor)return!1;var A,i,e;if(Array.isArray(g)){if((A=g.length)!=C.length)return!1;for(i=A;0!==i--;)if(!I(g[i],C[i]))return!1;return!0}if(g.constructor===RegExp)return g.source===C.source&&g.flags===C.flags;if(g.valueOf!==Object.prototype.valueOf)return g.valueOf()===C.valueOf();if(g.toString!==Object.prototype.toString)return g.toString()===C.toString();if((A=(e=Object.keys(g)).length)!==Object.keys(C).length)return!1;for(i=A;0!==i--;)if(!Object.prototype.hasOwnProperty.call(C,e[i]))return!1;for(i=A;0!==i--;){var l=e[i];if(!I(g[l],C[l]))return!1}return!0}return g!==g&&C!==C},Dd={copy:function(I,g){for(var C in g=g||{},I)g[C]=I[C];return g},checkDataType:zd,checkDataTypes:function(I,g,C){if(1===I.length)return zd(I[0],g,C,!0);var A="",i=Ud(I);for(var e in i.array&&i.object&&(A=i.null?"(":"(!"+g+" || ",A+="typeof "+g+' !== "object")',delete i.null,delete i.array,delete i.object),i.number&&delete i.integer,i)A+=(A?" && ":"")+zd(e,g,C,!0);return A},coerceToTypes:function(I,g){if(Array.isArray(g)){for(var C=[],A=0;A<g.length;A++){var i=g[A];(Md[i]||"array"===I&&"array"===i)&&(C[C.length]=i)}if(C.length)return C}else{if(Md[g])return[g];if("array"===I&&"array"===g)return["array"]}},toHash:Ud,getProperty:Qd,escapeQuotes:Pd,equal:kd,ucs2length:function(I){for(var g,C=0,A=I.length,i=0;i<A;)C++,(g=I.charCodeAt(i++))>=55296&&g<=56319&&i<A&&56320==(64512&(g=I.charCodeAt(i)))&&i++;return C},varOccurences:function(I,g){g+="[^0-9]";var C=I.match(new RegExp(g,"g"));return C?C.length:0},varReplace:function(I,g,C){return g+="([^0-9])",C=C.replace(/\$/g,"$$$$"),I.replace(new RegExp(g,"g"),C+"$1")},schemaHasRules:function(I,g){if("boolean"==typeof I)return!I;for(var C in I)if(g[C])return!0},schemaHasRulesExcept:function(I,g,C){if("boolean"==typeof I)return!I&&"not"!=C;for(var A in I)if(A!=C&&g[A])return!0},schemaUnknownRules:function(I,g){if("boolean"==typeof I)return;for(var C in I)if(!g[C])return C},toQuotedString:Od,getPathExpr:function(I,g,C,A){return Ed(I,C?"'/' + "+g+(A?"":".replace(/~/g, '~0').replace(/\\//g, '~1')"):A?"'[' + "+g+" + ']'":"'[\\'' + "+g+" + '\\']'")},getPath:function(I,g,C){var A=Od(C?"/"+_d(g):Qd(g));return Ed(I,A)},getData:function(I,g,C){var A,i,e,l;if(""===I)return"rootData";if("/"==I[0]){if(!jd.test(I))throw new Error("Invalid JSON-pointer: "+I);i=I,e="rootData"}else{if(!(l=I.match(Ld)))throw new Error("Invalid JSON-pointer: "+I);if(A=+l[1],"#"==(i=l[2])){if(A>=g)throw new Error("Cannot access property/index "+A+" levels up, current level is "+g);return C[g-A]}if(A>g)throw new Error("Cannot access data "+A+" levels up, current level is "+g);if(e="data"+(g-A||""),!i)return e}for(var o=e,t=i.split("/"),c=0;c<t.length;c++){var n=t[c];n&&(e+=Qd($d(n)),o+=" && "+e)}return o},unescapeFragment:function(I){return $d(decodeURIComponent(I))},unescapeJsonPointer:$d,escapeFragment:function(I){return encodeURIComponent(_d(I))},escapeJsonPointer:_d};function zd(I,g,C,A){var i=A?" !== ":" === ",e=A?" || ":" && ",l=A?"!":"",o=A?"":"!";switch(I){case"null":return g+i+"null";case"array":return l+"Array.isArray("+g+")";case"object":return"("+l+g+e+"typeof "+g+i+'"object"'+e+o+"Array.isArray("+g+"))";case"integer":return"(typeof "+g+i+'"number"'+e+o+"("+g+" % 1)"+e+g+i+g+(C?e+l+"isFinite("+g+")":"")+")";case"number":return"(typeof "+g+i+'"'+I+'"'+(C?e+l+"isFinite("+g+")":"")+")";default:return"typeof "+g+i+'"'+I+'"'}}var Md=Ud(["string","number","integer","boolean","null"]);function Ud(I){for(var g={},C=0;C<I.length;C++)g[I[C]]=!0;return g}var xd=/^[a-z$_][a-z$_0-9]*$/i,Td=/'|\\/g;function Qd(I){return"number"==typeof I?"["+I+"]":xd.test(I)?"."+I:"['"+Pd(I)+"']"}function Pd(I){return I.replace(Td,"\\$&").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\f/g,"\\f").replace(/\t/g,"\\t")}function Od(I){return"'"+Pd(I)+"'"}var jd=/^\/(?:[^~]|~0|~1)*$/,Ld=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function Ed(I,g){return'""'==I?g:(I+" + "+g).replace(/([^\\])' \+ '/g,"$1")}function _d(I){return I.replace(/~/g,"~0").replace(/\//g,"~1")}function $d(I){return I.replace(/~1/g,"/").replace(/~0/g,"~")}var qd=Dd,Is=function(I){qd.copy(I,this)};var gs={exports:{}},Cs=gs.exports=function(I,g,C){"function"==typeof g&&(C=g,g={}),As(g,"function"==typeof(C=g.cb||C)?C:C.pre||function(){},C.post||function(){},I,"",I)};function As(I,g,C,A,i,e,l,o,t,c){if(A&&"object"==typeof A&&!Array.isArray(A)){for(var n in g(A,i,e,l,o,t,c),A){var d=A[n];if(Array.isArray(d)){if(n in Cs.arrayKeywords)for(var s=0;s<d.length;s++)As(I,g,C,d[s],i+"/"+n+"/"+s,e,i,n,A,s)}else if(n in Cs.propsKeywords){if(d&&"object"==typeof d)for(var a in d)As(I,g,C,d[a],i+"/"+n+"/"+a.replace(/~/g,"~0").replace(/\//g,"~1"),e,i,n,A,a)}else(n in Cs.keywords||I.allKeys&&!(n in Cs.skipKeywords))&&As(I,g,C,d,i+"/"+n,e,i,n,A)}C(A,i,e,l,o,t,c)}}Cs.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0},Cs.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},Cs.propsKeywords={definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},Cs.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};var is=vd.exports,es=kd,ls=Dd,os=Is,ts=gs.exports,cs=ns;function ns(I,g,C){var A=this._refs[C];if("string"==typeof A){if(!this._refs[A])return ns.call(this,I,g,A);A=this._refs[A]}if((A=A||this._schemas[C])instanceof os)return bs(A.schema,this._opts.inlineRefs)?A.schema:A.validate||this._compile(A);var i,e,l,o=ds.call(this,g,C);return o&&(i=o.schema,g=o.root,l=o.baseId),i instanceof os?e=i.validate||I.call(this,i.schema,g,void 0,l):void 0!==i&&(e=bs(i,this._opts.inlineRefs)?i:I.call(this,i,g,void 0,l)),e}function ds(I,g){var C=is.parse(g),A=us(C),i=Gs(this._getId(I.schema));if(0===Object.keys(I.schema).length||A!==i){var e=Bs(A),l=this._refs[e];if("string"==typeof l)return ss.call(this,I,l,C);if(l instanceof os)l.validate||this._compile(l),I=l;else{if(!((l=this._schemas[e])instanceof os))return;if(l.validate||this._compile(l),e==Bs(g))return{schema:l,root:I,baseId:i};I=l}if(!I.schema)return;i=Gs(this._getId(I.schema))}return Zs.call(this,C,i,I.schema,I)}function ss(I,g,C){var A=ds.call(this,I,g);if(A){var i=A.schema,e=A.baseId;I=A.root;var l=this._getId(i);return l&&(e=Vs(e,l)),Zs.call(this,C,e,i,I)}}ns.normalizeId=Bs,ns.fullPath=Gs,ns.url=Vs,ns.ids=function(I){var g=Bs(this._getId(I)),C={"":g},A={"":Gs(g,!1)},i={},e=this;return ts(I,{allKeys:!0},(function(I,g,l,o,t,c,n){if(""!==g){var d=e._getId(I),s=C[o],a=A[o]+"/"+t;if(void 0!==n&&(a+="/"+("number"==typeof n?n:ls.escapeFragment(n))),"string"==typeof d){d=s=Bs(s?is.resolve(s,d):d);var Z=e._refs[d];if("string"==typeof Z&&(Z=e._refs[Z]),Z&&Z.schema){if(!es(I,Z.schema))throw new Error('id "'+d+'" resolves to more than one schema')}else if(d!=Bs(a))if("#"==d[0]){if(i[d]&&!es(I,i[d]))throw new Error('id "'+d+'" resolves to more than one schema');i[d]=I}else e._refs[d]=a}C[g]=s,A[g]=a}})),i},ns.inlineRef=bs,ns.schema=ds;var as=ls.toHash(["properties","patternProperties","enum","dependencies","definitions"]);function Zs(I,g,C,A){if(I.fragment=I.fragment||"","/"==I.fragment.slice(0,1)){for(var i=I.fragment.split("/"),e=1;e<i.length;e++){var l=i[e];if(l){if(void 0===(C=C[l=ls.unescapeFragment(l)]))break;var o;if(!as[l]&&((o=this._getId(C))&&(g=Vs(g,o)),C.$ref)){var t=Vs(g,C.$ref),c=ds.call(this,A,t);c&&(C=c.schema,A=c.root,g=c.baseId)}}}return void 0!==C&&C!==A.schema?{schema:C,root:A,baseId:g}:void 0}}var ms=ls.toHash(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum"]);function bs(I,g){return!1!==g&&(void 0===g||!0===g?rs(I):g?hs(I)<=g:void 0)}function rs(I){var g;if(Array.isArray(I)){for(var C=0;C<I.length;C++)if("object"==typeof(g=I[C])&&!rs(g))return!1}else for(var A in I){if("$ref"==A)return!1;if("object"==typeof(g=I[A])&&!rs(g))return!1}return!0}function hs(I){var g,C=0;if(Array.isArray(I)){for(var A=0;A<I.length;A++)if("object"==typeof(g=I[A])&&(C+=hs(g)),C==1/0)return 1/0}else for(var i in I){if("$ref"==i)return 1/0;if(ms[i])C++;else if("object"==typeof(g=I[i])&&(C+=hs(g)+1),C==1/0)return 1/0}return C}function Gs(I,g){return!1!==g&&(I=Bs(I)),us(is.parse(I))}function us(I){return is.serialize(I).split("#")[0]+"#"}var ys=/#\/?$/;function Bs(I){return I?I.replace(ys,""):""}function Vs(I,g){return g=Bs(g),is.resolve(I,g)}var ps=cs,Xs={Validation:Hs((function(I){this.message="validation failed",this.errors=I,this.ajv=this.validation=!0})),MissingRef:Hs(Ws)};function Ws(I,g,C){this.message=C||Ws.message(I,g),this.missingRef=ps.url(I,g),this.missingSchema=ps.normalizeId(ps.fullPath(this.missingRef))}function Hs(I){return I.prototype=Object.create(Error.prototype),I.prototype.constructor=I,I}Ws.message=function(I,g){return"can't resolve reference "+g+" from id "+I};var Ys=function(I,g){g||(g={}),"function"===typeof g&&(g={cmp:g});var C,A="boolean"===typeof g.cycles&&g.cycles,i=g.cmp&&(C=g.cmp,function(I){return function(g,A){var i={key:g,value:I[g]},e={key:A,value:I[A]};return C(i,e)}}),e=[];return function I(g){if(g&&g.toJSON&&"function"===typeof g.toJSON&&(g=g.toJSON()),void 0!==g){if("number"==typeof g)return isFinite(g)?""+g:"null";if("object"!==typeof g)return JSON.stringify(g);var C,l;if(Array.isArray(g)){for(l="[",C=0;C<g.length;C++)C&&(l+=","),l+=I(g[C])||"null";return l+"]"}if(null===g)return"null";if(-1!==e.indexOf(g)){if(A)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var o=e.push(g)-1,t=Object.keys(g).sort(i&&i(g));for(l="",C=0;C<t.length;C++){var c=t[C],n=I(g[c]);n&&(l&&(l+=","),l+=JSON.stringify(c)+":"+n)}return e.splice(o,1),"{"+l+"}"}}(I)},Rs=function(I,g,C){var A="",i=!0===I.schema.$async,e=I.util.schemaHasRulesExcept(I.schema,I.RULES.all,"$ref"),l=I.self._getId(I.schema);if(I.opts.strictKeywords){var o=I.util.schemaUnknownRules(I.schema,I.RULES.keywords);if(o){var t="unknown keyword: "+o;if("log"!==I.opts.strictKeywords)throw new Error(t);I.logger.warn(t)}}if(I.isTop&&(A+=" var validate = ",i&&(I.async=!0,A+="async "),A+="function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ",l&&(I.opts.sourceCode||I.opts.processCode)&&(A+=" /*# sourceURL="+l+" */ ")),"boolean"==typeof I.schema||!e&&!I.schema.$ref){g="false schema";var c=I.level,n=I.dataLevel,d=I.schema[g],s=I.schemaPath+I.util.getProperty(g),a=I.errSchemaPath+"/"+g,Z=!I.opts.allErrors,m="data"+(n||""),b="valid"+c;if(!1===I.schema){I.isTop?Z=!0:A+=" var "+b+" = false; ",(E=E||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'false schema' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(a)+" , params: {} ",!1!==I.opts.messages&&(A+=" , message: 'boolean schema is false' "),I.opts.verbose&&(A+=" , schema: false , parentSchema: validate.schema"+I.schemaPath+" , data: "+m+" "),A+=" } "):A+=" {} ";var r=A;A=E.pop(),!I.compositeRule&&Z?I.async?A+=" throw new ValidationError(["+r+"]); ":A+=" validate.errors = ["+r+"]; return false; ":A+=" var err = "+r+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else I.isTop?A+=i?" return data; ":" validate.errors = null; return true; ":A+=" var "+b+" = true; ";return I.isTop&&(A+=" }; return validate; "),A}if(I.isTop){var h=I.isTop;c=I.level=0,n=I.dataLevel=0,m="data";if(I.rootId=I.resolve.fullPath(I.self._getId(I.root.schema)),I.baseId=I.baseId||I.rootId,delete I.isTop,I.dataPathArr=[""],void 0!==I.schema.default&&I.opts.useDefaults&&I.opts.strictDefaults){var G="default is ignored in the schema root";if("log"!==I.opts.strictDefaults)throw new Error(G);I.logger.warn(G)}A+=" var vErrors = null; ",A+=" var errors = 0;     ",A+=" if (rootData === undefined) rootData = data; "}else{c=I.level,m="data"+((n=I.dataLevel)||"");if(l&&(I.baseId=I.resolve.url(I.baseId,l)),i&&!I.async)throw new Error("async schema in sync schema");A+=" var errs_"+c+" = errors;"}b="valid"+c,Z=!I.opts.allErrors;var u="",y="",B=I.schema.type,V=Array.isArray(B);if(B&&I.opts.nullable&&!0===I.schema.nullable&&(V?-1==B.indexOf("null")&&(B=B.concat("null")):"null"!=B&&(B=[B,"null"],V=!0)),V&&1==B.length&&(B=B[0],V=!1),I.schema.$ref&&e){if("fail"==I.opts.extendRefs)throw new Error('$ref: validation keywords used in schema at path "'+I.errSchemaPath+'" (see option extendRefs)');!0!==I.opts.extendRefs&&(e=!1,I.logger.warn('$ref: keywords ignored in schema at path "'+I.errSchemaPath+'"'))}if(I.schema.$comment&&I.opts.$comment&&(A+=" "+I.RULES.all.$comment.code(I,"$comment")),B){if(I.opts.coerceTypes)var p=I.util.coerceToTypes(I.opts.coerceTypes,B);var X=I.RULES.types[B];if(p||V||!0===X||X&&!_(X)){s=I.schemaPath+".type",a=I.errSchemaPath+"/type",s=I.schemaPath+".type",a=I.errSchemaPath+"/type";var W=V?"checkDataTypes":"checkDataType";if(A+=" if ("+I.util[W](B,m,I.opts.strictNumbers,!0)+") { ",p){var H="dataType"+c,Y="coerced"+c;A+=" var "+H+" = typeof "+m+"; var "+Y+" = undefined; ","array"==I.opts.coerceTypes&&(A+=" if ("+H+" == 'object' && Array.isArray("+m+") && "+m+".length == 1) { "+m+" = "+m+"[0]; "+H+" = typeof "+m+"; if ("+I.util.checkDataType(I.schema.type,m,I.opts.strictNumbers)+") "+Y+" = "+m+"; } "),A+=" if ("+Y+" !== undefined) ; ";var R=p;if(R)for(var f,K=-1,w=R.length-1;K<w;)"string"==(f=R[K+=1])?A+=" else if ("+H+" == 'number' || "+H+" == 'boolean') "+Y+" = '' + "+m+"; else if ("+m+" === null) "+Y+" = ''; ":"number"==f||"integer"==f?(A+=" else if ("+H+" == 'boolean' || "+m+" === null || ("+H+" == 'string' && "+m+" && "+m+" == +"+m+" ","integer"==f&&(A+=" && !("+m+" % 1)"),A+=")) "+Y+" = +"+m+"; "):"boolean"==f?A+=" else if ("+m+" === 'false' || "+m+" === 0 || "+m+" === null) "+Y+" = false; else if ("+m+" === 'true' || "+m+" === 1) "+Y+" = true; ":"null"==f?A+=" else if ("+m+" === '' || "+m+" === 0 || "+m+" === false) "+Y+" = null; ":"array"==I.opts.coerceTypes&&"array"==f&&(A+=" else if ("+H+" == 'string' || "+H+" == 'number' || "+H+" == 'boolean' || "+m+" == null) "+Y+" = ["+m+"]; ");A+=" else {   ",(E=E||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'type' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(a)+" , params: { type: '",A+=V?""+B.join(","):""+B,A+="' } ",!1!==I.opts.messages&&(A+=" , message: 'should be ",A+=V?""+B.join(","):""+B,A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+m+" "),A+=" } "):A+=" {} ";r=A;A=E.pop(),!I.compositeRule&&Z?I.async?A+=" throw new ValidationError(["+r+"]); ":A+=" validate.errors = ["+r+"]; return false; ":A+=" var err = "+r+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } if ("+Y+" !== undefined) {  ";var J=n?"data"+(n-1||""):"parentData";A+=" "+m+" = "+Y+"; ",n||(A+="if ("+J+" !== undefined)"),A+=" "+J+"["+(n?I.dataPathArr[n]:"parentDataProperty")+"] = "+Y+"; } "}else{(E=E||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'type' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(a)+" , params: { type: '",A+=V?""+B.join(","):""+B,A+="' } ",!1!==I.opts.messages&&(A+=" , message: 'should be ",A+=V?""+B.join(","):""+B,A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+m+" "),A+=" } "):A+=" {} ";r=A;A=E.pop(),!I.compositeRule&&Z?I.async?A+=" throw new ValidationError(["+r+"]); ":A+=" validate.errors = ["+r+"]; return false; ":A+=" var err = "+r+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}A+=" } "}}if(I.schema.$ref&&!e)A+=" "+I.RULES.all.$ref.code(I,"$ref")+" ",Z&&(A+=" } if (errors === ",A+=h?"0":"errs_"+c,A+=") { ",y+="}");else{var S=I.RULES;if(S)for(var F=-1,N=S.length-1;F<N;)if(_(X=S[F+=1])){if(X.type&&(A+=" if ("+I.util.checkDataType(X.type,m,I.opts.strictNumbers)+") { "),I.opts.useDefaults)if("object"==X.type&&I.schema.properties){d=I.schema.properties;var v=Object.keys(d);if(v)for(var k,D=-1,z=v.length-1;D<z;){if(void 0!==(x=d[k=v[D+=1]]).default){var M=m+I.util.getProperty(k);if(I.compositeRule){if(I.opts.strictDefaults){G="default is ignored for: "+M;if("log"!==I.opts.strictDefaults)throw new Error(G);I.logger.warn(G)}}else A+=" if ("+M+" === undefined ","empty"==I.opts.useDefaults&&(A+=" || "+M+" === null || "+M+" === '' "),A+=" ) "+M+" = ","shared"==I.opts.useDefaults?A+=" "+I.useDefault(x.default)+" ":A+=" "+JSON.stringify(x.default)+" ",A+="; "}}}else if("array"==X.type&&Array.isArray(I.schema.items)){var U=I.schema.items;if(U){K=-1;for(var x,T=U.length-1;K<T;)if(void 0!==(x=U[K+=1]).default){M=m+"["+K+"]";if(I.compositeRule){if(I.opts.strictDefaults){G="default is ignored for: "+M;if("log"!==I.opts.strictDefaults)throw new Error(G);I.logger.warn(G)}}else A+=" if ("+M+" === undefined ","empty"==I.opts.useDefaults&&(A+=" || "+M+" === null || "+M+" === '' "),A+=" ) "+M+" = ","shared"==I.opts.useDefaults?A+=" "+I.useDefault(x.default)+" ":A+=" "+JSON.stringify(x.default)+" ",A+="; "}}}var Q=X.rules;if(Q)for(var P,O=-1,j=Q.length-1;O<j;)if($(P=Q[O+=1])){var L=P.code(I,P.keyword,X.type);L&&(A+=" "+L+" ",Z&&(u+="}"))}if(Z&&(A+=" "+u+" ",u=""),X.type&&(A+=" } ",B&&B===X.type&&!p)){A+=" else { ";var E;s=I.schemaPath+".type",a=I.errSchemaPath+"/type";(E=E||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'type' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(a)+" , params: { type: '",A+=V?""+B.join(","):""+B,A+="' } ",!1!==I.opts.messages&&(A+=" , message: 'should be ",A+=V?""+B.join(","):""+B,A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+s+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+m+" "),A+=" } "):A+=" {} ";r=A;A=E.pop(),!I.compositeRule&&Z?I.async?A+=" throw new ValidationError(["+r+"]); ":A+=" validate.errors = ["+r+"]; return false; ":A+=" var err = "+r+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } "}Z&&(A+=" if (errors === ",A+=h?"0":"errs_"+c,A+=") { ",y+="}")}}function _(I){for(var g=I.rules,C=0;C<g.length;C++)if($(g[C]))return!0}function $(g){return void 0!==I.schema[g.keyword]||g.implements&&function(g){for(var C=g.implements,A=0;A<C.length;A++)if(void 0!==I.schema[C[A]])return!0}(g)}return Z&&(A+=" "+y+" "),h?(i?(A+=" if (errors === 0) return data;           ",A+=" else throw new ValidationError(vErrors); "):(A+=" validate.errors = vErrors; ",A+=" return errors === 0;       "),A+=" }; return validate;"):A+=" var "+b+" = errors === errs_"+c+";",A},fs=cs,Ks=Dd,ws=Xs,Js=Ys,Ss=Rs,Fs=Ks.ucs2length,Ns=kd,vs=ws.Validation,ks=function I(g,C,A,i){var e=this,l=this._opts,o=[void 0],t={},c=[],n={},d=[],s={},a=[];C=C||{schema:g,refVal:o,refs:t};var Z=Ds.call(this,g,C,i),m=this._compilations[Z.index];if(Z.compiling)return m.callValidate=function I(){var g=m.validate,C=g.apply(this,arguments);return I.errors=g.errors,C};var b=this._formats,r=this.RULES;try{var h=u(g,C,A,i);m.validate=h;var G=m.callValidate;return G&&(G.schema=h.schema,G.errors=null,G.refs=h.refs,G.refVal=h.refVal,G.root=h.root,G.$async=h.$async,l.sourceCode&&(G.source=h.source)),h}finally{zs.call(this,g,C,i)}function u(g,A,i,n){var s=!A||A&&A.schema==g;if(A.schema!=C.schema)return I.call(e,g,A,i,n);var Z,m=!0===g.$async,h=Ss({isTop:!0,schema:g,isRoot:s,baseId:n,root:A,schemaPath:"",errSchemaPath:"#",errorPath:'""',MissingRefError:ws.MissingRef,RULES:r,validate:Ss,util:Ks,resolve:fs,resolveRef:y,usePattern:p,useDefault:X,useCustomRule:W,opts:l,formats:b,logger:e.logger,self:e});h=Ps(o,Ts)+Ps(c,Us)+Ps(d,xs)+Ps(a,Qs)+h,l.processCode&&(h=l.processCode(h,g));try{Z=new Function("self","RULES","formats","root","refVal","defaults","customRules","equal","ucs2length","ValidationError",h)(e,r,b,C,o,d,a,Ns,Fs,vs),o[0]=Z}catch(im){throw e.logger.error("Error compiling schema, function code:",h),im}return Z.schema=g,Z.errors=null,Z.refs=t,Z.refVal=o,Z.root=s?Z:A,m&&(Z.$async=!0),!0===l.sourceCode&&(Z.source={code:h,patterns:c,defaults:d}),Z}function y(g,i,c){i=fs.url(g,i);var n,d,s=t[i];if(void 0!==s)return V(n=o[s],d="refVal["+s+"]");if(!c&&C.refs){var a=C.refs[i];if(void 0!==a)return V(n=C.refVal[a],d=B(i,n))}d=B(i);var Z=fs.call(e,u,C,i);if(void 0===Z){var m=A&&A[i];m&&(Z=fs.inlineRef(m,l.inlineRefs)?m:I.call(e,m,C,A,g))}if(void 0!==Z)return function(I,g){var C=t[I];o[C]=g}(i,Z),V(Z,d);!function(I){delete t[I]}(i)}function B(I,g){var C=o.length;return o[C]=g,t[I]=C,"refVal"+C}function V(I,g){return"object"==typeof I||"boolean"==typeof I?{code:g,schema:I,inline:!0}:{code:g,$async:I&&!!I.$async}}function p(I){var g=n[I];return void 0===g&&(g=n[I]=c.length,c[g]=I),"pattern"+g}function X(I){switch(typeof I){case"boolean":case"number":return""+I;case"string":return Ks.toQuotedString(I);case"object":if(null===I)return"null";var g=Js(I),C=s[g];return void 0===C&&(C=s[g]=d.length,d[C]=I),"default"+C}}function W(I,g,C,A){if(!1!==e._opts.validateSchema){var i=I.definition.dependencies;if(i&&!i.every((function(I){return Object.prototype.hasOwnProperty.call(C,I)})))throw new Error("parent schema must have all required keywords: "+i.join(","));var o=I.definition.validateSchema;if(o)if(!o(g)){var t="keyword schema is invalid: "+e.errorsText(o.errors);if("log"!=e._opts.validateSchema)throw new Error(t);e.logger.error(t)}}var c,n=I.definition.compile,d=I.definition.inline,s=I.definition.macro;if(n)c=n.call(e,g,C,A);else if(s)c=s.call(e,g,C,A),!1!==l.validateSchema&&e.validateSchema(c,!0);else if(d)c=d.call(e,A,I.keyword,g,C);else if(!(c=I.definition.validate))return;if(void 0===c)throw new Error('custom keyword "'+I.keyword+'"failed to compile');var Z=a.length;return a[Z]=c,{code:"customRule"+Z,validate:c}}};function Ds(I,g,C){var A=Ms.call(this,I,g,C);return A>=0?{index:A,compiling:!0}:(A=this._compilations.length,this._compilations[A]={schema:I,root:g,baseId:C},{index:A,compiling:!1})}function zs(I,g,C){var A=Ms.call(this,I,g,C);A>=0&&this._compilations.splice(A,1)}function Ms(I,g,C){for(var A=0;A<this._compilations.length;A++){var i=this._compilations[A];if(i.schema==I&&i.root==g&&i.baseId==C)return A}return-1}function Us(I,g){return"var pattern"+I+" = new RegExp("+Ks.toQuotedString(g[I])+");"}function xs(I){return"var default"+I+" = defaults["+I+"];"}function Ts(I,g){return void 0===g[I]?"":"var refVal"+I+" = refVal["+I+"];"}function Qs(I){return"var customRule"+I+" = customRules["+I+"];"}function Ps(I,g){if(!I.length)return"";for(var C="",A=0;A<I.length;A++)C+=g(A,I);return C}var Os={exports:{}},js=Os.exports=function(){this._cache={}};js.prototype.put=function(I,g){this._cache[I]=g},js.prototype.get=function(I){return this._cache[I]},js.prototype.del=function(I){delete this._cache[I]},js.prototype.clear=function(){this._cache={}};var Ls=Dd,Es=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,_s=[0,31,28,31,30,31,30,31,31,30,31,30,31],$s=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i,qs=/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,Ia=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,ga=/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,Ca=/^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i,Aa=/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,ia=/^(?:\/(?:[^~/]|~0|~1)*)*$/,ea=/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,la=/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,oa=ta;function ta(I){return I="full"==I?"full":"fast",Ls.copy(ta[I])}function ca(I){var g=I.match(Es);if(!g)return!1;var C=+g[1],A=+g[2],i=+g[3];return A>=1&&A<=12&&i>=1&&i<=(2==A&&function(I){return I%4===0&&(I%100!==0||I%400===0)}(C)?29:_s[A])}function na(I,g){var C=I.match($s);if(!C)return!1;var A=C[1],i=C[2],e=C[3],l=C[5];return(A<=23&&i<=59&&e<=59||23==A&&59==i&&60==e)&&(!g||l)}ta.fast={date:/^\d\d\d\d-[0-1]\d-[0-3]\d$/,time:/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,"date-time":/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,"uri-template":ga,url:Ca,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,hostname:qs,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:Za,uuid:Aa,"json-pointer":ia,"json-pointer-uri-fragment":ea,"relative-json-pointer":la},ta.full={date:ca,time:na,"date-time":function(I){var g=I.split(da);return 2==g.length&&ca(g[0])&&na(g[1],!0)},uri:function(I){return sa.test(I)&&Ia.test(I)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":ga,url:Ca,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:qs,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,regex:Za,uuid:Aa,"json-pointer":ia,"json-pointer-uri-fragment":ea,"relative-json-pointer":la};var da=/t|\s/i;var sa=/\/|:/;var aa=/[^\\]\\Z/;function Za(I){if(aa.test(I))return!1;try{return new RegExp(I),!0}catch(im){return!1}}var ma=function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o;var a="maximum"==g,Z=a?"exclusiveMaximum":"exclusiveMinimum",m=I.schema[Z],b=I.opts.$data&&m&&m.$data,r=a?"<":">",h=a?">":"<",G=void 0;if(!s&&"number"!=typeof o&&void 0!==o)throw new Error(g+" must be number");if(!b&&void 0!==m&&"number"!=typeof m&&"boolean"!=typeof m)throw new Error(Z+" must be number or boolean");if(b){var u=I.util.getData(m.$data,l,I.dataPathArr),y="exclusive"+e,B="exclType"+e,V="exclIsNumber"+e,p="' + "+(H="op"+e)+" + '";i+=" var schemaExcl"+e+" = "+u+"; ",i+=" var "+y+"; var "+B+" = typeof "+(u="schemaExcl"+e)+"; if ("+B+" != 'boolean' && "+B+" != 'undefined' && "+B+" != 'number') { ";var X;G=Z;(X=X||[]).push(i),i="",!1!==I.createErrors?(i+=" { keyword: '"+(G||"_exclusiveLimit")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: {} ",!1!==I.opts.messages&&(i+=" , message: '"+Z+" should be boolean' "),I.opts.verbose&&(i+=" , schema: validate.schema"+t+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var W=i;i=X.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+W+"]); ":i+=" validate.errors = ["+W+"]; return false; ":i+=" var err = "+W+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } else if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),i+=" "+B+" == 'number' ? ( ("+y+" = "+A+" === undefined || "+u+" "+r+"= "+A+") ? "+d+" "+h+"= "+u+" : "+d+" "+h+" "+A+" ) : ( ("+y+" = "+u+" === true) ? "+d+" "+h+"= "+A+" : "+d+" "+h+" "+A+" ) || "+d+" !== "+d+") { var op"+e+" = "+y+" ? '"+r+"' : '"+r+"='; ",void 0===o&&(G=Z,c=I.errSchemaPath+"/"+Z,A=u,s=b)}else{p=r;if((V="number"==typeof m)&&s){var H="'"+p+"'";i+=" if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),i+=" ( "+A+" === undefined || "+m+" "+r+"= "+A+" ? "+d+" "+h+"= "+m+" : "+d+" "+h+" "+A+" ) || "+d+" !== "+d+") { "}else{V&&void 0===o?(y=!0,G=Z,c=I.errSchemaPath+"/"+Z,A=m,h+="="):(V&&(A=Math[a?"min":"max"](m,o)),m===(!V||A)?(y=!0,G=Z,c=I.errSchemaPath+"/"+Z,h+="="):(y=!1,p+="="));H="'"+p+"'";i+=" if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),i+=" "+d+" "+h+" "+A+" || "+d+" !== "+d+") { "}}G=G||g,(X=X||[]).push(i),i="",!1!==I.createErrors?(i+=" { keyword: '"+(G||"_limit")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { comparison: "+H+", limit: "+A+", exclusive: "+y+" } ",!1!==I.opts.messages&&(i+=" , message: 'should be "+p+" ",i+=s?"' + "+A:A+"'"),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";W=i;return i=X.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+W+"]); ":i+=" validate.errors = ["+W+"]; return false; ":i+=" var err = "+W+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",n&&(i+=" else { "),i},ba=function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;if(s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,!s&&"number"!=typeof o)throw new Error(g+" must be number");i+="if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),i+=" "+d+".length "+("maxItems"==g?">":"<")+" "+A+") { ";var a=g,Z=Z||[];Z.push(i),i="",!1!==I.createErrors?(i+=" { keyword: '"+(a||"_limitItems")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { limit: "+A+" } ",!1!==I.opts.messages&&(i+=" , message: 'should NOT have ",i+="maxItems"==g?"more":"fewer",i+=" than ",i+=s?"' + "+A+" + '":""+o,i+=" items' "),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var m=i;return i=Z.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+m+"]); ":i+=" validate.errors = ["+m+"]; return false; ":i+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+="} ",n&&(i+=" else { "),i},ra=function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;if(s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,!s&&"number"!=typeof o)throw new Error(g+" must be number");var a="maxLength"==g?">":"<";i+="if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),!1===I.opts.unicode?i+=" "+d+".length ":i+=" ucs2length("+d+") ",i+=" "+a+" "+A+") { ";var Z=g,m=m||[];m.push(i),i="",!1!==I.createErrors?(i+=" { keyword: '"+(Z||"_limitLength")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { limit: "+A+" } ",!1!==I.opts.messages&&(i+=" , message: 'should NOT be ",i+="maxLength"==g?"longer":"shorter",i+=" than ",i+=s?"' + "+A+" + '":""+o,i+=" characters' "),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var b=i;return i=m.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+b+"]); ":i+=" validate.errors = ["+b+"]; return false; ":i+=" var err = "+b+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+="} ",n&&(i+=" else { "),i},ha=function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;if(s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,!s&&"number"!=typeof o)throw new Error(g+" must be number");i+="if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'number') || "),i+=" Object.keys("+d+").length "+("maxProperties"==g?">":"<")+" "+A+") { ";var a=g,Z=Z||[];Z.push(i),i="",!1!==I.createErrors?(i+=" { keyword: '"+(a||"_limitProperties")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { limit: "+A+" } ",!1!==I.opts.messages&&(i+=" , message: 'should NOT have ",i+="maxProperties"==g?"more":"fewer",i+=" than ",i+=s?"' + "+A+" + '":""+o,i+=" properties' "),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var m=i;return i=Z.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+m+"]); ":i+=" validate.errors = ["+m+"]; return false; ":i+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+="} ",n&&(i+=" else { "),i},Ga={$ref:function(I,g,C){var A,i,e=" ",l=I.level,o=I.dataLevel,t=I.schema[g],c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(o||""),s="valid"+l;if("#"==t||"#/"==t)I.isRoot?(A=I.async,i="validate"):(A=!0===I.root.schema.$async,i="root.refVal[0]");else{var a=I.resolveRef(I.baseId,t,I.isRoot);if(void 0===a){var Z=I.MissingRefError.message(I.baseId,t);if("fail"==I.opts.missingRefs){I.logger.error(Z),(h=h||[]).push(e),e="",!1!==I.createErrors?(e+=" { keyword: '$ref' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { ref: '"+I.util.escapeQuotes(t)+"' } ",!1!==I.opts.messages&&(e+=" , message: 'can\\'t resolve reference "+I.util.escapeQuotes(t)+"' "),I.opts.verbose&&(e+=" , schema: "+I.util.toQuotedString(t)+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),e+=" } "):e+=" {} ";var m=e;e=h.pop(),!I.compositeRule&&n?I.async?e+=" throw new ValidationError(["+m+"]); ":e+=" validate.errors = ["+m+"]; return false; ":e+=" var err = "+m+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",n&&(e+=" if (false) { ")}else{if("ignore"!=I.opts.missingRefs)throw new I.MissingRefError(I.baseId,t,Z);I.logger.warn(Z),n&&(e+=" if (true) { ")}}else if(a.inline){var b=I.util.copy(I);b.level++;var r="valid"+b.level;b.schema=a.schema,b.schemaPath="",b.errSchemaPath=t,e+=" "+I.validate(b).replace(/validate\.schema/g,a.code)+" ",n&&(e+=" if ("+r+") { ")}else A=!0===a.$async||I.async&&!1!==a.$async,i=a.code}if(i){var h;(h=h||[]).push(e),e="",I.opts.passContext?e+=" "+i+".call(this, ":e+=" "+i+"( ",e+=" "+d+", (dataPath || '')",'""'!=I.errorPath&&(e+=" + "+I.errorPath);var G=e+=" , "+(o?"data"+(o-1||""):"parentData")+" , "+(o?I.dataPathArr[o]:"parentDataProperty")+", rootData)  ";if(e=h.pop(),A){if(!I.async)throw new Error("async schema referenced by sync schema");n&&(e+=" var "+s+"; "),e+=" try { await "+G+"; ",n&&(e+=" "+s+" = true; "),e+=" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ",n&&(e+=" "+s+" = false; "),e+=" } ",n&&(e+=" if ("+s+") { ")}else e+=" if (!"+G+") { if (vErrors === null) vErrors = "+i+".errors; else vErrors = vErrors.concat("+i+".errors); errors = vErrors.length; } ",n&&(e+=" else { ")}return e},allOf:function(I,g,C){var A=" ",i=I.schema[g],e=I.schemaPath+I.util.getProperty(g),l=I.errSchemaPath+"/"+g,o=!I.opts.allErrors,t=I.util.copy(I),c="";t.level++;var n="valid"+t.level,d=t.baseId,s=!0,a=i;if(a)for(var Z,m=-1,b=a.length-1;m<b;)Z=a[m+=1],(I.opts.strictKeywords?"object"==typeof Z&&Object.keys(Z).length>0||!1===Z:I.util.schemaHasRules(Z,I.RULES.all))&&(s=!1,t.schema=Z,t.schemaPath=e+"["+m+"]",t.errSchemaPath=l+"/"+m,A+="  "+I.validate(t)+" ",t.baseId=d,o&&(A+=" if ("+n+") { ",c+="}"));return o&&(A+=s?" if (true) { ":" "+c.slice(0,-1)+" "),A},anyOf:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s="errs__"+i,a=I.util.copy(I),Z="";a.level++;var m="valid"+a.level;if(l.every((function(g){return I.opts.strictKeywords?"object"==typeof g&&Object.keys(g).length>0||!1===g:I.util.schemaHasRules(g,I.RULES.all)}))){var b=a.baseId;A+=" var "+s+" = errors; var "+d+" = false;  ";var r=I.compositeRule;I.compositeRule=a.compositeRule=!0;var h=l;if(h)for(var G,u=-1,y=h.length-1;u<y;)G=h[u+=1],a.schema=G,a.schemaPath=o+"["+u+"]",a.errSchemaPath=t+"/"+u,A+="  "+I.validate(a)+" ",a.baseId=b,A+=" "+d+" = "+d+" || "+m+"; if (!"+d+") { ",Z+="}";I.compositeRule=a.compositeRule=r,A+=" "+Z+" if (!"+d+") {   var err =   ",!1!==I.createErrors?(A+=" { keyword: 'anyOf' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: {} ",!1!==I.opts.messages&&(A+=" , message: 'should match some schema in anyOf' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!I.compositeRule&&c&&(I.async?A+=" throw new ValidationError(vErrors); ":A+=" validate.errors = vErrors; return false; "),A+=" } else {  errors = "+s+"; if (vErrors !== null) { if ("+s+") vErrors.length = "+s+"; else vErrors = null; } ",I.opts.allErrors&&(A+=" } ")}else c&&(A+=" if (true) { ");return A},$comment:function(I,g,C){var A=" ",i=I.schema[g],e=I.errSchemaPath+"/"+g;I.opts.allErrors;var l=I.util.toQuotedString(i);return!0===I.opts.$comment?A+=" console.log("+l+");":"function"==typeof I.opts.$comment&&(A+=" self._opts.$comment("+l+", "+I.util.toQuotedString(e)+", validate.root.schema);"),A},const:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s=I.opts.$data&&l&&l.$data;s&&(A+=" var schema"+i+" = "+I.util.getData(l.$data,e,I.dataPathArr)+"; "),s||(A+=" var schema"+i+" = validate.schema"+o+";"),A+="var "+d+" = equal("+n+", schema"+i+"); if (!"+d+") {   ";var a=a||[];a.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'const' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { allowedValue: schema"+i+" } ",!1!==I.opts.messages&&(A+=" , message: 'should be equal to constant' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var Z=A;return A=a.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+Z+"]); ":A+=" validate.errors = ["+Z+"]; return false; ":A+=" var err = "+Z+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" }",c&&(A+=" else { "),A},contains:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s="errs__"+i,a=I.util.copy(I);a.level++;var Z="valid"+a.level,m="i"+i,b=a.dataLevel=I.dataLevel+1,r="data"+b,h=I.baseId,G=I.opts.strictKeywords?"object"==typeof l&&Object.keys(l).length>0||!1===l:I.util.schemaHasRules(l,I.RULES.all);if(A+="var "+s+" = errors;var "+d+";",G){var u=I.compositeRule;I.compositeRule=a.compositeRule=!0,a.schema=l,a.schemaPath=o,a.errSchemaPath=t,A+=" var "+Z+" = false; for (var "+m+" = 0; "+m+" < "+n+".length; "+m+"++) { ",a.errorPath=I.util.getPathExpr(I.errorPath,m,I.opts.jsonPointers,!0);var y=n+"["+m+"]";a.dataPathArr[b]=m;var B=I.validate(a);a.baseId=h,I.util.varOccurences(B,r)<2?A+=" "+I.util.varReplace(B,r,y)+" ":A+=" var "+r+" = "+y+"; "+B+" ",A+=" if ("+Z+") break; }  ",I.compositeRule=a.compositeRule=u,A+="  if (!"+Z+") {"}else A+=" if ("+n+".length == 0) {";var V=V||[];V.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'contains' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: {} ",!1!==I.opts.messages&&(A+=" , message: 'should contain a valid item' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var p=A;return A=V.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+p+"]); ":A+=" validate.errors = ["+p+"]; return false; ":A+=" var err = "+p+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } else { ",G&&(A+="  errors = "+s+"; if (vErrors !== null) { if ("+s+") vErrors.length = "+s+"; else vErrors = null; } "),I.opts.allErrors&&(A+=" } "),A},dependencies:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="errs__"+i,s=I.util.copy(I),a="";s.level++;var Z="valid"+s.level,m={},b={},r=I.opts.ownProperties;for(y in l)if("__proto__"!=y){var h=l[y],G=Array.isArray(h)?b:m;G[y]=h}A+="var "+d+" = errors;";var u=I.errorPath;for(var y in A+="var missing"+i+";",b)if((G=b[y]).length){if(A+=" if ( "+n+I.util.getProperty(y)+" !== undefined ",r&&(A+=" && Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(y)+"') "),c){A+=" && ( ";var B=G;if(B)for(var V=-1,p=B.length-1;V<p;){f=B[V+=1],V&&(A+=" || "),A+=" ( ( "+(S=n+(J=I.util.getProperty(f)))+" === undefined ",r&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(f)+"') "),A+=") && (missing"+i+" = "+I.util.toQuotedString(I.opts.jsonPointers?f:J)+") ) "}A+=")) {  ";var X="missing"+i,W="' + "+X+" + '";I.opts._errorDataPathProperty&&(I.errorPath=I.opts.jsonPointers?I.util.getPathExpr(u,X,!0):u+" + "+X);var H=H||[];H.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { property: '"+I.util.escapeQuotes(y)+"', missingProperty: '"+W+"', depsCount: "+G.length+", deps: '"+I.util.escapeQuotes(1==G.length?G[0]:G.join(", "))+"' } ",!1!==I.opts.messages&&(A+=" , message: 'should have ",1==G.length?A+="property "+I.util.escapeQuotes(G[0]):A+="properties "+I.util.escapeQuotes(G.join(", ")),A+=" when property "+I.util.escapeQuotes(y)+" is present' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var Y=A;A=H.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+Y+"]); ":A+=" validate.errors = ["+Y+"]; return false; ":A+=" var err = "+Y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "}else{A+=" ) { ";var R=G;if(R)for(var f,K=-1,w=R.length-1;K<w;){f=R[K+=1];var J=I.util.getProperty(f),S=(W=I.util.escapeQuotes(f),n+J);I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPath(u,f,I.opts.jsonPointers)),A+=" if ( "+S+" === undefined ",r&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(f)+"') "),A+=") {  var err =   ",!1!==I.createErrors?(A+=" { keyword: 'dependencies' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { property: '"+I.util.escapeQuotes(y)+"', missingProperty: '"+W+"', depsCount: "+G.length+", deps: '"+I.util.escapeQuotes(1==G.length?G[0]:G.join(", "))+"' } ",!1!==I.opts.messages&&(A+=" , message: 'should have ",1==G.length?A+="property "+I.util.escapeQuotes(G[0]):A+="properties "+I.util.escapeQuotes(G.join(", ")),A+=" when property "+I.util.escapeQuotes(y)+" is present' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}A+=" }   ",c&&(a+="}",A+=" else { ")}I.errorPath=u;var F=s.baseId;for(var y in m){h=m[y];(I.opts.strictKeywords?"object"==typeof h&&Object.keys(h).length>0||!1===h:I.util.schemaHasRules(h,I.RULES.all))&&(A+=" "+Z+" = true; if ( "+n+I.util.getProperty(y)+" !== undefined ",r&&(A+=" && Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(y)+"') "),A+=") { ",s.schema=h,s.schemaPath=o+I.util.getProperty(y),s.errSchemaPath=t+"/"+I.util.escapeFragment(y),A+="  "+I.validate(s)+" ",s.baseId=F,A+=" }  ",c&&(A+=" if ("+Z+") { ",a+="}"))}return c&&(A+="   "+a+" if ("+d+" == errors) {"),A},enum:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s=I.opts.$data&&l&&l.$data;s&&(A+=" var schema"+i+" = "+I.util.getData(l.$data,e,I.dataPathArr)+"; ");var a="i"+i,Z="schema"+i;s||(A+=" var "+Z+" = validate.schema"+o+";"),A+="var "+d+";",s&&(A+=" if (schema"+i+" === undefined) "+d+" = true; else if (!Array.isArray(schema"+i+")) "+d+" = false; else {"),A+=d+" = false;for (var "+a+"=0; "+a+"<"+Z+".length; "+a+"++) if (equal("+n+", "+Z+"["+a+"])) { "+d+" = true; break; }",s&&(A+="  }  "),A+=" if (!"+d+") {   ";var m=m||[];m.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'enum' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { allowedValues: schema"+i+" } ",!1!==I.opts.messages&&(A+=" , message: 'should be equal to one of the allowed values' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var b=A;return A=m.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+b+"]); ":A+=" validate.errors = ["+b+"]; return false; ":A+=" var err = "+b+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" }",c&&(A+=" else { "),A},format:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||"");if(!1===I.opts.format)return c&&(A+=" if (true) { "),A;var d,s=I.opts.$data&&l&&l.$data;s?(A+=" var schema"+i+" = "+I.util.getData(l.$data,e,I.dataPathArr)+"; ",d="schema"+i):d=l;var a=I.opts.unknownFormats,Z=Array.isArray(a);if(s){A+=" var "+(m="format"+i)+" = formats["+d+"]; var "+(b="isObject"+i)+" = typeof "+m+" == 'object' && !("+m+" instanceof RegExp) && "+m+".validate; var "+(r="formatType"+i)+" = "+b+" && "+m+".type || 'string'; if ("+b+") { ",I.async&&(A+=" var async"+i+" = "+m+".async; "),A+=" "+m+" = "+m+".validate; } if (  ",s&&(A+=" ("+d+" !== undefined && typeof "+d+" != 'string') || "),A+=" (","ignore"!=a&&(A+=" ("+d+" && !"+m+" ",Z&&(A+=" && self._opts.unknownFormats.indexOf("+d+") == -1 "),A+=") || "),A+=" ("+m+" && "+r+" == '"+C+"' && !(typeof "+m+" == 'function' ? ",I.async?A+=" (async"+i+" ? await "+m+"("+n+") : "+m+"("+n+")) ":A+=" "+m+"("+n+") ",A+=" : "+m+".test("+n+"))))) {"}else{var m;if(!(m=I.formats[l])){if("ignore"==a)return I.logger.warn('unknown format "'+l+'" ignored in schema at path "'+I.errSchemaPath+'"'),c&&(A+=" if (true) { "),A;if(Z&&a.indexOf(l)>=0)return c&&(A+=" if (true) { "),A;throw new Error('unknown format "'+l+'" is used in schema at path "'+I.errSchemaPath+'"')}var b,r=(b="object"==typeof m&&!(m instanceof RegExp)&&m.validate)&&m.type||"string";if(b){var h=!0===m.async;m=m.validate}if(r!=C)return c&&(A+=" if (true) { "),A;if(h){if(!I.async)throw new Error("async format in sync schema");A+=" if (!(await "+(G="formats"+I.util.getProperty(l)+".validate")+"("+n+"))) { "}else{A+=" if (! ";var G="formats"+I.util.getProperty(l);b&&(G+=".validate"),A+="function"==typeof m?" "+G+"("+n+") ":" "+G+".test("+n+") ",A+=") { "}}var u=u||[];u.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'format' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { format:  ",A+=s?""+d:""+I.util.toQuotedString(l),A+="  } ",!1!==I.opts.messages&&(A+=" , message: 'should match format \"",A+=s?"' + "+d+" + '":""+I.util.escapeQuotes(l),A+="\"' "),I.opts.verbose&&(A+=" , schema:  ",A+=s?"validate.schema"+o:""+I.util.toQuotedString(l),A+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var y=A;return A=u.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+y+"]); ":A+=" validate.errors = ["+y+"]; return false; ":A+=" var err = "+y+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } ",c&&(A+=" else { "),A},if:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s="errs__"+i,a=I.util.copy(I);a.level++;var Z="valid"+a.level,m=I.schema.then,b=I.schema.else,r=void 0!==m&&(I.opts.strictKeywords?"object"==typeof m&&Object.keys(m).length>0||!1===m:I.util.schemaHasRules(m,I.RULES.all)),h=void 0!==b&&(I.opts.strictKeywords?"object"==typeof b&&Object.keys(b).length>0||!1===b:I.util.schemaHasRules(b,I.RULES.all)),G=a.baseId;if(r||h){var u;a.createErrors=!1,a.schema=l,a.schemaPath=o,a.errSchemaPath=t,A+=" var "+s+" = errors; var "+d+" = true;  ";var y=I.compositeRule;I.compositeRule=a.compositeRule=!0,A+="  "+I.validate(a)+" ",a.baseId=G,a.createErrors=!0,A+="  errors = "+s+"; if (vErrors !== null) { if ("+s+") vErrors.length = "+s+"; else vErrors = null; }  ",I.compositeRule=a.compositeRule=y,r?(A+=" if ("+Z+") {  ",a.schema=I.schema.then,a.schemaPath=I.schemaPath+".then",a.errSchemaPath=I.errSchemaPath+"/then",A+="  "+I.validate(a)+" ",a.baseId=G,A+=" "+d+" = "+Z+"; ",r&&h?A+=" var "+(u="ifClause"+i)+" = 'then'; ":u="'then'",A+=" } ",h&&(A+=" else { ")):A+=" if (!"+Z+") { ",h&&(a.schema=I.schema.else,a.schemaPath=I.schemaPath+".else",a.errSchemaPath=I.errSchemaPath+"/else",A+="  "+I.validate(a)+" ",a.baseId=G,A+=" "+d+" = "+Z+"; ",r&&h?A+=" var "+(u="ifClause"+i)+" = 'else'; ":u="'else'",A+=" } "),A+=" if (!"+d+") {   var err =   ",!1!==I.createErrors?(A+=" { keyword: 'if' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { failingKeyword: "+u+" } ",!1!==I.opts.messages&&(A+=" , message: 'should match \"' + "+u+" + '\" schema' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!I.compositeRule&&c&&(I.async?A+=" throw new ValidationError(vErrors); ":A+=" validate.errors = vErrors; return false; "),A+=" }   ",c&&(A+=" else { ")}else c&&(A+=" if (true) { ");return A},items:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s="errs__"+i,a=I.util.copy(I),Z="";a.level++;var m="valid"+a.level,b="i"+i,r=a.dataLevel=I.dataLevel+1,h="data"+r,G=I.baseId;if(A+="var "+s+" = errors;var "+d+";",Array.isArray(l)){var u=I.schema.additionalItems;if(!1===u){A+=" "+d+" = "+n+".length <= "+l.length+"; ";var y=t;t=I.errSchemaPath+"/additionalItems",A+="  if (!"+d+") {   ";var B=B||[];B.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'additionalItems' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { limit: "+l.length+" } ",!1!==I.opts.messages&&(A+=" , message: 'should NOT have more than "+l.length+" items' "),I.opts.verbose&&(A+=" , schema: false , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var V=A;A=B.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+V+"]); ":A+=" validate.errors = ["+V+"]; return false; ":A+=" var err = "+V+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } ",t=y,c&&(Z+="}",A+=" else { ")}var p=l;if(p)for(var X,W=-1,H=p.length-1;W<H;)if(X=p[W+=1],I.opts.strictKeywords?"object"==typeof X&&Object.keys(X).length>0||!1===X:I.util.schemaHasRules(X,I.RULES.all)){A+=" "+m+" = true; if ("+n+".length > "+W+") { ";var Y=n+"["+W+"]";a.schema=X,a.schemaPath=o+"["+W+"]",a.errSchemaPath=t+"/"+W,a.errorPath=I.util.getPathExpr(I.errorPath,W,I.opts.jsonPointers,!0),a.dataPathArr[r]=W;var R=I.validate(a);a.baseId=G,I.util.varOccurences(R,h)<2?A+=" "+I.util.varReplace(R,h,Y)+" ":A+=" var "+h+" = "+Y+"; "+R+" ",A+=" }  ",c&&(A+=" if ("+m+") { ",Z+="}")}if("object"==typeof u&&(I.opts.strictKeywords?"object"==typeof u&&Object.keys(u).length>0||!1===u:I.util.schemaHasRules(u,I.RULES.all))){a.schema=u,a.schemaPath=I.schemaPath+".additionalItems",a.errSchemaPath=I.errSchemaPath+"/additionalItems",A+=" "+m+" = true; if ("+n+".length > "+l.length+") {  for (var "+b+" = "+l.length+"; "+b+" < "+n+".length; "+b+"++) { ",a.errorPath=I.util.getPathExpr(I.errorPath,b,I.opts.jsonPointers,!0);Y=n+"["+b+"]";a.dataPathArr[r]=b;R=I.validate(a);a.baseId=G,I.util.varOccurences(R,h)<2?A+=" "+I.util.varReplace(R,h,Y)+" ":A+=" var "+h+" = "+Y+"; "+R+" ",c&&(A+=" if (!"+m+") break; "),A+=" } }  ",c&&(A+=" if ("+m+") { ",Z+="}")}}else if(I.opts.strictKeywords?"object"==typeof l&&Object.keys(l).length>0||!1===l:I.util.schemaHasRules(l,I.RULES.all)){a.schema=l,a.schemaPath=o,a.errSchemaPath=t,A+="  for (var "+b+" = 0; "+b+" < "+n+".length; "+b+"++) { ",a.errorPath=I.util.getPathExpr(I.errorPath,b,I.opts.jsonPointers,!0);Y=n+"["+b+"]";a.dataPathArr[r]=b;R=I.validate(a);a.baseId=G,I.util.varOccurences(R,h)<2?A+=" "+I.util.varReplace(R,h,Y)+" ":A+=" var "+h+" = "+Y+"; "+R+" ",c&&(A+=" if (!"+m+") break; "),A+=" }"}return c&&(A+=" "+Z+" if ("+s+" == errors) {"),A},maximum:ma,minimum:ma,maxItems:ba,minItems:ba,maxLength:ra,minLength:ra,maxProperties:ha,minProperties:ha,multipleOf:function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;if(s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,!s&&"number"!=typeof o)throw new Error(g+" must be number");i+="var division"+e+";if (",s&&(i+=" "+A+" !== undefined && ( typeof "+A+" != 'number' || "),i+=" (division"+e+" = "+d+" / "+A+", ",I.opts.multipleOfPrecision?i+=" Math.abs(Math.round(division"+e+") - division"+e+") > 1e-"+I.opts.multipleOfPrecision+" ":i+=" division"+e+" !== parseInt(division"+e+") ",i+=" ) ",s&&(i+="  )  "),i+=" ) {   ";var a=a||[];a.push(i),i="",!1!==I.createErrors?(i+=" { keyword: 'multipleOf' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { multipleOf: "+A+" } ",!1!==I.opts.messages&&(i+=" , message: 'should be multiple of ",i+=s?"' + "+A:A+"'"),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var Z=i;return i=a.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+Z+"]); ":i+=" validate.errors = ["+Z+"]; return false; ":i+=" var err = "+Z+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+="} ",n&&(i+=" else { "),i},not:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="errs__"+i,s=I.util.copy(I);s.level++;var a="valid"+s.level;if(I.opts.strictKeywords?"object"==typeof l&&Object.keys(l).length>0||!1===l:I.util.schemaHasRules(l,I.RULES.all)){s.schema=l,s.schemaPath=o,s.errSchemaPath=t,A+=" var "+d+" = errors;  ";var Z,m=I.compositeRule;I.compositeRule=s.compositeRule=!0,s.createErrors=!1,s.opts.allErrors&&(Z=s.opts.allErrors,s.opts.allErrors=!1),A+=" "+I.validate(s)+" ",s.createErrors=!0,Z&&(s.opts.allErrors=Z),I.compositeRule=s.compositeRule=m,A+=" if ("+a+") {   ";var b=b||[];b.push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'not' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: {} ",!1!==I.opts.messages&&(A+=" , message: 'should NOT be valid' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var r=A;A=b.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+r+"]); ":A+=" validate.errors = ["+r+"]; return false; ":A+=" var err = "+r+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } else {  errors = "+d+"; if (vErrors !== null) { if ("+d+") vErrors.length = "+d+"; else vErrors = null; } ",I.opts.allErrors&&(A+=" } ")}else A+="  var err =   ",!1!==I.createErrors?(A+=" { keyword: 'not' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: {} ",!1!==I.opts.messages&&(A+=" , message: 'should NOT be valid' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",c&&(A+=" if (false) { ");return A},oneOf:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s="errs__"+i,a=I.util.copy(I),Z="";a.level++;var m="valid"+a.level,b=a.baseId,r="prevValid"+i,h="passingSchemas"+i;A+="var "+s+" = errors , "+r+" = false , "+d+" = false , "+h+" = null; ";var G=I.compositeRule;I.compositeRule=a.compositeRule=!0;var u=l;if(u)for(var y,B=-1,V=u.length-1;B<V;)y=u[B+=1],(I.opts.strictKeywords?"object"==typeof y&&Object.keys(y).length>0||!1===y:I.util.schemaHasRules(y,I.RULES.all))?(a.schema=y,a.schemaPath=o+"["+B+"]",a.errSchemaPath=t+"/"+B,A+="  "+I.validate(a)+" ",a.baseId=b):A+=" var "+m+" = true; ",B&&(A+=" if ("+m+" && "+r+") { "+d+" = false; "+h+" = ["+h+", "+B+"]; } else { ",Z+="}"),A+=" if ("+m+") { "+d+" = "+r+" = true; "+h+" = "+B+"; }";return I.compositeRule=a.compositeRule=G,A+=Z+"if (!"+d+") {   var err =   ",!1!==I.createErrors?(A+=" { keyword: 'oneOf' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { passingSchemas: "+h+" } ",!1!==I.opts.messages&&(A+=" , message: 'should match exactly one schema in oneOf' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!I.compositeRule&&c&&(I.async?A+=" throw new ValidationError(vErrors); ":A+=" validate.errors = vErrors; return false; "),A+="} else {  errors = "+s+"; if (vErrors !== null) { if ("+s+") vErrors.length = "+s+"; else vErrors = null; }",I.opts.allErrors&&(A+=" } "),A},pattern:function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s=I.opts.$data&&o&&o.$data;s?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,i+="if ( ",s&&(i+=" ("+A+" !== undefined && typeof "+A+" != 'string') || "),i+=" !"+(s?"(new RegExp("+A+"))":I.usePattern(o))+".test("+d+") ) {   ";var a=a||[];a.push(i),i="",!1!==I.createErrors?(i+=" { keyword: 'pattern' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { pattern:  ",i+=s?""+A:""+I.util.toQuotedString(o),i+="  } ",!1!==I.opts.messages&&(i+=" , message: 'should match pattern \"",i+=s?"' + "+A+" + '":""+I.util.escapeQuotes(o),i+="\"' "),I.opts.verbose&&(i+=" , schema:  ",i+=s?"validate.schema"+t:""+I.util.toQuotedString(o),i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var Z=i;return i=a.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+Z+"]); ":i+=" validate.errors = ["+Z+"]; return false; ":i+=" var err = "+Z+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+="} ",n&&(i+=" else { "),i},properties:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="errs__"+i,s=I.util.copy(I),a="";s.level++;var Z="valid"+s.level,m="key"+i,b="idx"+i,r=s.dataLevel=I.dataLevel+1,h="data"+r,G="dataProperties"+i,u=Object.keys(l||{}).filter(J),y=I.schema.patternProperties||{},B=Object.keys(y).filter(J),V=I.schema.additionalProperties,p=u.length||B.length,X=!1===V,W="object"==typeof V&&Object.keys(V).length,H=I.opts.removeAdditional,Y=X||W||H,R=I.opts.ownProperties,f=I.baseId,K=I.schema.required;if(K&&(!I.opts.$data||!K.$data)&&K.length<I.opts.loopRequired)var w=I.util.toHash(K);function J(I){return"__proto__"!==I}if(A+="var "+d+" = errors;var "+Z+" = true;",R&&(A+=" var "+G+" = undefined;"),Y){if(A+=R?" "+G+" = "+G+" || Object.keys("+n+"); for (var "+b+"=0; "+b+"<"+G+".length; "+b+"++) { var "+m+" = "+G+"["+b+"]; ":" for (var "+m+" in "+n+") { ",p){if(A+=" var isAdditional"+i+" = !(false ",u.length)if(u.length>8)A+=" || validate.schema"+o+".hasOwnProperty("+m+") ";else{var S=u;if(S)for(var F=-1,N=S.length-1;F<N;)L=S[F+=1],A+=" || "+m+" == "+I.util.toQuotedString(L)+" "}if(B.length){var v=B;if(v)for(var k=-1,D=v.length-1;k<D;)eI=v[k+=1],A+=" || "+I.usePattern(eI)+".test("+m+") "}A+=" ); if (isAdditional"+i+") { "}if("all"==H)A+=" delete "+n+"["+m+"]; ";else{var z=I.errorPath,M="' + "+m+" + '";if(I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPathExpr(I.errorPath,m,I.opts.jsonPointers)),X)if(H)A+=" delete "+n+"["+m+"]; ";else{A+=" "+Z+" = false; ";var U=t;t=I.errSchemaPath+"/additionalProperties",(CI=CI||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'additionalProperties' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { additionalProperty: '"+M+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is an invalid additional property":A+="should NOT have additional properties",A+="' "),I.opts.verbose&&(A+=" , schema: false , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var x=A;A=CI.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+x+"]); ":A+=" validate.errors = ["+x+"]; return false; ":A+=" var err = "+x+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",t=U,c&&(A+=" break; ")}else if(W)if("failing"==H){A+=" var "+d+" = errors;  ";var T=I.compositeRule;I.compositeRule=s.compositeRule=!0,s.schema=V,s.schemaPath=I.schemaPath+".additionalProperties",s.errSchemaPath=I.errSchemaPath+"/additionalProperties",s.errorPath=I.opts._errorDataPathProperty?I.errorPath:I.util.getPathExpr(I.errorPath,m,I.opts.jsonPointers);var Q=n+"["+m+"]";s.dataPathArr[r]=m;var P=I.validate(s);s.baseId=f,I.util.varOccurences(P,h)<2?A+=" "+I.util.varReplace(P,h,Q)+" ":A+=" var "+h+" = "+Q+"; "+P+" ",A+=" if (!"+Z+") { errors = "+d+"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete "+n+"["+m+"]; }  ",I.compositeRule=s.compositeRule=T}else{s.schema=V,s.schemaPath=I.schemaPath+".additionalProperties",s.errSchemaPath=I.errSchemaPath+"/additionalProperties",s.errorPath=I.opts._errorDataPathProperty?I.errorPath:I.util.getPathExpr(I.errorPath,m,I.opts.jsonPointers);Q=n+"["+m+"]";s.dataPathArr[r]=m;P=I.validate(s);s.baseId=f,I.util.varOccurences(P,h)<2?A+=" "+I.util.varReplace(P,h,Q)+" ":A+=" var "+h+" = "+Q+"; "+P+" ",c&&(A+=" if (!"+Z+") break; ")}I.errorPath=z}p&&(A+=" } "),A+=" }  ",c&&(A+=" if ("+Z+") { ",a+="}")}var O=I.opts.useDefaults&&!I.compositeRule;if(u.length){var j=u;if(j)for(var L,E=-1,_=j.length-1;E<_;){var $=l[L=j[E+=1]];if(I.opts.strictKeywords?"object"==typeof $&&Object.keys($).length>0||!1===$:I.util.schemaHasRules($,I.RULES.all)){var q=I.util.getProperty(L),II=(Q=n+q,O&&void 0!==$.default);s.schema=$,s.schemaPath=o+q,s.errSchemaPath=t+"/"+I.util.escapeFragment(L),s.errorPath=I.util.getPath(I.errorPath,L,I.opts.jsonPointers),s.dataPathArr[r]=I.util.toQuotedString(L);P=I.validate(s);if(s.baseId=f,I.util.varOccurences(P,h)<2){P=I.util.varReplace(P,h,Q);var gI=Q}else{gI=h;A+=" var "+h+" = "+Q+"; "}if(II)A+=" "+P+" ";else{if(w&&w[L]){A+=" if ( "+gI+" === undefined ",R&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(L)+"') "),A+=") { "+Z+" = false; ";z=I.errorPath,U=t;var CI,AI=I.util.escapeQuotes(L);I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPath(z,L,I.opts.jsonPointers)),t=I.errSchemaPath+"/required",(CI=CI||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+AI+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+AI+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";x=A;A=CI.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+x+"]); ":A+=" validate.errors = ["+x+"]; return false; ":A+=" var err = "+x+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",t=U,I.errorPath=z,A+=" } else { "}else c?(A+=" if ( "+gI+" === undefined ",R&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(L)+"') "),A+=") { "+Z+" = true; } else { "):(A+=" if ("+gI+" !== undefined ",R&&(A+=" &&   Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(L)+"') "),A+=" ) { ");A+=" "+P+" } "}}c&&(A+=" if ("+Z+") { ",a+="}")}}if(B.length){var iI=B;if(iI)for(var eI,lI=-1,oI=iI.length-1;lI<oI;){$=y[eI=iI[lI+=1]];if(I.opts.strictKeywords?"object"==typeof $&&Object.keys($).length>0||!1===$:I.util.schemaHasRules($,I.RULES.all)){s.schema=$,s.schemaPath=I.schemaPath+".patternProperties"+I.util.getProperty(eI),s.errSchemaPath=I.errSchemaPath+"/patternProperties/"+I.util.escapeFragment(eI),A+=R?" "+G+" = "+G+" || Object.keys("+n+"); for (var "+b+"=0; "+b+"<"+G+".length; "+b+"++) { var "+m+" = "+G+"["+b+"]; ":" for (var "+m+" in "+n+") { ",A+=" if ("+I.usePattern(eI)+".test("+m+")) { ",s.errorPath=I.util.getPathExpr(I.errorPath,m,I.opts.jsonPointers);Q=n+"["+m+"]";s.dataPathArr[r]=m;P=I.validate(s);s.baseId=f,I.util.varOccurences(P,h)<2?A+=" "+I.util.varReplace(P,h,Q)+" ":A+=" var "+h+" = "+Q+"; "+P+" ",c&&(A+=" if (!"+Z+") break; "),A+=" } ",c&&(A+=" else "+Z+" = true; "),A+=" }  ",c&&(A+=" if ("+Z+") { ",a+="}")}}}return c&&(A+=" "+a+" if ("+d+" == errors) {"),A},propertyNames:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="errs__"+i,s=I.util.copy(I);s.level++;var a="valid"+s.level;if(A+="var "+d+" = errors;",I.opts.strictKeywords?"object"==typeof l&&Object.keys(l).length>0||!1===l:I.util.schemaHasRules(l,I.RULES.all)){s.schema=l,s.schemaPath=o,s.errSchemaPath=t;var Z="key"+i,m="idx"+i,b="i"+i,r="' + "+Z+" + '",h="data"+(s.dataLevel=I.dataLevel+1),G="dataProperties"+i,u=I.opts.ownProperties,y=I.baseId;u&&(A+=" var "+G+" = undefined; "),A+=u?" "+G+" = "+G+" || Object.keys("+n+"); for (var "+m+"=0; "+m+"<"+G+".length; "+m+"++) { var "+Z+" = "+G+"["+m+"]; ":" for (var "+Z+" in "+n+") { ",A+=" var startErrs"+i+" = errors; ";var B=Z,V=I.compositeRule;I.compositeRule=s.compositeRule=!0;var p=I.validate(s);s.baseId=y,I.util.varOccurences(p,h)<2?A+=" "+I.util.varReplace(p,h,B)+" ":A+=" var "+h+" = "+B+"; "+p+" ",I.compositeRule=s.compositeRule=V,A+=" if (!"+a+") { for (var "+b+"=startErrs"+i+"; "+b+"<errors; "+b+"++) { vErrors["+b+"].propertyName = "+Z+"; }   var err =   ",!1!==I.createErrors?(A+=" { keyword: 'propertyNames' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { propertyName: '"+r+"' } ",!1!==I.opts.messages&&(A+=" , message: 'property name \\'"+r+"\\' is invalid' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!I.compositeRule&&c&&(I.async?A+=" throw new ValidationError(vErrors); ":A+=" validate.errors = vErrors; return false; "),c&&(A+=" break; "),A+=" } }"}return c&&(A+="  if ("+d+" == errors) {"),A},required:function(I,g,C){var A=" ",i=I.level,e=I.dataLevel,l=I.schema[g],o=I.schemaPath+I.util.getProperty(g),t=I.errSchemaPath+"/"+g,c=!I.opts.allErrors,n="data"+(e||""),d="valid"+i,s=I.opts.$data&&l&&l.$data;s&&(A+=" var schema"+i+" = "+I.util.getData(l.$data,e,I.dataPathArr)+"; ");var a="schema"+i;if(!s)if(l.length<I.opts.loopRequired&&I.schema.properties&&Object.keys(I.schema.properties).length){var Z=[],m=l;if(m)for(var b,r=-1,h=m.length-1;r<h;){b=m[r+=1];var G=I.schema.properties[b];G&&(I.opts.strictKeywords?"object"==typeof G&&Object.keys(G).length>0||!1===G:I.util.schemaHasRules(G,I.RULES.all))||(Z[Z.length]=b)}}else Z=l;if(s||Z.length){var u=I.errorPath,y=s||Z.length>=I.opts.loopRequired,B=I.opts.ownProperties;if(c)if(A+=" var missing"+i+"; ",y){s||(A+=" var "+a+" = validate.schema"+o+"; ");var V="' + "+(R="schema"+i+"["+(W="i"+i)+"]")+" + '";I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPathExpr(u,R,I.opts.jsonPointers)),A+=" var "+d+" = true; ",s&&(A+=" if (schema"+i+" === undefined) "+d+" = true; else if (!Array.isArray(schema"+i+")) "+d+" = false; else {"),A+=" for (var "+W+" = 0; "+W+" < "+a+".length; "+W+"++) { "+d+" = "+n+"["+a+"["+W+"]] !== undefined ",B&&(A+=" &&   Object.prototype.hasOwnProperty.call("+n+", "+a+"["+W+"]) "),A+="; if (!"+d+") break; } ",s&&(A+="  }  "),A+="  if (!"+d+") {   ",(Y=Y||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+V+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+V+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";var p=A;A=Y.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+p+"]); ":A+=" validate.errors = ["+p+"]; return false; ":A+=" var err = "+p+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } else { "}else{A+=" if ( ";var X=Z;if(X)for(var W=-1,H=X.length-1;W<H;){K=X[W+=1],W&&(A+=" || "),A+=" ( ( "+(F=n+(S=I.util.getProperty(K)))+" === undefined ",B&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(K)+"') "),A+=") && (missing"+i+" = "+I.util.toQuotedString(I.opts.jsonPointers?K:S)+") ) "}A+=") {  ";var Y;V="' + "+(R="missing"+i)+" + '";I.opts._errorDataPathProperty&&(I.errorPath=I.opts.jsonPointers?I.util.getPathExpr(u,R,!0):u+" + "+R),(Y=Y||[]).push(A),A="",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+V+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+V+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ";p=A;A=Y.pop(),!I.compositeRule&&c?I.async?A+=" throw new ValidationError(["+p+"]); ":A+=" validate.errors = ["+p+"]; return false; ":A+=" var err = "+p+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",A+=" } else { "}else if(y){s||(A+=" var "+a+" = validate.schema"+o+"; ");var R;V="' + "+(R="schema"+i+"["+(W="i"+i)+"]")+" + '";I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPathExpr(u,R,I.opts.jsonPointers)),s&&(A+=" if ("+a+" && !Array.isArray("+a+")) {  var err =   ",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+V+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+V+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if ("+a+" !== undefined) { "),A+=" for (var "+W+" = 0; "+W+" < "+a+".length; "+W+"++) { if ("+n+"["+a+"["+W+"]] === undefined ",B&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", "+a+"["+W+"]) "),A+=") {  var err =   ",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+V+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+V+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ",s&&(A+="  }  ")}else{var f=Z;if(f)for(var K,w=-1,J=f.length-1;w<J;){K=f[w+=1];var S=I.util.getProperty(K),F=(V=I.util.escapeQuotes(K),n+S);I.opts._errorDataPathProperty&&(I.errorPath=I.util.getPath(u,K,I.opts.jsonPointers)),A+=" if ( "+F+" === undefined ",B&&(A+=" || ! Object.prototype.hasOwnProperty.call("+n+", '"+I.util.escapeQuotes(K)+"') "),A+=") {  var err =   ",!1!==I.createErrors?(A+=" { keyword: 'required' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(t)+" , params: { missingProperty: '"+V+"' } ",!1!==I.opts.messages&&(A+=" , message: '",I.opts._errorDataPathProperty?A+="is a required property":A+="should have required property \\'"+V+"\\'",A+="' "),I.opts.verbose&&(A+=" , schema: validate.schema"+o+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+n+" "),A+=" } "):A+=" {} ",A+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "}}I.errorPath=u}else c&&(A+=" if (true) {");return A},uniqueItems:function(I,g,C){var A,i=" ",e=I.level,l=I.dataLevel,o=I.schema[g],t=I.schemaPath+I.util.getProperty(g),c=I.errSchemaPath+"/"+g,n=!I.opts.allErrors,d="data"+(l||""),s="valid"+e,a=I.opts.$data&&o&&o.$data;if(a?(i+=" var schema"+e+" = "+I.util.getData(o.$data,l,I.dataPathArr)+"; ",A="schema"+e):A=o,(o||a)&&!1!==I.opts.uniqueItems){a&&(i+=" var "+s+"; if ("+A+" === false || "+A+" === undefined) "+s+" = true; else if (typeof "+A+" != 'boolean') "+s+" = false; else { "),i+=" var i = "+d+".length , "+s+" = true , j; if (i > 1) { ";var Z=I.schema.items&&I.schema.items.type,m=Array.isArray(Z);if(!Z||"object"==Z||"array"==Z||m&&(Z.indexOf("object")>=0||Z.indexOf("array")>=0))i+=" outer: for (;i--;) { for (j = i; j--;) { if (equal("+d+"[i], "+d+"[j])) { "+s+" = false; break outer; } } } ";else{i+=" var itemIndices = {}, item; for (;i--;) { var item = "+d+"[i]; ";var b="checkDataType"+(m?"s":"");i+=" if ("+I.util[b](Z,"item",I.opts.strictNumbers,!0)+") continue; ",m&&(i+=" if (typeof item == 'string') item = '\"' + item; "),i+=" if (typeof itemIndices[item] == 'number') { "+s+" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } "}i+=" } ",a&&(i+="  }  "),i+=" if (!"+s+") {   ";var r=r||[];r.push(i),i="",!1!==I.createErrors?(i+=" { keyword: 'uniqueItems' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(c)+" , params: { i: i, j: j } ",!1!==I.opts.messages&&(i+=" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "),I.opts.verbose&&(i+=" , schema:  ",i+=a?"validate.schema"+t:""+o,i+="         , parentSchema: validate.schema"+I.schemaPath+" , data: "+d+" "),i+=" } "):i+=" {} ";var h=i;i=r.pop(),!I.compositeRule&&n?I.async?i+=" throw new ValidationError(["+h+"]); ":i+=" validate.errors = ["+h+"]; return false; ":i+=" var err = "+h+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",i+=" } ",n&&(i+=" else { ")}else n&&(i+=" if (true) { ");return i},validate:Rs},ua=Dd.toHash,ya=["multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","pattern","additionalItems","maxItems","minItems","uniqueItems","maxProperties","minProperties","required","additionalProperties","enum","format","const"],Ba=Xs.MissingRef,Va=function I(g,C,A){var i=this;if("function"!=typeof this._opts.loadSchema)throw new Error("options.loadSchema should be a function");"function"==typeof C&&(A=C,C=void 0);var e=l(g).then((function(){var I=i._addSchema(g,void 0,C);return I.validate||o(I)}));A&&e.then((function(I){A(null,I)}),A);return e;function l(g){var C=g.$schema;return C&&!i.getSchema(C)?I.call(i,{$ref:C},!0):Promise.resolve()}function o(I){try{return i._compile(I)}catch(im){if(im instanceof Ba)return function(g){var A=g.missingSchema;if(c(A))throw new Error("Schema "+A+" is loaded but "+g.missingRef+" cannot be resolved");var e=i._loadingSchemas[A];e||(e=i._loadingSchemas[A]=i._opts.loadSchema(A)).then(t,t);return e.then((function(I){if(!c(A))return l(I).then((function(){c(A)||i.addSchema(I,A,void 0,C)}))})).then((function(){return o(I)}));function t(){delete i._loadingSchemas[A]}function c(I){return i._refs[I]||i._schemas[I]}}(im);throw im}}};var pa={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0},Xa=pa,Wa={$id:"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",definitions:{simpleTypes:Xa.definitions.simpleTypes},type:"object",dependencies:{schema:["validate"],$data:["validate"],statements:["inline"],valid:{not:{required:["macro"]}}},properties:{type:Xa.properties.type,schema:{type:"boolean"},statements:{type:"boolean"},dependencies:{type:"array",items:{type:"string"}},metaSchema:{type:"object"},modifying:{type:"boolean"},valid:{type:"boolean"},$data:{type:"boolean"},async:{type:"boolean"},errors:{anyOf:[{type:"boolean"},{const:"full"}]}}},Ha=/^[a-z_$][a-z0-9_$-]*$/i,Ya=function(I,g,C){var A,i,e=" ",l=I.level,o=I.dataLevel,t=I.schema[g],c=I.schemaPath+I.util.getProperty(g),n=I.errSchemaPath+"/"+g,d=!I.opts.allErrors,s="data"+(o||""),a="valid"+l,Z="errs__"+l,m=I.opts.$data&&t&&t.$data;m?(e+=" var schema"+l+" = "+I.util.getData(t.$data,o,I.dataPathArr)+"; ",i="schema"+l):i=t;var b,r,h,G,u,y=this,B="definition"+l,V=y.definition,p="";if(m&&V.$data){u="keywordValidate"+l;var X=V.validateSchema;e+=" var "+B+" = RULES.custom['"+g+"'].definition; var "+u+" = "+B+".validate;"}else{if(!(G=I.useCustomRule(y,t,I.schema,I)))return;i="validate.schema"+c,u=G.code,b=V.compile,r=V.inline,h=V.macro}var W=u+".errors",H="i"+l,Y="ruleErr"+l,R=V.async;if(R&&!I.async)throw new Error("async keyword in sync schema");if(r||h||(e+=W+" = null;"),e+="var "+Z+" = errors;var "+a+";",m&&V.$data&&(p+="}",e+=" if ("+i+" === undefined) { "+a+" = true; } else { ",X&&(p+="}",e+=" "+a+" = "+B+".validateSchema("+i+"); if ("+a+") { ")),r)V.statements?e+=" "+G.validate+" ":e+=" "+a+" = "+G.validate+"; ";else if(h){var f=I.util.copy(I);p="";f.level++;var K="valid"+f.level;f.schema=G.validate,f.schemaPath="";var w=I.compositeRule;I.compositeRule=f.compositeRule=!0;var J=I.validate(f).replace(/validate\.schema/g,u);I.compositeRule=f.compositeRule=w,e+=" "+J}else{(v=v||[]).push(e),e="",e+="  "+u+".call( ",I.opts.passContext?e+="this":e+="self",b||!1===V.schema?e+=" , "+s+" ":e+=" , "+i+" , "+s+" , validate.schema"+I.schemaPath+" ",e+=" , (dataPath || '')",'""'!=I.errorPath&&(e+=" + "+I.errorPath);var S=o?"data"+(o-1||""):"parentData",F=o?I.dataPathArr[o]:"parentDataProperty",N=e+=" , "+S+" , "+F+" , rootData )  ";e=v.pop(),!1===V.errors?(e+=" "+a+" = ",R&&(e+="await "),e+=N+"; "):e+=R?" var "+(W="customErrors"+l)+" = null; try { "+a+" = await "+N+"; } catch (e) { "+a+" = false; if (e instanceof ValidationError) "+W+" = e.errors; else throw e; } ":" "+W+" = null; "+a+" = "+N+"; "}if(V.modifying&&(e+=" if ("+S+") "+s+" = "+S+"["+F+"];"),e+=""+p,V.valid)d&&(e+=" if (true) { ");else{var v;e+=" if ( ",void 0===V.valid?(e+=" !",e+=h?""+K:""+a):e+=" "+!V.valid+" ",e+=") { ",A=y.keyword,(v=v||[]).push(e),e="",(v=v||[]).push(e),e="",!1!==I.createErrors?(e+=" { keyword: '"+(A||"custom")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(n)+" , params: { keyword: '"+y.keyword+"' } ",!1!==I.opts.messages&&(e+=" , message: 'should pass \""+y.keyword+"\" keyword validation' "),I.opts.verbose&&(e+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+s+" "),e+=" } "):e+=" {} ";var k=e;e=v.pop(),!I.compositeRule&&d?I.async?e+=" throw new ValidationError(["+k+"]); ":e+=" validate.errors = ["+k+"]; return false; ":e+=" var err = "+k+";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";var D=e;e=v.pop(),r?V.errors?"full"!=V.errors&&(e+="  for (var "+H+"="+Z+"; "+H+"<errors; "+H+"++) { var "+Y+" = vErrors["+H+"]; if ("+Y+".dataPath === undefined) "+Y+".dataPath = (dataPath || '') + "+I.errorPath+"; if ("+Y+".schemaPath === undefined) { "+Y+'.schemaPath = "'+n+'"; } ',I.opts.verbose&&(e+=" "+Y+".schema = "+i+"; "+Y+".data = "+s+"; "),e+=" } "):!1===V.errors?e+=" "+D+" ":(e+=" if ("+Z+" == errors) { "+D+" } else {  for (var "+H+"="+Z+"; "+H+"<errors; "+H+"++) { var "+Y+" = vErrors["+H+"]; if ("+Y+".dataPath === undefined) "+Y+".dataPath = (dataPath || '') + "+I.errorPath+"; if ("+Y+".schemaPath === undefined) { "+Y+'.schemaPath = "'+n+'"; } ',I.opts.verbose&&(e+=" "+Y+".schema = "+i+"; "+Y+".data = "+s+"; "),e+=" } } "):h?(e+="   var err =   ",!1!==I.createErrors?(e+=" { keyword: '"+(A||"custom")+"' , dataPath: (dataPath || '') + "+I.errorPath+" , schemaPath: "+I.util.toQuotedString(n)+" , params: { keyword: '"+y.keyword+"' } ",!1!==I.opts.messages&&(e+=" , message: 'should pass \""+y.keyword+"\" keyword validation' "),I.opts.verbose&&(e+=" , schema: validate.schema"+c+" , parentSchema: validate.schema"+I.schemaPath+" , data: "+s+" "),e+=" } "):e+=" {} ",e+=";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",!I.compositeRule&&d&&(I.async?e+=" throw new ValidationError(vErrors); ":e+=" validate.errors = vErrors; return false; ")):!1===V.errors?e+=" "+D+" ":(e+=" if (Array.isArray("+W+")) { if (vErrors === null) vErrors = "+W+"; else vErrors = vErrors.concat("+W+"); errors = vErrors.length;  for (var "+H+"="+Z+"; "+H+"<errors; "+H+"++) { var "+Y+" = vErrors["+H+"]; if ("+Y+".dataPath === undefined) "+Y+".dataPath = (dataPath || '') + "+I.errorPath+";  "+Y+'.schemaPath = "'+n+'";  ',I.opts.verbose&&(e+=" "+Y+".schema = "+i+"; "+Y+".data = "+s+"; "),e+=" } } else { "+D+" } "),e+=" } ",d&&(e+=" else { ")}return e},Ra=Wa,fa={add:function(I,g){var C=this.RULES;if(C.keywords[I])throw new Error("Keyword "+I+" is already defined");if(!Ha.test(I))throw new Error("Keyword "+I+" is not a valid identifier");if(g){this.validateKeyword(g,!0);var A=g.type;if(Array.isArray(A))for(var i=0;i<A.length;i++)l(I,A[i],g);else l(I,A,g);var e=g.metaSchema;e&&(g.$data&&this._opts.$data&&(e={anyOf:[e,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]}),g.validateSchema=this.compile(e,!0))}function l(I,g,A){for(var i,e=0;e<C.length;e++){var l=C[e];if(l.type==g){i=l;break}}i||(i={type:g,rules:[]},C.push(i));var o={keyword:I,definition:A,custom:!0,code:Ya,implements:A.implements};i.rules.push(o),C.custom[I]=o}return C.keywords[I]=C.all[I]=!0,this},get:function(I){var g=this.RULES.custom[I];return g?g.definition:this.RULES.keywords[I]||!1},remove:function(I){var g=this.RULES;delete g.keywords[I],delete g.all[I],delete g.custom[I];for(var C=0;C<g.length;C++)for(var A=g[C].rules,i=0;i<A.length;i++)if(A[i].keyword==I){A.splice(i,1);break}return this},validate:function I(g,C){I.errors=null;var A=this._validateKeyword=this._validateKeyword||this.compile(Ra,!0);if(A(g))return!0;if(I.errors=A.errors,C)throw new Error("custom keyword definition is invalid: "+this.errorsText(A.errors));return!1}};var Ka={$schema:"http://json-schema.org/draft-07/schema#",$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON Schema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1},wa=ks,Ja=cs,Sa=Os.exports,Fa=Is,Na=Ys,va=oa,ka=function(){var I=[{type:"number",rules:[{maximum:["exclusiveMaximum"]},{minimum:["exclusiveMinimum"]},"multipleOf","format"]},{type:"string",rules:["maxLength","minLength","pattern","format"]},{type:"array",rules:["maxItems","minItems","items","contains","uniqueItems"]},{type:"object",rules:["maxProperties","minProperties","required","dependencies","propertyNames",{properties:["additionalProperties","patternProperties"]}]},{rules:["$ref","const","enum","not","anyOf","oneOf","allOf","if"]}],g=["type","$comment"];return I.all=ua(g),I.types=ua(["number","integer","string","array","object","boolean","null"]),I.forEach((function(C){C.rules=C.rules.map((function(C){var A;if("object"==typeof C){var i=Object.keys(C)[0];A=C[i],C=i,A.forEach((function(C){g.push(C),I.all[C]=!0}))}return g.push(C),I.all[C]={keyword:C,code:Ga[C],implements:A}})),I.all.$comment={keyword:"$comment",code:Ga.$comment},C.type&&(I.types[C.type]=C)})),I.keywords=ua(g.concat(["$schema","$id","id","$data","$async","title","description","default","definitions","examples","readOnly","writeOnly","contentMediaType","contentEncoding","additionalItems","then","else"])),I.custom={},I},Da=function(I,g){for(var C=0;C<g.length;C++){I=JSON.parse(JSON.stringify(I));var A,i=g[C].split("/"),e=I;for(A=1;A<i.length;A++)e=e[i[A]];for(A=0;A<ya.length;A++){var l=ya[A],o=e[l];o&&(e[l]={anyOf:[o,{$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"}]})}}return I},za=Dd,Ma=Oa;Oa.prototype.validate=function(I,g){var C;if("string"==typeof I){if(!(C=this.getSchema(I)))throw new Error('no schema with key or ref "'+I+'"')}else{var A=this._addSchema(I);C=A.validate||this._compile(A)}var i=C(g);!0!==C.$async&&(this.errors=C.errors);return i},Oa.prototype.compile=function(I,g){var C=this._addSchema(I,void 0,g);return C.validate||this._compile(C)},Oa.prototype.addSchema=function(I,g,C,A){if(Array.isArray(I)){for(var i=0;i<I.length;i++)this.addSchema(I[i],void 0,C,A);return this}var e=this._getId(I);if(void 0!==e&&"string"!=typeof e)throw new Error("schema id must be string");return qa(this,g=Ja.normalizeId(g||e)),this._schemas[g]=this._addSchema(I,C,A,!0),this},Oa.prototype.addMetaSchema=function(I,g,C){return this.addSchema(I,g,C,!0),this},Oa.prototype.validateSchema=function(I,g){var C=I.$schema;if(void 0!==C&&"string"!=typeof C)throw new Error("$schema must be a string");if(!(C=C||this._opts.defaultMeta||function(I){var g=I._opts.meta;return I._opts.defaultMeta="object"==typeof g?I._getId(g)||g:I.getSchema(Ta)?Ta:void 0,I._opts.defaultMeta}(this)))return this.logger.warn("meta-schema not available"),this.errors=null,!0;var A=this.validate(C,I);if(!A&&g){var i="schema is invalid: "+this.errorsText();if("log"!=this._opts.validateSchema)throw new Error(i);this.logger.error(i)}return A},Oa.prototype.getSchema=function(I){var g=ja(this,I);switch(typeof g){case"object":return g.validate||this._compile(g);case"string":return this.getSchema(g);case"undefined":return function(I,g){var C=Ja.schema.call(I,{schema:{}},g);if(C){var A=C.schema,i=C.root,e=C.baseId,l=wa.call(I,A,i,void 0,e);return I._fragments[g]=new Fa({ref:g,fragment:!0,schema:A,root:i,baseId:e,validate:l}),l}}(this,I)}},Oa.prototype.removeSchema=function(I){if(I instanceof RegExp)return La(this,this._schemas,I),La(this,this._refs,I),this;switch(typeof I){case"undefined":return La(this,this._schemas),La(this,this._refs),this._cache.clear(),this;case"string":var g=ja(this,I);return g&&this._cache.del(g.cacheKey),delete this._schemas[I],delete this._refs[I],this;case"object":var C=this._opts.serialize,A=C?C(I):I;this._cache.del(A);var i=this._getId(I);i&&(i=Ja.normalizeId(i),delete this._schemas[i],delete this._refs[i])}return this},Oa.prototype.addFormat=function(I,g){"string"==typeof g&&(g=new RegExp(g));return this._formats[I]=g,this},Oa.prototype.errorsText=function(I,g){if(!(I=I||this.errors))return"No errors";for(var C=void 0===(g=g||{}).separator?", ":g.separator,A=void 0===g.dataVar?"data":g.dataVar,i="",e=0;e<I.length;e++){var l=I[e];l&&(i+=A+l.dataPath+" "+l.message+C)}return i.slice(0,-C.length)},Oa.prototype._addSchema=function(I,g,C,A){if("object"!=typeof I&&"boolean"!=typeof I)throw new Error("schema should be object or boolean");var i=this._opts.serialize,e=i?i(I):I,l=this._cache.get(e);if(l)return l;A=A||!1!==this._opts.addUsedSchema;var o=Ja.normalizeId(this._getId(I));o&&A&&qa(this,o);var t,c=!1!==this._opts.validateSchema&&!g;c&&!(t=o&&o==Ja.normalizeId(I.$schema))&&this.validateSchema(I,!0);var n=Ja.ids.call(this,I),d=new Fa({id:o,schema:I,localRefs:n,cacheKey:e,meta:C});"#"!=o[0]&&A&&(this._refs[o]=d);this._cache.put(e,d),c&&t&&this.validateSchema(I,!0);return d},Oa.prototype._compile=function(I,g){if(I.compiling)return I.validate=i,i.schema=I.schema,i.errors=null,i.root=g||i,!0===I.schema.$async&&(i.$async=!0),i;var C,A;I.compiling=!0,I.meta&&(C=this._opts,this._opts=this._metaOpts);try{A=wa.call(this,I.schema,g,I.localRefs)}catch(im){throw delete I.validate,im}finally{I.compiling=!1,I.meta&&(this._opts=C)}return I.validate=A,I.refs=A.refs,I.refVal=A.refVal,I.root=A.root,A;function i(){var g=I.validate,C=g.apply(this,arguments);return i.errors=g.errors,C}},Oa.prototype.compileAsync=Va;var Ua=fa;Oa.prototype.addKeyword=Ua.add,Oa.prototype.getKeyword=Ua.get,Oa.prototype.removeKeyword=Ua.remove,Oa.prototype.validateKeyword=Ua.validate;var xa=Xs;Oa.ValidationError=xa.Validation,Oa.MissingRefError=xa.MissingRef,Oa.$dataMetaSchema=Da;var Ta="http://json-schema.org/draft-07/schema",Qa=["removeAdditional","useDefaults","coerceTypes","strictDefaults"],Pa=["/properties"];function Oa(I){if(!(this instanceof Oa))return new Oa(I);I=this._opts=za.copy(I)||{},function(I){var g=I._opts.logger;if(!1===g)I.logger={log:IZ,warn:IZ,error:IZ};else{if(void 0===g&&(g=console),!("object"==typeof g&&g.log&&g.warn&&g.error))throw new Error("logger must implement log, warn and error methods");I.logger=g}}(this),this._schemas={},this._refs={},this._fragments={},this._formats=va(I.format),this._cache=I.cache||new Sa,this._loadingSchemas={},this._compilations=[],this.RULES=ka(),this._getId=function(I){switch(I.schemaId){case"auto":return $a;case"id":return Ea;default:return _a}}(I),I.loopRequired=I.loopRequired||1/0,"property"==I.errorDataPath&&(I._errorDataPathProperty=!0),void 0===I.serialize&&(I.serialize=Na),this._metaOpts=function(I){for(var g=za.copy(I._opts),C=0;C<Qa.length;C++)delete g[Qa[C]];return g}(this),I.formats&&function(I){for(var g in I._opts.formats){var C=I._opts.formats[g];I.addFormat(g,C)}}(this),I.keywords&&function(I){for(var g in I._opts.keywords){var C=I._opts.keywords[g];I.addKeyword(g,C)}}(this),function(I){var g;I._opts.$data&&(g=Ka,I.addMetaSchema(g,g.$id,!0));if(!1===I._opts.meta)return;var C=pa;I._opts.$data&&(C=Da(C,Pa));I.addMetaSchema(C,Ta,!0),I._refs["http://json-schema.org/schema"]=Ta}(this),"object"==typeof I.meta&&this.addMetaSchema(I.meta),I.nullable&&this.addKeyword("nullable",{metaSchema:{type:"boolean"}}),function(I){var g=I._opts.schemas;if(!g)return;if(Array.isArray(g))I.addSchema(g);else for(var C in g)I.addSchema(g[C],C)}(this)}function ja(I,g){return g=Ja.normalizeId(g),I._schemas[g]||I._refs[g]||I._fragments[g]}function La(I,g,C){for(var A in g){var i=g[A];i.meta||C&&!C.test(A)||(I._cache.del(i.cacheKey),delete g[A])}}function Ea(I){return I.$id&&this.logger.warn("schema $id ignored",I.$id),I.id}function _a(I){return I.id&&this.logger.warn("schema id ignored",I.id),I.$id}function $a(I){if(I.$id&&I.id&&I.$id!=I.id)throw new Error("schema $id is different from id");return I.$id||I.id}function qa(I,g){if(I._schemas[g]||I._refs[g])throw new Error('schema with key or id "'+g+'" already exists')}function IZ(){}function gZ(I){return CZ(cI,I)}function CZ(I,g){var C=arguments.length>2&&void 0!==arguments[2]&&arguments[2],A=new Ma({extendRefs:!0}).compile(I),i=A(g),e="",l="";return A.errors&&(l=JSON.stringify(A.errors,null,2),C||console.warn(l),e="\u26a0\ufe0f Some properties are incorrectly used."),{state:i?"success":"warn",message:e,details:l}}function AZ(I){var g=!0,C=[];return HI(I).forEach((function(I){iZ(I)||"brush"===I.mark||"rule"===I.mark||(C.push("genomic type is not encoded to either a x- or y- axis"),g=!1);var A=I.color;"line"===I.mark&&DI(A)&&"quantitative"===A.type&&(C.push("`line` mark cannot be used with `quantitative` value"),g=!1)})),{valid:g,errorMessages:C}}function iZ(I){var g=void 0;return["x","y","xe","ye","x1","y1","x1e","y1e"].reverse().forEach((function(C){var A=I[C];DI(A)&&"genomic"===A.type&&(g=A)})),g}function eZ(I){var g=void 0;return["x","xe","y","ye","x1","y1","x1e","y1e"].reverse().forEach((function(C){var A=I[C];DI(A)&&"genomic"===A.type&&(g=C)})),g}var lZ={$ref:"#/definitions/HiGlassSpec",$schema:"http://json-schema.org/draft-07/schema#",definitions:{Assembly:{enum:["hg38","hg19","hg18","hg17","hg16","mm10","mm9","unknown"],type:"string"},CombinedTrack:{additionalProperties:!1,properties:{contents:{items:{$ref:"#/definitions/Track"},type:"array"},height:{type:"number"},options:{},position:{type:"string"},type:{const:"combined",type:"string"},uid:{type:"string"},width:{type:"number"}},required:["type","contents"],type:"object"},Data:{additionalProperties:!1,properties:{assembly:{$ref:"#/definitions/Assembly"},children:{items:{},type:"array"},filter:{items:{$ref:"#/definitions/FilterTransform"},type:"array"},tiles:{},tilesetInfo:{},type:{type:"string"},url:{type:"string"}},type:"object"},EnumTrack:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},data:{$ref:"#/definitions/Data"},fromViewUid:{type:["null","string"]},height:{type:"number"},options:{},server:{type:"string"},tilesetUid:{type:"string"},type:{$ref:"#/definitions/EnumTrackType"},uid:{type:"string"},width:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["type"],type:"object"},EnumTrackType:{enum:["heatmap","2d-annotations","2d-chromosome-annotations","2d-chromosome-grid","2d-chromosome-labels","2d-rectangle-domains","2d-tiles","arrowhead-domains","bedlike","cross-rule","dummy","horizontal-1d-annotations","horizontal-1d-heatmap","horizontal-1d-tiles","horizontal-1d-value-interval","horizontal-2d-rectangle-domains","horizontal-bar","horizontal-chromosome-grid","horizontal-chromosome-labels","horizontal-divergent-bar","horizontal-gene-annotations","horizontal-heatmap","horizontal-line","horizontal-multivec","horizontal-point","horizontal-rule","horizontal-vector-heatmap","image-tiles","left-axis","left-stacked-interval","mapbox-tiles","osm-2d-tile-ids","osm-tiles","raster-tiles","simple-svg","square-markers","top-axis","top-stacked-interval","vertical-1d-annotations","vertical-1d-heatmap","vertical-1d-tiles","vertical-1d-value-interval","vertical-2d-rectangle-domains","vertical-bar","vertical-bedlike","vertical-chromosome-grid","vertical-chromosome-labels","vertical-gene-annotations","vertical-heatmap","vertical-line","vertical-multivec","vertical-point","vertical-rule","vertical-vector-heatmap","viewport-projection-center","viewport-projection-horizontal","viewport-projection-vertical","gosling-track","gosling-2d-track","axis-track","text"],type:"string"},FilterTransform:{anyOf:[{$ref:"#/definitions/OneOfFilter"},{$ref:"#/definitions/RangeFilter"},{$ref:"#/definitions/IncludeFilter"}]},GenericLocks:{additionalProperties:!1,properties:{locksByViewUid:{$ref:"#/definitions/LocksByViewUid"},locksDict:{}},required:["locksByViewUid","locksDict"],type:"object"},GenomePositionSearchBox:{additionalProperties:!1,properties:{autocompleteId:{type:"string"},autocompleteServer:{type:"string"},chromInfoId:{type:"string"},chromInfoServer:{type:"string"},visible:{type:"boolean"}},required:["chromInfoId","chromInfoServer"],type:"object"},HeatmapTrack:{additionalProperties:!1,properties:{data:{$ref:"#/definitions/Data"},height:{type:"number"},options:{},position:{type:"string"},server:{type:"string"},tilesetUid:{type:"string"},type:{const:"heatmap",type:"string"},uid:{type:"string"},width:{type:"number"}},required:["type"],type:"object"},HiGlassSpec:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},compactLayout:{type:"boolean"},editable:{type:"boolean"},exportViewUrl:{type:"string"},locationLocks:{$ref:"#/definitions/GenericLocks"},trackSourceServers:{items:{type:"string"},type:"array"},tracksEditable:{type:"boolean"},valueScaleLocks:{$ref:"#/definitions/ValueScaleLocks"},viewEditable:{type:"boolean"},views:{items:{$ref:"#/definitions/View"},type:"array"},zoomFixed:{type:"boolean"},zoomLocks:{$ref:"#/definitions/GenericLocks"}},required:["views","zoomLocks","locationLocks"],type:"object"},IncludeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},include:{description:"Check whether the value includes a substring.",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","include","type"],type:"object"},IndependentViewportProjectionTrack:{additionalProperties:!1,properties:{fromViewUid:{type:"null"},options:{},projectionXDomain:{items:{type:"number"},type:"array"},projectionYDomain:{items:{type:"number"},type:"array"},transforms:{items:{},type:"array"},type:{enum:["viewport-projection-horizontal","viewport-projection-vertical","viewport-projection-center"],type:"string"},uid:{type:"string"},width:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["type"],type:"object"},Layout:{additionalProperties:!1,properties:{h:{type:"number"},w:{type:"number"},x:{type:"number"},y:{type:"number"}},required:["h","w","x","y"],type:"object"},LocksByViewUid:{additionalProperties:{type:"string"},type:"object"},OneOfFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},oneOf:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"}],description:"Check whether the value is an element in the provided list."},type:{const:"filter",type:"string"}},required:["field","oneOf","type"],type:"object"},Overlay:{additionalProperties:!1,properties:{chromInfoPath:{type:"string"},includes:{items:{},type:"array"},options:{$ref:"#/definitions/OverlayOptions"},type:{type:"string"},uid:{type:"string"}},type:"object"},OverlayOptions:{additionalProperties:!1,properties:{extent:{items:{},type:"array"},fill:{type:"string"},fillOpacity:{type:"number"},minWidth:{type:"number"},outline:{type:"string"},outlineOpacity:{type:"number"},outlinePos:{anyOf:[{items:{},type:"array"},{type:"string"}]},outlineWidth:{type:"number"},stroke:{type:"string"},strokeOpacity:{type:"number"},strokePos:{anyOf:[{items:{},type:"array"},{type:"string"}]},strokeWidth:{type:"number"}},type:"object"},RangeFilter:{additionalProperties:!1,properties:{field:{description:"A filter is applied based on the values of the specified data field",type:"string"},inRange:{description:"Check whether the value is in a number range.",items:{type:"number"},type:"array"},not:{description:'when `{"not": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`',type:"boolean"},type:{const:"filter",type:"string"}},required:["field","inRange","type"],type:"object"},Track:{anyOf:[{$ref:"#/definitions/HeatmapTrack"},{$ref:"#/definitions/CombinedTrack"},{$ref:"#/definitions/IndependentViewportProjectionTrack"},{$ref:"#/definitions/EnumTrack"}]},Tracks:{additionalProperties:!1,properties:{bottom:{items:{$ref:"#/definitions/Track"},type:"array"},center:{items:{$ref:"#/definitions/Track"},type:"array"},gallery:{items:{$ref:"#/definitions/Track"},type:"array"},left:{items:{$ref:"#/definitions/Track"},type:"array"},right:{items:{$ref:"#/definitions/Track"},type:"array"},top:{items:{$ref:"#/definitions/Track"},type:"array"},whole:{items:{$ref:"#/definitions/Track"},type:"array"}},required:["top","left","center","right","bottom","gallery","whole"],type:"object"},ValueScaleLocks:{additionalProperties:!1,properties:{locksByViewUid:{$ref:"#/definitions/LocksByViewUid"},locksDict:{}},required:["locksByViewUid"],type:"object"},View:{additionalProperties:!1,properties:{autocompleteSource:{type:"string"},chromInfoPath:{type:"string"},genomePositionSearchBox:{$ref:"#/definitions/GenomePositionSearchBox"},genomePositionSearchBoxVisible:{type:"boolean"},initialXDomain:{items:{type:"number"},type:"array"},initialYDomain:{items:{type:"number"},type:"array"},layout:{$ref:"#/definitions/Layout"},overlays:{items:{$ref:"#/definitions/Overlay"},type:"array"},selectionView:{type:"boolean"},tracks:{$ref:"#/definitions/Tracks"},uid:{type:"string"},zoomFixed:{type:"boolean"},zoomLimits:{items:[{type:["number","null"]},{type:["number","null"]}],maxItems:2,minItems:2,type:"array"}},required:["tracks","layout"],type:"object"}}};function oZ(I,g){if("chromosome"in I&&(I.chromosome.includes("chr")&&(I.chromosome=I.chromosome.replace("chr","")),Object.keys(Qg().interval).find((function(g){return g==="chr".concat(I.chromosome)}))||(I.chromosome="1")),function(I){return"chromosome"in I&&!("interval"in I)}(I))return[Qg(g).interval["chr".concat(I.chromosome)][0]+1,Qg(g).interval["chr".concat(I.chromosome)][1]];if(function(I){return!("chromosome"in I)&&"interval"in I}(I))return I.interval;if(function(I){return"chromosome"in I&&"interval"in I}(I)){var C=Qg(g).interval["chr".concat(I.chromosome)][0],A=Object(r.a)(I.interval,2);return[C+A[0],C+A[1]]}}function tZ(I,g){var C={},A=VI;I.forEach((function(I){A.forEach((function(g){var A=I.spec()[g];if(DI(A)&&void 0!==A.domain){var i=A.domain,e=A.type;if("quantitative"===e){var l=Array.from(i);C[g]?(C[g][0]>l[0]&&(C[g][0]=l[0]),C[g][1]<l[1]&&(C[g][1]=l[1])):C[g]=l}else if("nominal"===e){var o=Array.from(i);C[g]?C[g]=Array.from(new Set([].concat(Object(b.a)(C[g]),Object(b.a)(o)))):C[g]=o}}}))})),I.forEach((function(I){A.forEach((function(A){var i=I.spec()[A];DI(i)&&"genomic"===i.type||(I.setChannelDomain(A,C[A],g),I.generateScales())})),I.updateChannelValue()}))}var cZ={compactLayout:!1,trackSourceServers:["https://server.gosling-lang.org/api/v1/"],views:[{genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:"hg38"},layout:{x:0,y:0,w:6.4,h:600},tracks:{top:[],left:[{type:"combined",width:130,height:600,contents:[{type:"gosling-track",server:"https://server.gosling-lang.org/api/v1/",tilesetUid:"cistrome-multivec",width:130,height:600,options:{showMousePosition:!0,mousePositionColor:"#000000",fontSize:24,labelPosition:"none",labelShowResolution:!1,labelColor:"black",labelBackgroundColor:"white",labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:{spacing:10,orientation:"vertical",assembly:"hg38",layout:"linear",static:!1,xDomain:{interval:[0,1e9]},centerRadius:.3,xOffset:0,yOffset:0,style:{outlineWidth:.5},data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",axis:"left",domain:{interval:[0,1e9]},linkingId:"7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},tooltip:[{field:"start",type:"genomic",alt:"Start Position"},{field:"end",type:"genomic",alt:"End Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:160,height:600,overlayOnPreviousTrack:!1},theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}}}}]},{uid:"15483511-f6fb-11eb-914b-976b6ecda162",type:"axis-track",chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes",options:{layout:"linear",outerRadius:null,width:160,height:600,theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}},assembly:"hg38",stroke:"transparent",color:"black",fontSize:12,fontFamily:"Arial",fontWeight:"normal",tickColor:"black",tickFormat:"plain",tickPositions:"even",reverseOrientation:!1},width:30}],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,1e9],initialYDomain:[0,1e9],zoomFixed:!1,zoomLimits:[1,null],uid:"15483510-f6fb-11eb-914b-976b6ecda162",chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"},{genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:"hg38"},layout:{x:6.8,y:0,w:5.2,h:600},tracks:{top:[],left:[{type:"combined",width:130,height:600,contents:[{type:"gosling-track",server:"https://server.gosling-lang.org/api/v1/",tilesetUid:"cistrome-multivec",width:130,height:600,options:{showMousePosition:!0,mousePositionColor:"#000000",fontSize:24,labelPosition:"none",labelShowResolution:!1,labelColor:"black",labelBackgroundColor:"white",labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:{spacing:10,orientation:"vertical",assembly:"hg38",layout:"linear",static:!1,xDomain:{interval:[0,1e9]},centerRadius:.3,xOffset:0,yOffset:0,style:{outlineWidth:.5},data:{url:"https://server.gosling-lang.org/api/v1/tileset_info/?d=cistrome-multivec",type:"multivec",row:"sample",column:"position",value:"peak",categories:["sample 1","sample 2","sample 3","sample 4"],binSize:4},mark:"rect",x:{field:"start",type:"genomic",domain:{interval:[0,1e9]},linkingId:"7f94b74e-25ec-4e67-8c75-3dc0f1b0d6bd"},xe:{field:"end",type:"genomic"},row:{field:"sample",type:"nominal",legend:!0},color:{field:"peak",type:"quantitative",legend:!0},tooltip:[{field:"start",type:"genomic",alt:"Start Position"},{field:"end",type:"genomic",alt:"End Position"},{field:"peak",type:"quantitative",alt:"Value",format:".2"},{field:"sample",type:"nominal",alt:"Sample"}],width:130,height:600},theme:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},point:{color:"#E79F00",size:3,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rect:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},triangle:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},area:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},line:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},bar:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},rule:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},link:{color:"#E79F00",size:1,stroke:"black",strokeWidth:1,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]},text:{color:"#E79F00",size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6],textAnchor:"middle",textFontWeight:"normal"},brush:{color:"gray",size:1,stroke:"black",strokeWidth:1,opacity:.3,nominalColorRange:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],quantitativeSizeRange:[2,6]}}}}]}],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,1e9],initialYDomain:[0,1e9],zoomFixed:!1,zoomLimits:[1,null],uid:"154b1b40-f6fb-11eb-914b-976b6ecda162"}],zoomLocks:{locksByViewUid:{},locksDict:{}},locationLocks:{locksByViewUid:{},locksDict:{}},editable:!1,chromInfoPath:"https://s3.amazonaws.com/gosling-lang.org/data/hg38.chrom.sizes"};function nZ(I,g,C){return[].concat(Object(b.a)(I.slice(0,g)),[C],Object(b.a)(I.slice(g)))}function dZ(I){for(var g=[],C=0;C<I.length;C+=2)g.push([I[C],I[C+1]]);return g}var sZ=30,aZ=function(){function I(){Object(t.a)(this,I),this.assembly="hg38",this.hg={compactLayout:!1,trackSourceServers:[],views:[],zoomLocks:{locksByViewUid:{},locksDict:{}},locationLocks:{locksByViewUid:{},locksDict:{}}},this.setEditable(!1)}return Object(c.a)(I,[{key:"spec",value:function(){return this.hg}},{key:"setViewOrientation",value:function(I){return this.orientation=I,this}},{key:"addDefaultView",value:function(I,g){return this.hg.views.push(JSON.parse(JSON.stringify(Object(m.a)(Object(m.a)({},function(I){return{genomePositionSearchBoxVisible:!1,genomePositionSearchBox:{autocompleteServer:"https://higlass.io/api/v1",autocompleteId:"P0PLbQMwTYGy-5uPIQid7A",chromInfoServer:"https://higlass.io/api/v1",chromInfoId:null!=I?I:"hg38"},layout:{w:12,h:12,x:0,y:0},tracks:{top:[],left:[],center:[],right:[],bottom:[],gallery:[],whole:[]},initialXDomain:[0,Qg(I).total],initialYDomain:[0,Qg(I).total],zoomFixed:!1}}(g)),{},{uid:I})))),this}},{key:"setAssembly",value:function(I){return this.assembly=I,this.setChromInfoPath(Qg(this.assembly).path),this}},{key:"getAssembly",value:function(){return this.assembly}},{key:"setTextTrack",value:function(I,g,C){var A,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"black",e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:14,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"normal",o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"left",t=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"transparent",c=arguments.length>8&&void 0!==arguments[8]?arguments[8]:"Arial";return this.getLastView()&&(null==(A=this.getLastView().tracks.top)||A.push({type:"text",width:I,height:g,options:{backgroundColor:t,textColor:i,fontSize:e,fontWeight:l,fontFamily:c,offsetY:0,align:o,text:C}})),this}},{key:"addBrush",value:function(I,g,C,A,i){var e,l,o,t,c,n;if(A)return null==(n=this.getView(g))||n.tracks.whole.push({type:"circular"===I?"brush-track":"viewport-projection-horizontal",uid:sg(),fromViewUid:A,options:{projectionFillColor:null!=(e=null==i?void 0:i.color)?e:C.brush.color,projectionStrokeColor:null!=(l=null==i?void 0:i.stroke)?l:C.brush.stroke,projectionFillOpacity:null!=(o=null==i?void 0:i.opacity)?o:C.brush.opacity,projectionStrokeOpacity:null!=(t=null==i?void 0:i.opacity)?t:C.brush.opacity,strokeWidth:null!=(c=null==i?void 0:i.strokeWidth)?c:C.brush.strokeWidth,startAngle:null==i?void 0:i.startAngle,endAngle:null==i?void 0:i.endAngle,innerRadius:null==i?void 0:i.innerRadius,outerRadius:null==i?void 0:i.outerRadius}}),this}},{key:"getLastView",value:function(){return this.hg.views[this.hg.views.length-1]}},{key:"getMainTrackPosition",value:function(){return"vertical"===this.orientation?"left":"center"}},{key:"getLastVisView",value:function(){var I=this,g=this.hg.views.filter((function(g){var C,A;return"combined"===(null==(A=null==(C=g.tracks[I.getMainTrackPosition()])?void 0:C[0])?void 0:A.type)}));return g[g.length-1]}},{key:"getView",value:function(I){return this.hg.views.find((function(g){return g.uid===I}))}},{key:"validateSpec",value:function(){var I=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return"success"===CZ(lZ,this.spec(),I).state}},{key:"setDomain",value:function(I,g){return I&&(this.getLastView().initialXDomain=oZ(I,this.getAssembly())),g&&(this.getLastView().initialYDomain=oZ(g,this.getAssembly())),this}},{key:"adjustDomain",value:function(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"horizontal",g=arguments.length>1?arguments[1]:void 0,C=arguments.length>2?arguments[2]:void 0;if("vertical"!==I)return this;var A=this.getLastView().initialXDomain;if(!A)return this;var i=Object(r.a)(A,2),e=i[0],l=i[1],o=l-e,t=(e+l)/2;return this.getLastView().initialXDomain=[t-o/g/2/C*g,t+o/g/2/C*g],this}},{key:"setZoomFixed",value:function(I){return this.getLastView().zoomFixed=I,this}},{key:"setZoomLimits",value:function(I){return this.getLastView().zoomLimits=I,this}},{key:"setLayout",value:function(I){return this.getLastView().layout=I,this}},{key:"setEditable",value:function(I){return this.hg.editable=I,this}},{key:"setChromInfoPath",value:function(I){return this.getLastView()&&(this.getLastView().chromInfoPath=I),this.hg.chromInfoPath=I,this}},{key:"addTrackSourceServers",value:function(I){var g,C;return I&&-1===(null==(g=this.hg.trackSourceServers)?void 0:g.indexOf(I))&&(null==(C=this.hg.trackSourceServers)||C.push(I)),this}},{key:"setMainTrack",value:function(I){var g;return this.getLastView()?(this.getLastView().tracks[this.getMainTrackPosition()]=[{type:"combined",uid:"".concat(null!=(g=I.uid)?g:sg(),"-").concat(this.getMainTrackPosition(),"-combined"),width:I.width-1,height:I.height,contents:[I]}],this):this}},{key:"addTrackToCombined",value:function(I){var g;return this.getLastVisView()?(null==(g=this.getLastVisView().tracks[this.getMainTrackPosition()][0])||g.contents.push(I),this):this}},{key:"setAxisTrack",value:function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"regular",C=arguments.length>2?arguments[2]:void 0;if(!this.hg.views)return this;var A="left"===I||"right"===I?"width":"height",i={type:"axis-track",chromInfoPath:this.hg.chromInfoPath,options:Object(m.a)(Object(m.a)({},C),{},{assembly:this.getAssembly(),stroke:"transparent",color:C.theme.axis.labelColor,fontSize:C.theme.axis.labelFontSize,fontFamily:C.theme.axis.labelFontFamily,fontWeight:C.theme.axis.labelFontWeight,tickColor:C.theme.axis.tickColor,tickFormat:"narrower"===g?"si":"plain",tickPositions:"regular"===g?"even":"ends",reverseOrientation:"bottom"===I||"right"===I})};if("circular"===C.layout)this.addTrackToCombined(Object(m.a)(Object(m.a)({},i),{},{options:Object(m.a)(Object(m.a)({},i.options),{},{layout:"circular"})}));else{var e=Object(m.a)(Object(m.a)({},i),{},Object(o.a)({},A,sZ));if("left"===I){if(0!==this.getLastView().tracks.left.filter((function(I){return"axis-track"===I.type})).length)return this;this.getLastView().tracks.left=nZ(this.getLastView().tracks.left,0,e)}else if("right"===I){if(0!==this.getLastView().tracks.right.filter((function(I){return"axis-track"===I.type})).length)return this;this.getLastView().tracks.right.push(e)}else{if(0!==this.getLastView().tracks[I].filter((function(I){return"axis-track"===I.type})).length)return this;this.getLastView().tracks[I].push(e)}}return this}},{key:"setExampleHiglassViewConfig",value:function(){this.hg=cZ}}]),I}();function ZZ(I,g,C,A){var i=A&&0!==A?A:void 0,e=0;switch(g){case"less-than":case"LT":case"lt":e=C>I?i?(C-I)/i:1:0;break;case"less-than-or-equal-to":case"LTET":case"ltet":e=C>=I?i?(C-I)/i:1:0;break;case"greater-than":case"GT":case"gt":e=C<I?i?(I-C)/i:1:0;break;case"greater-than-or-equal-to":case"GTET":case"gtet":e=C<=I?i?(I-C)/i:1:0}return Math.max(Math.min(1,e),0)}var mZ={NOMINAL_COLOR:["#E79F00","#029F73","#0072B2","#CB7AA7","#D45E00","#57B4E9","#EFE441"],NOMINAL_COLOR_EXTENDED:["#d60000","#018700","#b500ff","#05acc6","#97ff00","#ffa52f","#ff8ec8","#79525e","#00fdcf","#afa5ff","#93ac83","#9a6900","#366962","#d3008c","#fdf490","#c86e66","#9ee2ff","#00c846","#a877ac","#b8ba01","#f4bfb1","#ff28fd","#f2cdff","#009e7c","#ff6200","#56642a","#953f1f","#90318e","#ff3464","#a0e491","#8c9ab1","#829026","#ae083f","#77c6ba","#bc9157","#e48eff","#72b8ff","#c6a5c1","#ff9070","#d3c37c","#bceddb","#6b8567","#916e56","#f9ff00","#bac1df","#ac567c","#ffcd03","#ff49b1","#c15603","#5d8c90","#c144bc","#00753f","#ba6efd","#00d493","#00ff75","#49a150","#cc9790","#00ebed","#db7e01","#f77589","#b89500","#c84248","#00cff9","#755726","#85d401","#ebffd4","#a77b87","#db72c8","#cae256","#8abf5d","#a1216b","#855b89","#89bacf","#ffbad6","#b6cfaa","#97414d","#67aa00","#fde1b1","#ff3628","#80793d","#d6e8ff","#a795c6","#7ea59a","#d182a3","#54823b","#e6a872","#9cffff","#da5480","#05b3aa","#ffaaf6","#d1afef","#da015d","#ac1a13","#60b385","#d442fd","#acaa59","#fb9ca7","#b3723b","#f26952","#aed1d4","#9affc3","#dbb333","#eb01c3","#9900c4","#cfff9e","#a55949","#3b6d01","#008579","#959167","#89dbb3","#6d7400","#aa5dca","#07ef00","#804f3d","#d88052","#ffc862","#b8009e","#99acdd","#904f00","#8c4470","#4f6e52","#ff8734","#c68ecd","#d4e29e","#b1826d","#9cfb75","#56dd77","#f90087","#a1cdff","#13cad1","#118e54","#d154a5","#00dfc3","#a3832f","#77975b","#baaa80","#70a3af","#d6fbff","#e8013a","#d84621","#ff82ed","#b63862","#b6cd72","#97626b","#897490","#00a316","#00f4a1","#bf90f2","#89e4d8","#a34d95","#6e5d00","#8cc68e","#95aa2a","#c672dd","#b33b01","#d69a36","#dfacb6","#009aa0","#599000","#97bca8","#ac8ca8","#dad4ff","#547c72","#00ba69","#ffc38e","#b800d4","#dfcf5b","#629a7b","#bfedbc","#c1bdfd","#80d3dd","#e2857e","#f9eb4d","#bf6d82","#caff4f","#ef72aa","#ed67ff","#9946ae","#6d6942","#e25660","#dd662d","#9cdb5d","#e29ccf","#b87500","#c6002d","#dfbcda","#59b5df","#ff59da","#38c1a1","#9e698c","#acaac8","#95622f","#b55662","#2b7e60","#b1e400","#eda590","#95fde2","#ff548e","#bd6ea1","#aa3b36","#d8cf00","#aa80cd","#a08052","#e100e8","#c35b3d","#b53a85","#8c7700","#dbbc95","#529e93","#afbc82","#91b5b6","#a75423","#ffd4ef","#79ae6b","#5db54b","#80fb9a","#48ffef","#979548","#9387a7","#31d400","#6ee956","#b6d4eb","#705470","#f2db8a","#aad4c1","#7ecdf2","#89ba00","#64b6ba","#ffb500","#c38285","#caaa5e","#647748","#59e2ff","#df4dcd","#e9ff79","#bc66b8","#c395a5","#64c674","#d19570","#70cf4f","#aa6e66","#9c60a5","#00b800","#e299b3","#bc006b","#b3e8ef","#cdbfe4","#77a342","#856277","#568e5b","#9eafc4","#e82fa0","#247c2a","#826723","#bfbc4d","#ddd3a5"],QUANTITATIVE_COLOR:"viridis",SIZE:3,SIZE_RANGE:[2,6]};function bZ(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"light";if("string"===typeof I)return iI.b(I)?iI.a(I):"dark"===I||"light"===I?GZ[I]:GZ.light;var g=JSON.parse(JSON.stringify(GZ.light));return iI.b(I.base)?g=iI.a(I.base):"light"!==I.base&&"dark"!==I.base||(g=JSON.parse(JSON.stringify(GZ[I.base]))),Object.keys(g).forEach((function(C){I[C]&&"base"!==C&&(g[C]=Object.assign(JSON.parse(JSON.stringify(g[C])),JSON.parse(JSON.stringify(I[C]))))})),g}var rZ={color:mZ.NOMINAL_COLOR[0],size:1,stroke:"black",strokeWidth:0,opacity:1,nominalColorRange:mZ.NOMINAL_COLOR,quantitativeSizeRange:[2,6]},hZ=Object(m.a)(Object(m.a)({},rZ),{},{stroke:"white"}),GZ={light:{base:"light",root:{background:"white",titleColor:"black",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"left",titleFontWeight:"bold",subtitleColor:"gray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleFontWeight:"normal",subtitleAlign:"left",showMousePosition:!0,mousePositionColor:"#000000"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"black",titleBackground:"white",titleFontSize:24,titleAlign:"left",outline:"black",outlineWidth:1},legend:{position:"top",background:"white",backgroundOpacity:.7,labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"black"},axis:{tickColor:"black",labelColor:"black",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"black",gridColor:"#E3E3E3",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:Object(m.a)({},rZ),point:Object(m.a)(Object(m.a)({},rZ),{},{size:3}),rect:Object(m.a)({},rZ),triangle:Object(m.a)({},rZ),area:Object(m.a)({},rZ),line:Object(m.a)({},rZ),bar:Object(m.a)({},rZ),rule:Object(m.a)(Object(m.a)({},rZ),{},{strokeWidth:1}),link:Object(m.a)(Object(m.a)({},rZ),{},{strokeWidth:1}),text:Object(m.a)(Object(m.a)({},rZ),{},{textAnchor:"middle",textFontWeight:"normal"}),brush:Object(m.a)(Object(m.a)({},rZ),{},{color:"gray",opacity:.3,stroke:"black",strokeWidth:1})},dark:{base:"dark",root:{background:"black",titleColor:"white",titleBackgroundColor:"transparent",titleFontSize:18,titleFontFamily:"Arial",titleAlign:"middle",titleFontWeight:"bold",subtitleColor:"lightgray",subtitleBackgroundColor:"transparent",subtitleFontSize:16,subtitleFontFamily:"Arial",subtitleAlign:"middle",subtitleFontWeight:"normal",showMousePosition:!0,mousePositionColor:"#FFFFFF"},track:{background:"transparent",alternatingBackground:"transparent",titleColor:"white",titleBackground:"black",titleFontSize:18,titleAlign:"left",outline:"white",outlineWidth:1},legend:{position:"right",background:"black",backgroundOpacity:.7,labelColor:"white",labelFontSize:12,labelFontWeight:"normal",labelFontFamily:"Arial",backgroundStroke:"#DBDBDB",tickColor:"white"},axis:{tickColor:"white",labelColor:"white",labelFontSize:10,labelFontWeight:"normal",labelFontFamily:"Arial",baselineColor:"white",gridColor:"gray",gridStrokeWidth:1,gridStrokeType:"solid",gridStrokeDash:[4,4]},markCommon:Object(m.a)({},hZ),point:Object(m.a)(Object(m.a)({},hZ),{},{size:3}),rect:Object(m.a)({},hZ),triangle:Object(m.a)({},hZ),area:Object(m.a)({},hZ),line:Object(m.a)({},hZ),bar:Object(m.a)({},hZ),rule:Object(m.a)(Object(m.a)({},hZ),{},{strokeWidth:1}),link:Object(m.a)(Object(m.a)({},hZ),{},{strokeWidth:1}),text:Object(m.a)(Object(m.a)({},hZ),{},{textAnchor:"middle",textFontWeight:"normal"}),brush:Object(m.a)(Object(m.a)({},hZ),{},{color:"lightgray",opacity:.3,stroke:"white",strokeWidth:1})}},uZ=function(I,g){var C=Object(r.a)(I,2),A=C[0],i=C[1];return A<=g&&g<=i},yZ=function(){function I(){Object(t.a)(this,I),this.data=[]}return Object(c.a)(I,[{key:"size",value:function(){return this.data.length}},{key:"addPolygonBasedEvent",value:function(I,g){this.data.push({uid:sg(),type:"polygon",value:I,polygon:g})}},{key:"addPointBasedEvent",value:function(I,g){this.data.push({uid:sg(),type:"point",value:I,polygon:g})}},{key:"addLineBasedEvent",value:function(I,g){this.data.push({uid:sg(),type:"line",value:I,polygon:g})}},{key:"clear",value:function(){this.data=[]}},{key:"find",value:function(I,g){var C=this,A=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=Array.from(this.data);return A&&i.reverse(),i.find((function(A){return C.isMouseWithin(A,I,g)}))}},{key:"findAll",value:function(I,g){var C=this,A=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=Array.from(this.data);return A&&i.reverse(),i.filter((function(A){return C.isMouseWithin(A,I,g)}))}},{key:"getSiblings",value:function(I,g){var C=this,A=[],i=Array.from(new Set(I.map((function(I){return I.uid}))));return I.forEach((function(I){var e=I.value[g];e&&A.push.apply(A,Object(b.a)(C.data.filter((function(I){return I.value[g]===e&&-1===i.indexOf(I.uid)}))))})),A}},{key:"isMouseWithin",value:function(I,g,C){switch(I.type){case"point":return function(I,g){var C=Object(r.a)(I,2),A=C[0],i=C[1],e=Object(r.a)(g,2),l=e[0],o=e[1],t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5;return Math.sqrt(Math.pow(A-l,2)+Math.pow(i-o,2))<t}([g,C],I.polygon);case"line":return function(I,g){for(var C,A,i,e,l=Object(r.a)(I,2),o=l[0],t=l[1],c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5,n=!1,d=0;d<g.length-2;d+=2){C=g[d],A=g[d+1];var s=[(i=g[d+2])-C,(e=g[d+3])-A],a=[o-i,t-e],Z=[o-C,t-A],m=s[0]*a[0]+s[1]*a[1],b=s[0]*Z[0]+s[1]*Z[1];(m>0?Math.sqrt(Math.pow(t-e,2)+Math.pow(o-i,2)):b<0?Math.sqrt(Math.pow(t-A,2)+Math.pow(o-C,2)):Math.abs(s[0]*Z[1]-s[1]*Z[0])/Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)))<c&&(n=!0)}return n}([g,C],I.polygon);default:return function(I,g){for(var C,A,i,e,l=Object(r.a)(I,2),o=l[0],t=l[1],c=!1,n=0,d=g.length-2;n<g.length;n+=2)C=g[n],A=g[n+1],i=g[d],A>t!==(e=g[d+1])>t&&o<(i-C)*(t-A)/(e-A)+C&&(c=!c),d=n;return c}([g,C],I.polygon)}}},{key:"findAllWithinRange",value:function(I,g){var C=this,A=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=Array.from(this.data);return A&&i.reverse(),i.filter((function(A){return C.isWithinRange(A,I,g)}))}},{key:"isWithinRange",value:function(I,g,C){return"point"===I.type?function(I,g){var C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5;return uZ(I,g-C)&&uZ(I,g+C)}([g,C],I.polygon[0],I.polygon[2]):(A=[g,C],I.polygon.filter((function(I,g){return g%2===0})).every((function(I){return uZ(A,I)})));var A}}]),I}(),BZ=function(){function I(g,C,A){Object(t.a)(this,I),this.id=Ag(),this.theme=null!=A?A:bZ(),this.dataOriginal=JSON.parse(JSON.stringify(C)),this.dataAggregated=JSON.parse(JSON.stringify(C)),this.specOriginal=JSON.parse(JSON.stringify(g)),this.specComplete=JSON.parse(JSON.stringify(g)),this.channelScales={},this.mouseEventModel=new yZ;var i=this.validateSpec();i.valid?(this.generateCompleteSpec(this.specComplete),this.flipRanges(this.specComplete),this.generateScales(),this.dataAggregated=cC(this.spec(),this.dataAggregated)):console.warn("Gosling specification is not valid!",i.errorMessages)}return Object(c.a)(I,[{key:"getId",value:function(){return this.id}},{key:"getRenderingId",value:function(){var I;return null!=(I=this.spec()._renderingId)?I:this.getId()}},{key:"originalSpec",value:function(){return this.specOriginal}},{key:"spec",value:function(){return this.specComplete}},{key:"data",value:function(){return this.dataAggregated}},{key:"getMouseEventModel",value:function(){return this.mouseEventModel}},{key:"generateCompleteSpec",value:function(I){if(I.width&&I.height){if("vertical"===I.orientation){var g=I.width;I.width=I.height,I.height=g}var C=this.getGenomicChannelKey(),A=!1;"x"===C&&(A=DI(I.x)&&void 0!==I.x.axis&&"none"!==I.x.axis),"y"===C&&(A=DI(I.y)&&void 0!==I.y.axis&&"none"!==I.y.axis),"circular"!==I.layout?DI(I.x)&&void 0!==I.x.axis&&"none"!==I.x.axis&&(I.height-=sZ):"x"===C&&A&&DI(I.x)&&"top"===I.x.axis?I.outerRadius=I.outerRadius-sZ:"x"===C&&A&&DI(I.x)&&"bottom"===I.x.axis&&(I.innerRadius=I.innerRadius+sZ),VI.forEach((function(g){var C=I[g];DI(C)&&!("zeroBaseline"in C)&&"quantitative"===C.type&&(C.zeroBaseline=!0)})),this.addScaleMaterials(I)}else console.warn("Size of track is not determined yet.")}},{key:"flipRanges",value:function(I){DI(I.y)&&I.y.flip&&Array.isArray(I.y.range)&&(I.y.range=I.y.range.reverse())}},{key:"getGenomicChannelKey",value:function(){return eZ(this.spec())}},{key:"getGenomicChannel",value:function(){return iZ(this.spec())}},{key:"setChannelDomain",value:function(I,g,C){var A=this.originalSpec()[I];if(C||!DI(A)||void 0===A.domain){var i=this.specComplete[I];DI(i)&&(i.domain=g)}}},{key:"setChannelRange",value:function(I,g){var C=this.specComplete[I];DI(C)&&(C.range=g)}},{key:"updateChannelValue",value:function(){if(void 0===this.originalSpec().y){var I=this.spec().y,g=this.getChannelDomainArray("row");I&&vI(I)&&g&&"withinLink"!==this.spec().mark&&(I.value=this.spec().height/g.length/2)}}},{key:"encodedValue",value:function(I,g){var C;if("text"===I&&void 0!==g)return"".concat(+g?~~g:g);var A=this.spec()[I],i=DI(A)?A.type:vI(A)?"constant":void 0;if(i){if("constant"===i)return this.channelScales[I]();if(void 0!==g&&"function"===typeof this.channelScales[I])switch(I){case"x":case"y":case"x1":case"y1":case"xe":case"ye":case"x1e":if("quantitative"===i||"genomic"===i)return this.channelScales[I](g);if("nominal"===i)return this.channelScales[I](g);break;case"stroke":case"color":if("quantitative"===i){var e=this.channelScales[I].copy(),l=e.domain(),o=l[1]-l[0],t=Array.from(null!=(C=A.scaleOffset)?C:[0,1]);return e.domain([l[0]+o*t.sort()[0],l[0]+o*t.sort()[1]])(g)}if("nominal"===i)return this.channelScales[I](g);break;case"size":if("quantitative"===i)return this.channelScales[I](g);if("nominal"===i)return this.channelScales[I](g);break;case"row":if("nominal"===i)return this.channelScales[I](g);break;case"strokeWidth":case"opacity":if("quantitative"===i)return this.channelScales[I](g);break;default:return void console.warn("".concat(I," is not supported for encoding values, so returning a undefined value"))}}}},{key:"trackVisibility",value:function(I){var g=this.spec();if(!g.visibility||0===g.visibility.length||0===g.visibility.filter((function(I){return"track"===I.target})).length)return!0;var C=!0;return g.visibility.filter((function(I){return"track"===I.target})).forEach((function(A){var i,e=A.operation,l=A.measure,o=A.threshold;void 0!==(i="zoomLevel"===l?I[l]:g[l])&&(C=C&&1===ZZ(i,e,o))})),C}},{key:"markVisibility",value:function(I,g){var C=this,A=this.spec();if(!A.visibility||0===A.visibility.length||0===A.visibility.filter((function(I){return"mark"===I.target})).length)return 1;var i=1;return A.visibility.filter((function(I){return"mark"===I.target})).forEach((function(e){var l=e.operation,o=e.threshold,t=e.conditionPadding,c=e.transitionPadding,n=e.measure,d=null!=t?t:0,s=1;if("text"===A.mark&&"|xe-x|"===o&&"width"===n){var a=C.encodedPIXIProperty("xe",I),Z=C.encodedPIXIProperty("x",I);void 0!==a&&(null==g?void 0:g.width)&&(s=ZZ(g.width+d,l,Math.abs(a-Z),c))}else"width"===n&&"number"===typeof o&&(null==g?void 0:g.width)?s=ZZ(g.width+d,l,o,c):"zoomLevel"===n&&"number"===typeof o&&(null==g?void 0:g.zoomLevel)&&(s=ZZ(g.zoomLevel,l,o,c));i>s&&(i=s)})),i}},{key:"visualPropertyByChannel",value:function(I,g){var C=void 0!==g?UI(g,this.spec()[I]):void 0;return this.encodedValue(I,C)}},{key:"encodedPIXIProperty",value:function(I,g,C){var A=this.spec().mark;if(["text","color","row","stroke","opacity","strokeWidth","x","y","xe","x1","x1e","ye","size"].includes(I))return this.visualPropertyByChannel(I,g);switch(A){case"bar":return function(I,g,C,A){var i=I.visualPropertyByChannel("x",C),e=I.visualPropertyByChannel("xe",C),l=I.visualPropertyByChannel("size",C);switch(g){case"width":return null!=l?l:e?e-i:null==A?void 0:A.tileUnitWidth;case"x-start":if(!(null==A?void 0:A.markWidth))return;return e?(i+e-(null==A?void 0:A.markWidth))/2:i-(null==A?void 0:A.markWidth)/2;default:return}}(this,I,g,C);case"point":case"text":return function(I,g,C){var A=I.visualPropertyByChannel("xe",C),i=I.visualPropertyByChannel("x",C),e=I.visualPropertyByChannel("size",C);switch(g){case"x-center":return A?(A+i)/2:i;case"y-center":var l=I.visualPropertyByChannel("ye",C),o=I.visualPropertyByChannel("y",C);return l?(l+o)/2:o;case"p-size":return A&&I.spec().stretch?(A-i)/2:e;default:return}}(this,I,g);case"rect":return function(I,g,C,A){var i;switch(g){case"width":var e=I.visualPropertyByChannel("xe",C)?I.visualPropertyByChannel("xe",C)-I.visualPropertyByChannel("x",C):null==A?void 0:A.markWidth;return 0===e?.1:e;case"height":return null!=(i=I.visualPropertyByChannel("size",C))?i:null==A?void 0:A.markHeight;default:return}}(this,I,g,C);default:return}}},{key:"addScaleMaterials",value:function(I){var g=this,C=this.data(),A=this.getGenomicChannel();A&&A.field?"undefined"!==typeof I.width&&"undefined"!==typeof I.height?(VI.forEach((function(i){var e,l,o,t,c=I[i];if(function(I,g){var C=I[g];return MI(I)&&("x"===g||"y"===g)&&DI(C)&&"quantitative"===C.type}(I,i)&&DI(c)){var n=Object(u.a)(C,(function(I){return I[A.field]})),d=Object(b.a)(n.keys());if(!c.domain){var s="zeroBaseline"in c&&c.zeroBaseline?0:Object(B.a)(d.map((function(I){return Object(p.a)(n.get(I).map((function(I){return c.field?I[c.field]:void 0})))}))),a=Object(y.a)(d.map((function(I){return Object(p.a)(n.get(I).map((function(I){return c.field?I[c.field]:void 0})))})));c.domain=[s,a]}if(!c.range){var Z=I.row,m=DI(Z)?Z.field:void 0,r=null!=(e=g.getChannelDomainArray("row"))?e:m?Array.from(new Set(C.map((function(I){return I[m]})))):[1],h=I.height/r.length;switch(i){case"x":c.range=[0,I.width];break;case"y":c.range=[0,h]}}}else{var G=I.row,V=DI(G)?G.field:void 0,X=null!=(l=g.getChannelDomainArray("row"))?l:V?Array.from(new Set(C.map((function(I){return I[V]})))):[1],W=I.height/X.length;if(c)if(!DI(c)||"quantitative"!==c.type&&"genomic"!==c.type){if(DI(c)&&"nominal"===c.type&&(void 0===c.domain&&(c.domain=Array.from(new Set(C.map((function(I){return I[c.field]}))))),!c.range)){var H,Y=2;switch(i){case"x":case"xe":H=[0,I.width];break;case"y":case"ye":H=[W,0];break;case"color":case"stroke":H=g.theme.markCommon.nominalColorRange;break;case"row":H=[0,I.height];break;case"size":H=c.domain.map((function(){return Y++}))}H&&(c.range=H)}}else{if(void 0===c.domain){var R="zeroBaseline"in c&&c.zeroBaseline?0:null!=(o=Object(B.a)(C.map((function(I){return+I[c.field]}))))?o:0,f=null!=(t=Object(y.a)(C.map((function(I){return+I[c.field]}))))?t:0;c.domain=[R,f]}else"genomic"!==c.type||zI(c.domain)||(c.domain=oZ(c.domain));if("color"!==i&&"stroke"!==i||"quantitative"!==c.type||c.scaleOffset||(c.scaleOffset=[0,1]),!c.range){var K;switch(i){case"x":case"xe":case"x1":case"x1e":K=[0,I.width];break;case"y":case"ye":K=[0,W];break;case"color":case"stroke":K=mZ.QUANTITATIVE_COLOR;break;case"size":K=g.theme.markCommon.quantitativeSizeRange;break;case"strokeWidth":K=[1,3];break;case"opacity":K=[0,1]}K&&(c.range=K)}}else{var w;switch(i){case"x":w=I.width/2;break;case"y":w="withinLink"===I.mark?W:W/2;break;case"size":w="line"===I.mark?g.theme.line.size:"bar"===I.mark||"rect"===I.mark||"triangleRight"===I.mark||"triangleLeft"===I.mark||"triangleBottom"===I.mark||I.stretch&&"point"===I.mark&&DI(I.x)&&DI(I.xe)?void 0:"text"===I.mark?12:g.theme.point.size;break;case"color":w=g.theme.markCommon.color;break;case"row":w=0;break;case"stroke":w="text"===I.mark?g.theme.text.stroke:g.theme.markCommon.stroke;break;case"strokeWidth":w="rule"===I.mark?g.theme.rule.strokeWidth:"withinLink"===I.mark||"betweenLink"===I.mark?g.theme.link.strokeWidth:"text"===I.mark?g.theme.text.strokeWidth:g.theme.markCommon.strokeWidth;break;case"opacity":w=g.theme.markCommon.opacity;break;case"text":w=""}"undefined"!==typeof w&&(I[i]={value:w})}}})),[["x","xe"],["y","ye"]].forEach((function(g){var C=Object(r.a)(g,2),A=C[0],i=C[1],e=I[A],l=I[i];if(DI(e)&&DI(l)&&e.type===l.type&&e.domain&&l.domain&&Array.isArray(e.domain)&&Array.isArray(l.domain))if("genomic"===e.type||"quantitative"===e.type){var o=Object(B.a)([e.domain[0],l.domain[0]]),t=Object(y.a)([e.domain[1],l.domain[1]]);e.domain=l.domain=[o,t]}else if("nominal"===e.type){var c=Array.from(new Set([].concat(Object(b.a)(e.domain),Object(b.a)(l.domain))));e.range=l.range=c}}))):console.warn("Track size is not determined yet"):console.warn("Genomic field is not provided in the specification")}},{key:"generateScales",value:function(){var I=this,g=this.spec();VI.forEach((function(C){var A=g[C];if(vI(A))I.channelScales[C]=function(){return A.value};else if(DI(A)){if("text"===C)return;var i=A.domain,e=A.range;if(void 0===i||void 0===e)return;if("quantitative"===A.type||"genomic"===A.type)switch(C){case"x":case"x1":case"xe":case"x1e":case"y":case"ye":case"size":case"opacity":case"strokeWidth":I.channelScales[C]=Object(W.a)().domain(i).range(e);break;case"color":case"stroke":var l=F.a;Object.keys(fI).includes(e)&&(l=fI[e]),I.channelScales[C]=Object(H.a)(l).domain(i)}else if("nominal"===A.type)switch(C){case"x":case"xe":case"y":case"ye":case"row":I.channelScales[C]=Object(Y.a)().domain(i).range(e);break;case"size":I.channelScales[C]=Object(R.a)().domain(i).range(e);break;case"color":case"stroke":I.channelScales[C]=Object(R.a)(e).domain(i)}}}))}},{key:"getChannelScale",value:function(I){return this.channelScales[I]}},{key:"setChannelScale",value:function(I,g){this.channelScales[I]=g}},{key:"addDataRows",value:function(I){this.dataAggregated=[].concat(Object(b.a)(this.dataAggregated),Object(b.a)(I))}},{key:"isShowYAxis",value:function(){var I=this.spec(),g=this.getChannelDomainArray("y"),C=this.getChannelRangeArray("y");return DI(I.y)&&"none"!==I.y.axis&&"quantitative"===I.y.type&&!!g&&!!C}},{key:"getChannelDomainArray",value:function(I){var g=this.spec()[I];return DI(g)&&zI(g.domain)?g.domain:void 0}},{key:"getChannelRangeArray",value:function(I){var g,C=this.spec()[I];return DI(C)&&(g=C.range,Object(K.a)(g))?C.range:void 0}},{key:"validateSpec",value:function(){return AZ(this.originalSpec())}}]),I}();function VZ(I,g){var C,A,i,e,l,t,c,n,d,s,a,Z=[];if(kI(I.data)){if("vector"===I.data.type||"bigwig"===I.data.type){if(!I.data.column||!I.data.value)return void console.warn("Proper data configuration is not provided. Please specify the name of data fields.");if(!g.dense)return;var h=null!=(C=I.data.binSize)?C:1,G=g.dense,u=g.tileSize,y=g.tileWidth/g.tileSize,B=I.data.value,V=I.data.column,p=null!=(A=I.data.start)?A:"start",X=null!=(i=I.data.end)?i:"end",W="".concat(B,"_min"),H="".concat(B,"_max"),Y=null!=(e=I.data.aggregation)?e:"mean",R=0,f=Number.MAX_SAFE_INTEGER,K=Number.MIN_SAFE_INTEGER,w=Number.MIN_SAFE_INTEGER,J=Number.MAX_SAFE_INTEGER;Array.from(Array(u).keys()).forEach((function(I,C){if(1===h){var A,i=G[C]/("mean"===Y?y:1);Z.push((A={},Object(o.a)(A,B,i),Object(o.a)(A,V,g.tileX+(C+.5)*y),Object(o.a)(A,p,g.tileX+C*y),Object(o.a)(A,X,g.tileX+(C+1)*y),Object(o.a)(A,W,i),Object(o.a)(A,H,i),A))}else if(C%h===0)R=f=K=G[C],w=C,J=C+h;else if(C%h===h-1){var e;Z.push((e={},Object(o.a)(e,B,R/h/("mean"===Y?y:1)),Object(o.a)(e,V,g.tileX+(w+h/2)*y),Object(o.a)(e,p,g.tileX+w*y),Object(o.a)(e,X,g.tileX+J*y),Object(o.a)(e,W,f),Object(o.a)(e,H,K),e))}else if(C===u-1){var l,t=u%h,c=w+t;Z.push((l={},Object(o.a)(l,B,R/t/("mean"===Y?y:1)),Object(o.a)(l,V,g.tileX+(w+t/2)*y),Object(o.a)(l,p,g.tileX+w*y),Object(o.a)(l,X,g.tileX+c*y),Object(o.a)(l,W,f),Object(o.a)(l,H,K),l))}else R+=G[C],f>G[C]&&(f=G[C]),K<G[C]&&(K=G[C])}))}else if("multivec"===I.data.type){if(!I.data.row||!I.data.column||!I.data.value)return void console.warn("Proper data configuration is not provided. Please specify the name of data fields.");if(!g.dense||void 0===g.shape)return;var S=null!=(l=I.data.binSize)?l:1,F=g.shape[0],N=null!=(t=I.data.categories)?t:Object(b.a)(Array(F).keys()),v=g.dense,k=g.shape[1],D=g.tileWidth/g.tileSize,z=I.data.row,M=I.data.value,U=I.data.column,x=null!=(c=I.data.start)?c:"start",T=null!=(n=I.data.end)?n:"end",Q="".concat(M,"_min"),P="".concat(M,"_max"),O=null!=(d=I.data.aggregation)?d:"mean";N.forEach((function(I,C){var A=0,i=Number.MIN_SAFE_INTEGER,e=Number.MAX_SAFE_INTEGER,l=Number.MAX_SAFE_INTEGER,t=Number.MIN_SAFE_INTEGER;Array.from(Array(k).keys()).forEach((function(c,n){if(1===S){var d,s=v[k*C+n]/("mean"===O?D:1);Z.push((d={},Object(o.a)(d,z,I),Object(o.a)(d,M,s),Object(o.a)(d,U,g.tileX+(n+.5)*D),Object(o.a)(d,x,g.tileX+n*D),Object(o.a)(d,T,g.tileX+(n+1)*D),Object(o.a)(d,Q,s),Object(o.a)(d,P,s),d))}else if(n%S===0)A=l=t=v[k*C+n],i=n,e=n+S;else if(n%S===S-1){var a;Z.push((a={},Object(o.a)(a,z,I),Object(o.a)(a,M,"mean"===O?A/S/D:A),Object(o.a)(a,U,g.tileX+(i+S/2)*D),Object(o.a)(a,x,g.tileX+i*D),Object(o.a)(a,T,g.tileX+e*D),Object(o.a)(a,Q,l),Object(o.a)(a,P,t),a))}else if(n===k-1){var m,b=k%S,r=i+b;Z.push((m={},Object(o.a)(m,z,I),Object(o.a)(m,M,"mean"===O?A/b/D:A),Object(o.a)(m,U,g.tileX+(i+b/2)*D),Object(o.a)(m,x,g.tileX+i*D),Object(o.a)(m,T,g.tileX+r*D),Object(o.a)(m,Q,l),Object(o.a)(m,P,t),m))}else{var h=v[k*C+n];A+=h,l>h&&(l=h),t<h&&(t=h)}}))}))}else if("matrix"===I.data.type){if(!g.dense||"undefined"===typeof g.tileY||"undefined"===typeof g.tileHeight)return;for(var j=Math.sqrt(g.dense.length),L=g.tileX,E=g.tileY,_=g.tileWidth,$=g.tileHeight,q=g.dense,II=_/j,gI=$/j,CI=null!=(s=I.data.column)?s:"x",AI=null!=(a=I.data.row)?a:"y",iI=0;iI<q.length/16;iI++){for(var eI,lI=Math.sqrt(16),oI=iI*lI%j,tI=Math.floor(iI*lI/j)*lI,cI=NaN,nI=0;nI<lI;nI++)for(var dI=0;dI<lI;dI++){var sI=q[(tI+dI)*j+(oI+nI)];isNaN(+sI)||(isNaN(cI)&&(cI=0),cI+=sI)}if(!isNaN(cI)){var aI=L+oI*II,ZI=L+(oI+lI)*II,mI=E+tI*gI,bI=E+(tI+lI)*gI,rI=(aI+ZI)/2,hI=(mI+bI)/2;Z.push((eI={value:cI},Object(o.a)(eI,CI,rI),Object(o.a)(eI,"".concat(CI,"s"),aI),Object(o.a)(eI,"".concat(CI,"e"),ZI),Object(o.a)(eI,AI,hI),Object(o.a)(eI,"".concat(AI,"s"),mI),Object(o.a)(eI,"".concat(AI,"e"),bI),eI))}}}else if("beddb"===I.data.type){if(!g.raw)return;var GI=I.data,uI=GI.genomicFields,yI=GI.exonIntervalFields,BI=GI.valueFields;g.raw.forEach((function(I,g){var C=I.chrOffset,A=I.fields,i={};if(i["gosling-data-row-uid"]="".concat(g),uI.forEach((function(I){i[I.name]=+A[I.index]+C})),null==BI||BI.forEach((function(I){i[I.name]="quantitative"===I.type?+A[I.index]:A[I.index]})),Z.push(Object(m.a)(Object(m.a)({},i),{},{type:"gene"})),yI){var e=Object(r.a)(yI,2),l=e[0],t=e[1],c=A[l.index].split(","),n=A[t.index].split(",");c.forEach((function(I,g){var A,e=n[g];if(Z.push(Object(m.a)(Object(m.a)({},i),{},(A={},Object(o.a)(A,l.name,+I+C),Object(o.a)(A,t.name,+e+C),Object(o.a)(A,"type","exon"),A))),g+1<c.length){var d,s=c[g+1];Z.push(Object(m.a)(Object(m.a)({},i),{},(d={},Object(o.a)(d,l.name,+e+C),Object(o.a)(d,t.name,+s+C),Object(o.a)(d,"type","intron"),d)))}}))}}))}return Z}console.warn("No data is specified")}function pZ(I,g){PubSub.publish(I,g)}function XZ(I,g){PubSub.subscribe(I,g)}function WZ(I){PubSub.unsubscribe(I)}var HZ="",YZ="undefined"!==typeof window&&window.Blob&&new Blob([atob(HZ)],{type:"text/javascript;charset=utf-8"});function RZ(){var I=YZ&&(window.URL||window.webkitURL).createObjectURL(YZ);try{return I?new Worker(I,{}):new Worker("data:application/javascript;base64,"+HZ,{type:"module"})}finally{I&&(window.URL||window.webkitURL).revokeObjectURL(I)}}var fZ=function(){function I(g,C){var A=this;Object(t.a)(this,I),this.dataConfig=C,this.uid=g.libraries.slugid.nice(),this.assembly="hg38",this.toFetch=new Set,this.worker=Object(eI.a)(new RZ).then(function(){var I=Object(e.a)(Object(i.a)().mark((function I(g){var e,l,o,t,c;return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return t=null!=(e=C.bamUrl)?e:C.url,c=Object(m.a)(Object(m.a)({},C),{},{bamUrl:t,baiUrl:null!=(o=null!=(l=C.baiUrl)?l:C.indexUrl)?o:"".concat(t,".bai")}),I.next=4,g.init(A.uid,c);case 4:return I.abrupt("return",g);case 5:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}())}return Object(c.a)(I,[{key:"tilesetInfo",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g){return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:I.sent.tilesetInfo(this.uid).then(g);case 3:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"fetchTilesDebounced",value:function(I,g){var C,A=this,i=this.toFetch;if(g[0].split(".")[0]!==(i.size?Object(b.a)(i)[0].split(".")[0]:null)){var e,o=Object(l.a)(this.toFetch);try{for(o.s();!(e=o.n()).done;){var t=e.value;null==(C=this.track)||C.fetching.delete(t)}}catch(c){o.e(c)}finally{o.f()}this.toFetch.clear()}g.forEach((function(I){return A.toFetch.add(I)})),this.fetchTimeout&&clearTimeout(this.fetchTimeout),this.fetchTimeout=setTimeout((function(){A.sendFetch(I,Object(b.a)(A.toFetch)),A.toFetch.clear()}),200)}},{key:"sendFetch",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g,C){return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:I.sent.fetchTilesDebounced(this.uid,C).then(g);case 3:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()},{key:"getTabularData",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g,C){var A;return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:return I.next=4,I.sent.getTabularData(g,C);case 4:return A=I.sent,I.abrupt("return",JSON.parse((new TextDecoder).decode(A)));case 6:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()}]),I}(),KZ="",wZ="undefined"!==typeof window&&window.Blob&&new Blob([atob(KZ)],{type:"text/javascript;charset=utf-8"});function JZ(){var I=wZ&&(window.URL||window.webkitURL).createObjectURL(wZ);try{return I?new Worker(I,{}):new Worker("data:application/javascript;base64,"+KZ,{type:"module"})}finally{I&&(window.URL||window.webkitURL).revokeObjectURL(I)}}var SZ=function(){function I(g,C){var A=this;Object(t.a)(this,I),this.dataConfig=C,this.uid=g.libraries.slugid.nice(),this.prevRequestTime=0,this.assembly=C.assembly,this.toFetch=new Set,this.worker=Object(eI.a)(new JZ).then(function(){var I=Object(e.a)(Object(i.a)().mark((function I(g){var e;return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,g.init(A.uid,C.url,C.indexUrl,Qg(A.assembly).path,null!=(e=C.sampleLength)?e:1e3);case 2:return I.abrupt("return",g);case 3:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}())}return Object(c.a)(I,[{key:"tilesetInfo",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g){return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:I.sent.tilesetInfo(this.uid).then(g);case 3:case"end":return I.stop()}}),I,this)})));return function(g){return I.apply(this,arguments)}}()},{key:"fetchTilesDebounced",value:function(I,g){var C=this;this.track.drawLoadingCue(),g.forEach((function(I){return C.toFetch.add(I)})),this.fetchTimeout&&clearTimeout(this.fetchTimeout),this.fetchTimeout=setTimeout((function(){C.sendFetch(I,Object(b.a)(C.toFetch)),C.toFetch.clear()}),200)}},{key:"sendFetch",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g,C){return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:I.sent.fetchTilesDebounced(this.uid,C).then(g);case 3:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()},{key:"getTabularData",value:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g,C){var A;return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,this.worker;case 2:return I.next=4,I.sent.getTabularData(g,C);case 4:return A=I.sent,I.abrupt("return",JSON.parse((new TextDecoder).decode(A)));case 6:case"end":return I.stop()}}),I,this)})));return function(g,C){return I.apply(this,arguments)}}()}]),I}(),FZ={color:"#777",stroke:"#777",strokeWidth:1,strokeOpacity:.7,opacity:.3},NZ=function(){function I(g,C,A){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};Object(t.a)(this,I),this.range=null,this.prevExtent=[0,0],this.data=this.rangeToData(0,0),this.offset=[0,0],this.size=0,this.externals={d3Selection:C.d3Selection,d3Drag:C.d3Drag},this.style=Object.assign({},FZ,i),this.brushSelection=g.selectAll(".genomic-range-brush").data(this.data).enter().append("rect").attr("class","genomic-range-brush").call(this.onDrag()),this.onBrush=A}return Object(c.a)(I,[{key:"getRange",value:function(){return this.range}},{key:"setSize",value:function(I){return this.size=I,this}},{key:"setOffset",value:function(I,g){return this.offset=[I,g],this}},{key:"updateRange",value:function(I){return I?(this.range=[Math.min.apply(Math,Object(b.a)(I)),Math.max.apply(Math,Object(b.a)(I))],this.data=this.rangeToData.apply(this,Object(b.a)(this.range))):this.range=null,this}},{key:"drawBrush",value:function(){var I=this,g=arguments.length>0&&void 0!==arguments[0]&&arguments[0],C=Object(r.a)(this.offset,2),A=C[0],i=C[1],e=this.size,l=function(I){return Math.abs(I.end-I.start)};return this.brushSelection.data(this.data).attr("transform",(function(I){return"translate(".concat(A+I.start,", ").concat(i+1,")")})).attr("width",(function(I){return"".concat(l(I),"px")})).attr("height","".concat(e-2,"px")).attr("fill",this.style.color).attr("stroke",this.style.stroke).attr("stroke-width","".concat(this.style.strokeWidth,"px")).attr("fill-opacity",(function(g){return"body"===g.type?I.style.opacity:0})).attr("stroke-opacity",(function(g){return"body"===g.type?I.style.strokeOpacity:0})).attr("cursor",(function(I){return I.cursor})),this.onBrush(this.getRange(),g),this}},{key:"enable",value:function(){return this.brushSelection.attr("pointer-events","all"),this}},{key:"disable",value:function(){return this.brushSelection.attr("pointer-events","none"),this}},{key:"visible",value:function(){return this.brushSelection.attr("visibility","visible"),this}},{key:"hidden",value:function(){return this.brushSelection.attr("visibility","hidden"),this}},{key:"clear",value:function(){return this.updateRange(null).drawBrush().hidden().disable(),this}},{key:"remove",value:function(){return this.brushSelection.remove(),this}},{key:"rangeToData",value:function(I,g){return[{type:"body",cursor:"grab",start:I,end:g},{type:"start",cursor:"ew-resize",start:I-3,end:I},{type:"end",cursor:"ew-resize",start:g,end:g+3}]}},{key:"onDrag",value:function(){var I=this;return this.externals.d3Drag.drag().on("start",(function(){I.startEvent=I.externals.d3Selection.event.sourceEvent,I.prevExtent=I.range})).on("drag",(function(g){var C,A=I.externals.d3Selection.event.sourceEvent.layerX-I.startEvent.layerX,i=null!=(C=I.prevExtent)?C:[0,0],e=Object(r.a)(i,2),l=e[0],o=e[1];"body"===g.type?(l+=A,o+=A):"start"===g.type?l+=A:"end"===g.type&&(o+=A),I.updateRange([l,o]).drawBrush()}))}}]),I}();function vZ(I){var g,C;return"bam"===(null==(g=I.data)?void 0:g.type)||"vcf"===(null==(C=I.data)?void 0:C.type)}var kZ={stroke:"black",strokeWidth:1,strokeOpacity:1,color:"none",opacity:1,arrange:"front"};function DZ(I){if(!(this instanceof DZ?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');for(var g=I.services.tileProxy,C=function(C){Object(a.a)(o,C);var A=Object(Z.a)(o);function o(g){var C,i,e,l,c,d,s,a,Z;Object(t.a)(this,o);var b=Object(r.a)(g,2),h=b[0],G=b[1];if(vZ(G.spec))try{"bam"===(null==(i=G.spec.data)?void 0:i.type)?h.dataFetcher=new fZ(I,h.dataConfig):"vcf"===(null==(e=G.spec.data)?void 0:e.type)&&(h.dataFetcher=new SZ(I,h.dataConfig))}catch(im){console.warn("Error loading tabular data-fetcher",im)}C=A.call(this,h,G),h.dataFetcher.track=Object(n.a)(C),C.context=h,C.viewUid=h.viewUid,"overlay"in C.options.spec?C.options.spec.overlay=C.options.spec.overlay.map((function(I){return Object(m.a)(Object(m.a)({},I),{},{_renderingId:Ag()})})):C.options.spec._renderingId=Ag(),C.tileSize=null!=(c=null==(l=C.tilesetInfo)?void 0:l.tile_size)?c:1024,C.drawnAtScale=I.libraries.d3Scale.scaleLinear(),C.scalableGraphics={};var u=AZ(C.options.spec),y=u.valid,B=u.errorMessages;y||console.warn("The specification of the following track is invalid",B,C.options.spec),C.extent={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER},C.pMouseHover=new I.libraries.PIXI.Graphics,C.pMouseSelection=new I.libraries.PIXI.Graphics,C.pMain.addChild(C.pMouseHover),C.pMain.addChild(C.pMouseSelection),C.gLegend=I.libraries.d3Selection.select(C.context.svgElement).append("g"),C.isRangeBrushActivated=!1,C.pMask.interactive=!0,C.gBrush=I.libraries.d3Selection.select(C.context.svgElement).append("g"),C.mRangeBrush=new NZ(C.gBrush,I.libraries,C.onRangeBrush.bind(Object(n.a)(C)),null==(d=C.options.spec.style)?void 0:d.brush),C.pMask.mousedown=function(I){return C.onMouseDown(I.data.getLocalPosition(C.pMain).x,I.data.getLocalPosition(C.pMain).y,I.data.originalEvent.altKey)},C.pMask.mouseup=function(I){return C.onMouseUp(I.data.getLocalPosition(C.pMain).x,I.data.getLocalPosition(C.pMain).y)},C.pMask.mousemove=function(I){return C.onMouseMove(I.data.getLocalPosition(C.pMain).x)},C.pMask.mouseout=function(){return C.onMouseOut()},C.flipText="vertical"===C.options.spec.orientation,C.hideMousePosition&&(C.hideMousePosition(),C.hideMousePosition=void 0),(null==(s=C.options)?void 0:s.showMousePosition)&&!C.hideMousePosition&&(C.hideMousePosition=I.utils.showMousePosition(Object(n.a)(C),NI(HI(C.options.spec)[0]),C.isShowGlobalMousePosition())),C.pLabel.removeChild(C.trackNotFoundText);var V=GI({color:"black",size:12});return C.loadingTextStyleObj=new I.libraries.PIXI.TextStyle(V),C.loadingTextBg=new I.libraries.PIXI.Graphics,C.loadingText=new I.libraries.PIXI.Text("",V),C.loadingText.anchor.x=1,C.loadingText.anchor.y=1,C.pLabel.addChild(C.loadingTextBg),C.pLabel.addChild(C.loadingText),C.svgData=[],C.textGraphics=[],C.textsBeingUsed=0,C.loadingStatus={loading:0,processing:0,rendering:0},I.libraries.PIXI.GRAPHICS_CURVES.adaptive=null!=(Z=null==(a=C.options.spec.style)?void 0:a.enableSmoothPath)&&Z,I.libraries.PIXI.GRAPHICS_CURVES.adaptive&&(I.libraries.PIXI.GRAPHICS_CURVES.maxLength=1,I.libraries.PIXI.GRAPHICS_CURVES.maxSegments=20480),C}return Object(c.a)(o,[{key:"draw",value:function(){var I,g,C=this;this.clearMouseEventData(),this.svgData=[],this.textsBeingUsed=0,null==(I=this.pMouseHover)||I.clear();var A=function(){C.preprocessAllTiles(),Object(d.a)(Object(s.a)(o.prototype),"draw",C).call(C),C.prevVisibleAndFetchedTiles=C.visibleAndFetchedTiles()};(this.dataFetcher instanceof fZ||this.dataFetcher instanceof SZ)&&!Object(J.a)(this.visibleAndFetchedTiles(),this.prevVisibleAndFetchedTiles)?this.updateTileAsync(this.dataFetcher,A):A(),null==(g=this.mRangeBrush)||g.drawBrush(!0)}},{key:"initTile",value:function(I){this.drawTile(I)}},{key:"updateTile",value:function(){}},{key:"renderTile",value:function(){}},{key:"drawTile",value:function(g){var C=this;g.drawnAtScale=this._xScale.copy(),g.goslingModels&&(g.graphics.clear(),g.graphics.removeChildren(),g.goslingModels.forEach((function(A){var i=C.dimensions[0],e=C._xScale.invert(i)-C._xScale.invert(0);A.trackVisibility({zoomLevel:e})&&(XI(I,C,g,A,C.options.theme),pI(I,C,g,A),WI(I,C,g,A,C.options.theme))})),this.forceDraw())}},{key:"rerender",value:function(I){this.options=I,"circular"===this.options.spec.layout&&this.mRangeBrush.remove(),this.clearMouseEventData(),this.svgData=[],this.textsBeingUsed=0,this.preprocessAllTiles(!0),this.draw(),this.forceDraw()}},{key:"clearMouseEventData",value:function(){this.visibleAndFetchedTiles().map((function(I){var g;return null!=(g=I.goslingModels)?g:[]})).flat().forEach((function(I){return I.getMouseEventModel().clear()}))}},{key:"remove",value:function(){Object(d.a)(Object(s.a)(o.prototype),"remove",this).call(this),this.gLegend&&(this.gLegend.remove(),this.gLegend=null),this.mRangeBrush.remove()}},{key:"setDimensions",value:function(I){this.oldDimensions=this.dimensions,Object(d.a)(Object(s.a)(o.prototype),"setDimensions",this).call(this,I),this.mRangeBrush.setSize(I[1])}},{key:"setPosition",value:function(I){var g;Object(d.a)(Object(s.a)(o.prototype),"setPosition",this).call(this,I);var C=Object(r.a)(this.position,2);this.pMain.position.x=C[0],this.pMain.position.y=C[1],(g=this.mRangeBrush).setOffset.apply(g,Object(b.a)(I))}},{key:"forceDraw",value:function(){this.animate()}},{key:"zoomed",value:function(I,g){var C=this.mRangeBrush.getRange();this.mRangeBrush.updateRange(C?[I(this._xScale.invert(C[0])),I(this._xScale.invert(C[1]))]:null),this.xScale(I),this.yScale(g),this.refreshTiles(),this.draw(),this.forceDraw()}},{key:"updateTileAsync",value:function(){var g=Object(e.a)(Object(i.a)().mark((function g(C,A){var e,l,o,t,c,n;return Object(i.a)().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return this.xDomain=this._xScale.domain(),this.xRange=this._xScale.range(),this.drawLoadingCue(),g.next=5,C.getTabularData(this.dataFetcher.uid,Object.values(this.fetchedTiles).map((function(I){return I.remoteId})));case 5:e=g.sent,this.drawLoadingCue(),(null==(l=this.visibleAndFetchedTiles())?void 0:l[0])&&((o=l[0]).tileData.tabularData=e,t=I.utils.trackUtils.calculate1DVisibleTiles(this.tilesetInfo,this._xScale),c=Object(r.a)(t,1),n=c[0],o.tileData.zoomLevel=n[0],o.tileData.tilePos=[n[1]]),this.drawLoadingCue(),A(),this.drawLoadingCue();case 12:case"end":return g.stop()}}),g,this)})));return function(I,C){return g.apply(this,arguments)}}()},{key:"scaleScalableGraphics",value:function(I,g,C){var A=(C.domain()[1]-C.domain()[0])/(g.domain()[1]-g.domain()[0]),i=g.domain().map(C)[0];I.forEach((function(I){I.scale.x=A,I.position.x=-i*A}))}},{key:"visibleAndFetchedIds",value:function(){var I=this;return Object.keys(this.fetchedTiles).filter((function(g){return I.visibleTileIds.has(g)}))}},{key:"visibleAndFetchedTiles",value:function(){var I=this;return this.visibleAndFetchedIds().map((function(g){return I.fetchedTiles[g]}))}},{key:"calculateVisibleTiles",value:function(){var C;if(vZ(this.options.spec)){var A,i=I.utils.trackUtils.calculate1DVisibleTiles(this.tilesetInfo,this._xScale),e=Object(l.a)(i);try{for(e.s();!(A=e.n()).done;){var o=A.value,t=this.getTilePosAndDimensions(o[0],[o[1],o[1]],this.tilesetInfo.tile_size).tileWidth,c="bam"===(null==(C=this.options.spec.data)?void 0:C.type)?2e4:Number.MAX_SAFE_INTEGER;if(t>(this.tilesetInfo.max_tile_width||c))return void this.forceDraw();this.forceDraw()}}catch(a){e.e(a)}finally{e.f()}this.setVisibleTiles(i)}else{if(!this.tilesetInfo)return;if(this.zoomLevel=this.calculateZoomLevel(),this.tilesetInfo.resolutions){var n=this.tilesetInfo.resolutions.map((function(I){return+I})).sort((function(I,g){return g-I}));this.xTiles=g.calculateTilesFromResolution(n[this.zoomLevel],this._xScale,this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0]),NI(HI(this.options.spec)[0])&&(this.yTiles=g.calculateTilesFromResolution(n[this.zoomLevel],this._yScale,this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0]));var d=this.tilesToId(this.xTiles,this.yTiles,this.zoomLevel);this.setVisibleTiles(d)}else{this.xTiles=g.calculateTiles(this.zoomLevel,this.relevantScale(),this.tilesetInfo.min_pos[0],this.tilesetInfo.max_pos[0],this.tilesetInfo.max_zoom,this.tilesetInfo.max_width),NI(HI(this.options.spec)[0])&&(this.yTiles=g.calculateTiles(this.zoomLevel,this._yScale,this.tilesetInfo.min_pos[1],this.tilesetInfo.max_pos[1],this.tilesetInfo.max_zoom,this.tilesetInfo.max_width1||this.tilesetInfo.max_width));var s=this.tilesToId(this.xTiles,this.yTiles,this.zoomLevel);this.setVisibleTiles(s)}}}},{key:"getTilePosAndDimensions",value:function(I,g,C){var A=C||this.tilesetInfo.bins_per_dimension||256;if(this.tilesetInfo.resolutions){var i=this.tilesetInfo.resolutions.map((function(I){return+I})).sort((function(I,g){return g-I}))[I],e=Object(r.a)(g,2),l=i*A;return{tileX:l*e[0],tileY:l*e[1],tileWidth:l,tileHeight:l}}var o=Object(r.a)(g,2),t=o[0],c=o[1],n=this.tilesetInfo.min_pos[0],d=this.tilesetInfo.min_pos[1],s=this.tilesetInfo.max_width/Math.pow(2,I),a=this.tilesetInfo.max_width/Math.pow(2,I);return{tileX:n+t*s,tileY:d+c*a,tileWidth:s,tileHeight:a}}},{key:"tilesToId",value:function(I,g,C){if(I&&!g)return I.map((function(I){return[C,I]}));var A=[];return I.forEach((function(I){return g.forEach((function(g){return A.push([C,I,g])}))})),A}},{key:"drawLoadingCue",value:function(){if(this.fetching.size){var g="Fetching... ".concat(Array.from(this.fetching).join(" "));this.loadingText.text=g,this.loadingText.x=this.position[0]+this.dimensions[0]-3,this.loadingText.y=this.position[1]+this.dimensions[1]-3;var C=I.libraries.PIXI.TextMetrics.measureText(g,this.loadingTextStyleObj),A=C.width,i=C.height;this.loadingTextBg.clear(),this.loadingTextBg.lineStyle(1,dI("grey"),1,.5),this.loadingTextBg.beginFill(dI("white"),.8),this.loadingTextBg.drawRect(this.position[0]+this.dimensions[0]-A-6-1,this.position[1]+this.dimensions[1]-i-6-1,A+6,i+6),this.loadingText.visible=!0,this.loadingTextBg.visible=!0}else this.loadingText.visible=!1,this.loadingTextBg.visible=!1}},{key:"reorganizeTileInfo",value:function(){var I,g,C=this.visibleAndFetchedTiles();this.tileSize=null!=(g=null==(I=this.tilesetInfo)?void 0:I.tile_size)?g:1024,C.forEach((function(I){I.gos={},Object.keys(I.tileData).filter((function(I){return!+I&&"0"!==I})).forEach((function(g){I.gos[g]=I.tileData[g]})),I.gos.raw=Array.from(I.tileData)}))}},{key:"updateScaleOffsetFromOriginalSpec",value:function(I,g,C){HI(this.options.spec).map((function(A){if(A._renderingId===I){var i=A[C];DI(i)&&(i.scaleOffset=g)}}))}},{key:"shareScaleOffsetAcrossTracksAndTiles",value:function(I,g){var C=[];this.visibleAndFetchedTiles().forEach((function(I){C.push.apply(C,Object(b.a)(I.goslingModels))})),C.forEach((function(C){var A=C.spec()[g];DI(A)&&(A.scaleOffset=I);var i=C.originalSpec()[g];DI(i)&&(i.scaleOffset=I)}))}},{key:"shouldCombineTiles",value:function(){var I,g,C,A,i,e;return(null==(I=this.options.spec.dataTransform)?void 0:I.find((function(I){return"displace"===I.type})))&&(null==(C=null==(g=this.visibleAndFetchedTiles())?void 0:g[0])?void 0:C.tileData)&&!(null==(i=null==(A=this.visibleAndFetchedTiles())?void 0:A[0])?void 0:i.tileData.dense)||"bam"===(null==(e=this.options.spec.data)?void 0:e.type)}},{key:"combineAllTilesIfNeeded",value:function(){var I,g,C;if(this.shouldCombineTiles()){var A=this.visibleAndFetchedTiles();if(A&&0!==A.length){this.tileSize=(null!=(g=null==(I=this.tilesetInfo)?void 0:I.tile_size)?g:1024)*A.length;var i=[];A.forEach((function(I,g){i=[].concat(Object(b.a)(i),Object(b.a)(I.tileData)),I.mergedToAnotherTile=0!==g})),A[0].gos.raw=i,(null==(C=A[0].gos.raw[0])?void 0:C.uid)&&(A[0].gos.raw=Object(S.a)(A[0].gos.raw,"uid"))}}}},{key:"preprocessAllTiles",value:function(){var I,g=this,C=arguments.length>0&&void 0!==arguments[0]&&arguments[0],A=[];this.reorganizeTileInfo(),this.combineAllTilesIfNeeded(),this.visibleAndFetchedTiles().forEach((function(I){C&&(I.goslingModels=[]);var i=g.preprocessTile(I);null==i||i.forEach((function(I){A.push(I)}))})),tZ(A);var i=(I=[]).concat.apply(I,Object(b.a)(A.map((function(I){return I.data()}))));0!==i.length&&pZ("rawData",{id:this.viewUid,data:i})}},{key:"preprocessTile",value:function(I){var g=this;if(I.mergedToAnotherTile)I.goslingModels=[];else{if(I.goslingModels&&0!==I.goslingModels.length)return I.goslingModels;if(I.gos.tilePos){I.goslingModels=[];var C=JSON.parse(JSON.stringify(this.options.spec)),A=Object(r.a)(this.dimensions,2),i=A[0],e=A[1];return HI(C).forEach((function(C){var A;if("brush"!==C.mark){if(!I.gos.tabularData){var l=g.getTilePosAndDimensions(I.gos.zoomLevel,I.gos.tilePos,g.tilesetInfo.bins_per_dimension||(null==(A=g.tilesetInfo)?void 0:A.tile_size)),o=l.tileX,t=l.tileY,c=l.tileWidth,n=l.tileHeight;I.gos.tabularData=VZ(C,Object(m.a)(Object(m.a)({},I.gos),{},{tileX:o,tileY:t,tileWidth:c,tileHeight:n,tileSize:g.tileSize}))}I.gos.tabularDataFiltered=Array.from(I.gos.tabularData),C.dataTransform&&C.dataTransform.forEach((function(A){switch(A.type){case"filter":I.gos.tabularDataFiltered=qg(A,I.gos.tabularDataFiltered);break;case"concat":I.gos.tabularDataFiltered=IC(A,I.gos.tabularDataFiltered);break;case"replace":I.gos.tabularDataFiltered=gC(A,I.gos.tabularDataFiltered);break;case"log":I.gos.tabularDataFiltered=CC(A,I.gos.tabularDataFiltered);break;case"exonSplit":I.gos.tabularDataFiltered=oC(A,I.gos.tabularDataFiltered,C.assembly);break;case"genomicLength":I.gos.tabularDataFiltered=AC(A,I.gos.tabularDataFiltered);break;case"svType":I.gos.tabularDataFiltered=iC(A,I.gos.tabularDataFiltered);break;case"coverage":I.gos.tabularDataFiltered=eC(A,I.gos.tabularDataFiltered,g._xScale.copy());break;case"subjson":I.gos.tabularDataFiltered=tC(A,I.gos.tabularDataFiltered);break;case"displace":I.gos.tabularDataFiltered=lC(A,I.gos.tabularDataFiltered,g._xScale.copy())}}));try{if(AI.a){var d=I.gos.tabularDataFiltered.length;AI.a.publish("data-preview",{id:g.viewUid,dataConfig:JSON.stringify({data:C.data}),data:100>d?I.gos.tabularDataFiltered:Object(w.a)(I.gos.tabularDataFiltered,100)})}}catch(im){}var s=TI(C)?sZ:0,a=i,Z=e+s,b=Math.min(a,Z)/Math.min(C.width,C.height);C.innerRadius&&(C.innerRadius=C.innerRadius*b),C.outerRadius&&(C.outerRadius=C.outerRadius*b),C.width=a,C.height=Z;var r=new BZ(C,I.gos.tabularDataFiltered,g.options.theme);I.goslingModels.push(r)}})),I.goslingModels}}}},{key:"getIndicesOfVisibleDataInTile",value:function(g){var C,A,i,e=this._xScale.range();if(!this.tilesetInfo)return[null,null];var l=this.getTilePosAndDimensions(g.gos.zoomLevel,g.gos.tilePos,this.tilesetInfo.bins_per_dimension||(null==(C=this.tilesetInfo)?void 0:C.tile_size)),o=l.tileX,t=l.tileWidth,c=I.libraries.d3Scale.scaleLinear().domain([0,(null==(A=this.tilesetInfo)?void 0:A.tile_size)||(null==(i=this.tilesetInfo)?void 0:i.bins_per_dimension)]).range([o,o+t]);return[Math.max(0,Math.round(c.invert(this._xScale.invert(e[0])))),Math.min(g.gos.dense.length,Math.round(c.invert(this._xScale.invert(e[1]))))]}},{key:"minVisibleValue",value:function(){}},{key:"maxVisibleValue",value:function(){}},{key:"exportSVG",value:function(){}},{key:"getElementsWithinMouse",value:function(I,g){var C,A=this.visibleAndFetchedTiles().map((function(I){var g;return null!=(g=I.goslingModels)?g:[]})).flat(),i=null==(C=this.options.spec.experimental)?void 0:C.mouseEvents,e=QI(i)&&i.enableMouseOverOnMultipleMarks,l=QI(i)&&i.groupMarksByField,o=A.map((function(C){return C.getMouseEventModel().findAll(I,g,!0)})).flat();if(e||o.splice(1,o.length-1),0!==o.length&&l){var t=Array.from(o);A.forEach((function(I){var g=I.getMouseEventModel().getSiblings(t,l);o.push.apply(o,Object(b.a)(g))}))}return o}},{key:"highlightMarks",value:function(I,g,C){I.lineStyle(C.strokeWidth,dI(C.stroke),C.strokeOpacity,.5),I.beginFill(dI(C.color),"none"===C.color?0:C.opacity),g.forEach((function(g){if("point"===g.type){var C=Object(r.a)(g.polygon,3),A=C[0],i=C[1],e=C[2],l=void 0===e?3:e;I.drawCircle(A,i,l)}else"line"===g.type?(I.moveTo(g.polygon[0],g.polygon[1]),dZ(g.polygon).map((function(g){return I.lineTo(g[0],g[1])}))):I.drawPolygon(g.polygon)}))}},{key:"onRangeBrush",value:function(I){var g,C,A,i,e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.pMouseSelection.clear(),null!==I){var l=Object(r.a)(I,2),o=l[0],t=l[1],c=this.visibleAndFetchedTiles().map((function(I){var g;return null!=(g=I.goslingModels)?g:[]})).flat(),n=c.map((function(I){return I.getMouseEventModel().findAllWithinRange(o,t,!0)})).flat(),d=null==(g=this.options.spec.experimental)?void 0:g.mouseEvents,s=QI(d)&&d.groupMarksByField;if(0!==n.length&&s&&c.forEach((function(I){var g=I.getMouseEventModel().getSiblings(n,s),C=Array.from(new Set(g.map((function(I){return I.value[s]}))));n=n.filter((function(I){return-1===C.indexOf(I.value[s])}))})),0!==n.length){var a=this.pMouseSelection;"behind"!==(null==(A=null==(C=this.options.spec.style)?void 0:C.select)?void 0:A.arrange)&&(this.pMain.removeChild(a),this.pMain.addChild(a)),this.highlightMarks(a,n,Object.assign({},kZ,null==(i=this.options.spec.style)?void 0:i.select))}if(!e){var Z=[Tg(Math.floor(this._xScale.invert(o))),Tg(Math.floor(this._xScale.invert(t)))];pZ("rangeSelect",{id:this.viewUid,genomicRange:Z,data:n.map((function(I){return I.value}))})}this.forceDraw()}else e||pZ("rangeSelect",{id:this.viewUid,genomicRange:null,data:[]})}},{key:"onMouseDown",value:function(I,g,C){var A;this.mouseDownX=I,this.mouseDownY=g;var i=null==(A=this.options.spec.experimental)?void 0:A.mouseEvents,e=!!i||QI(i)&&!!i.rangeSelect;this.isRangeBrushActivated=e&&C,this.pMouseHover.clear()}},{key:"onMouseMove",value:function(I){"circular"!==this.options.spec.layout&&this.isRangeBrushActivated&&this.mRangeBrush.updateRange([I,this.mouseDownX]).drawBrush().visible().disable()}},{key:"onMouseUp",value:function(I,g){var C,A=null==(C=this.options.spec.experimental)?void 0:C.mouseEvents,i=!!A||QI(A)&&!!A.click,e=Math.sqrt(Math.pow(this.mouseDownX-I,2)+Math.pow(this.mouseDownY-g,2))>1;if(this.isRangeBrushActivated||e?this.mRangeBrush.enable():(this.mRangeBrush.clear(),this.pMouseSelection.clear()),this.isRangeBrushActivated=!1,this.tilesetInfo&&!e&&i){var l=Tg(Math.floor(this._xScale.invert(I))),o=this.getElementsWithinMouse(I,g);0!==o.length&&pZ("click",{id:this.viewUid,genomicPosition:l,data:o.map((function(I){return I.value}))})}}},{key:"onMouseOut",value:function(){this.isRangeBrushActivated=!1,document.body.style.cursor="default",this.pMouseHover.clear()}},{key:"getMouseOverHtml",value:function(g,C){var A,i,e,l,o;if(!this.isRangeBrushActivated&&this.tilesetInfo){this.pMouseHover.clear();var t=Tg(Math.floor(this._xScale.invert(g))),c=this.getElementsWithinMouse(g,C);if(0!==c.length?document.body.style.cursor="pointer":document.body.style.cursor="default",0!==c.length){var n=null==(A=this.options.spec.experimental)?void 0:A.mouseEvents;if(!!n||QI(n)&&!!n.mouseOver){var d=this.pMouseHover;"behind"!==(null==(e=null==(i=this.options.spec.style)?void 0:i.mouseOver)?void 0:e.arrange)&&(this.pMain.removeChild(d),this.pMain.addChild(d)),this.highlightMarks(d,c,Object.assign({},kZ,null==(l=this.options.spec.style)?void 0:l.mouseOver)),pZ("mouseOver",{id:this.viewUid,genomicPosition:t,data:c.map((function(I){return I.value}))})}var s=null==(o=this.visibleAndFetchedTiles().map((function(I){var g;return null!=(g=I.goslingModels)?g:[]})).flat().find((function(I){var g;return I.spec().tooltip&&0!==(null==(g=I.spec().tooltip)?void 0:g.length)})))?void 0:o.spec().tooltip;if(s){var a=s.map((function(g){var C,A=c[0].value[g.field],i=A;if("quantitative"===g.type&&g.format)i=I.libraries.d3Format.format(g.format)(+A);else if("genomic"===g.type){var e=Tg(+A),l=e.chromosome,o=e.position;i="".concat(l,":").concat(I.libraries.d3Format.format(",")(o))}return"<tr><td style='padding: 4px 8px'>".concat(null!=(C=g.alt)?C:g.field,"</td><td style='padding: 4px 8px'><b>").concat(i,"</b></td></tr>")})).join("");return a="<table style='text-align: left; margin-top: 12px'>".concat(a,"</table>"),c.length>1&&(a+="<div style='padding: 4px 8px; margin-top: 4px; text-align: center; color: grey'>".concat(c.length-1," Additional Selections...</div>")),"<div>".concat(a,"</div>")}}}}}]),o}(I.tracks.BarTrack),A=arguments.length,o=new Array(A>1?A-1:0),h=1;h<A;h++)o[h-1]=arguments[h];return new C(o)}DZ.config={type:"gosling-track",datatype:["multivec","epilogos"],rotatable:!0,local:!1,orientation:"1d-horizontal",thumbnail:(new DOMParser).parseFromString('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 400" width={30} height={30}>\n    <rect style={{ fill: \'none\' }} width="400" height="400" />\n    <circle cx="110.62" cy="129.64" r="41.69" />\n    <circle style={{ fill: \'#fff\' }} cx="124.14" cy="114.12" r="10.76" />\n    <circle cx="288.56" cy="129.64" r="41.69" />\n    <circle style={{ fill: \'#fff\' }} cx="302.07" cy="114.12" r="10.76" />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M313.1,241.64l8.61-22.09a430.11,430.11,0,0,0-88-15.87L224,225.63A384.54,384.54,0,0,1,313.1,241.64Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M208.63,260.53a299.77,299.77,0,0,1,90.56,16.79L308,254.79a371.68,371.68,0,0,0-90-15.47Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M174.4,225.56l-9-22a431.34,431.34,0,0,0-88,15.43l8.9,22A385.08,385.08,0,0,1,174.4,225.56Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M100.71,276.35a300.51,300.51,0,0,1,87.91-15.82L180,239.29a372.51,372.51,0,0,0-88.3,14.76Z"\n    />\n    <path\n        style={{ fill: \'#e18241\' }}\n        d="M106.52,290.71c27.53,13.92,59.05,21.34,92.05,21.34h0c33.68,0,65.83-7.72,93.75-22.2a291.31,291.31,0,0,0-186.33-.4Z"\n    />\n</svg>',"text/xml").documentElement,availableOptions:["labelPosition","labelColor","labelTextOpacity","labelBackgroundOpacity","trackBorderWidth","trackBorderColor","trackType","scaledHeight","backgroundColor","barBorder","sortLargestOnTop","theme","axisPositionHorizontal"],defaultOptions:{labelPosition:"none",labelColor:"black",labelTextOpacity:.4,trackBorderWidth:0,trackBorderColor:"black",backgroundColor:"white",barBorder:!1,sortLargestOnTop:!0,axisPositionHorizontal:"left",theme:"light"}};var zZ=!1;function MZ(I){var g=0,C=0;return I.forEach((function(I){var A=I.boundingBox.x+I.boundingBox.width,i=I.boundingBox.y+I.boundingBox.height;C<i&&(C=i),g<A&&(g=A)})),{width:g,height:C}}function UZ(I,g){var C,A,i=[];xZ(I,i);var e=MZ(i);if(I.title||I.subtitle){var l=(I.title?(null!=(C=g.root.titleFontSize)?C:18)+6:0)+(I.subtitle?(null!=(A=g.root.subtitleFontSize)?A:14)+6:0);e.height+=l+4,e.height=e.height+(8-e.height%8),i.forEach((function(I){I.boundingBox.y+=l+4})),i=[{track:PZ({width:e.width,height:l},I.title,I.subtitle),boundingBox:{x:0,y:0,width:e.width,height:l},layout:{x:0,y:0,w:12,h:l/e.height*12}}].concat(Object(b.a)(i))}else e.height=e.height+(8-e.height%8);var o=!("object"!==typeof I.responsiveSize?I.responsiveSize:I.responsiveSize.height);return i.forEach((function(I){I.layout.x=I.boundingBox.x/e.width*12,I.layout.w=I.boundingBox.width/e.width*12,I.layout.y=o?I.boundingBox.y:I.boundingBox.y/e.height*12,I.layout.h=o?I.boundingBox.height:I.boundingBox.height/e.height*12})),{trackInfos:i,size:e}}function xZ(I,g){var C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],e=0,l=0,o=!0,t=!1;rg(I,(function(I){t=!0,"circular"!==I.layout&&(o=!1)}));var c=!0;hg(I,(function(I){"vertical"!==I.arrangement&&"horizontal"!==I.arrangement||(c=!1)}));var n=i&&o&&t&&c&&("views"in I&&("parallel"===I.arrangement||"serial"===I.arrangement)||"tracks"in I),d=g.length;if("tracks"in I){var s=I.tracks;"vertical"===I.orientation?(l=Math.max.apply(Math,Object(b.a)(s.map((function(I){return I.height})))),s.forEach((function(i,o,t){1===TZ([i])&&(i.width+=sZ),i.height=l,g.push({track:i,boundingBox:{x:C+e,y:A,width:i.width,height:l},layout:{x:0,y:0,w:0,h:0}}),t[o+1]&&t[o+1].overlayOnPreviousTrack||(e+=i.width,o!==t.length-1&&(e+=void 0!==I.spacing?I.spacing:0))}))):(e=Math.max.apply(Math,Object(b.a)(s.map((function(I){return I.width})))),s.forEach((function(i,o,t){1===TZ([i])&&(i.height+=sZ),NI(HI(i)[0])&&1===QZ([i])&&(e+=sZ),i.width=e,g.push({track:i,boundingBox:{x:C,y:A+l,width:e,height:i.height},layout:{x:0,y:0,w:0,h:0}}),t[o+1]&&t[o+1].overlayOnPreviousTrack||(l+=i.height,o!==t.length-1&&(l+=void 0!==I.spacing?I.spacing:0))})))}else if("parallel"===I.arrangement||"vertical"===I.arrangement){var a=void 0!==I.spacing?I.spacing:nI;I.views.forEach((function(I,o,t){var c,d,s,Z,m,b=xZ(I,g,C+(null!=(c=I.xOffset)?c:0),A+(null!=(d=I.yOffset)?d:0)+l,!n&&i);e<(null!=(s=I.xOffset)?s:0)+b.width&&(e=(null!=(Z=I.xOffset)?Z:0)+b.width),o!==t.length-1&&(l+=a),l+=(null!=(m=I.yOffset)?m:0)+b.height}))}else"serial"!==I.arrangement&&"horizontal"!==I.arrangement||I.views.forEach((function(o,t,c){var d,s,a,Z,m,b=void 0!==I.spacing?I.spacing:nI,r=xZ(o,g,C+(null!=(d=o.xOffset)?d:0)+e,A+(null!=(s=o.yOffset)?s:0),!n&&i);l<(null!=(a=o.xOffset)?a:0)+r.height&&(l=(null!=(Z=o.xOffset)?Z:0)+r.height),t!==c.length-1&&(e+=b),e+=(null!=(m=o.xOffset)?m:0)+r.width}));if(n){var Z=g.slice(d),m="views"in I&&("parallel"===I.arrangement||"serial"===I.arrangement)&&I.views.length>1,r=void 0!==I.spacing?I.spacing:nI,h=0,G=void 0!==I.centerRadius?I.centerRadius:.3,u=e/2+h,y=u*(1-G);Z.forEach((function(I,g){var i,o;I.track.layout="circular",I.track.outerRadius=u-h-(I.boundingBox.y-A)/l*y,I.track.innerRadius=u-h-(I.boundingBox.y+I.boundingBox.height-A)/l*y;var t=r/e*360;I.track.startAngle=t+(I.boundingBox.x-C)/e*(e-r)/e*360,I.track.endAngle=(I.boundingBox.x+I.boundingBox.width-C)/e*(e-r)/e*360,I.boundingBox.x=C+(null!=(i=I.track.xOffset)?i:0),I.boundingBox.y=A+(null!=(o=I.track.yOffset)?o:0),I.boundingBox.height=I.track.height=I.boundingBox.width=I.track.width=2*u,0!==g&&(I.track.overlayOnPreviousTrack=!0),m&&FI(I.track)&&(I.track.overlay=I.track.overlay.filter((function(I){return"brush"!==I.mark})))})),l=2*u}return I._assignedWidth=e,I._assignedHeight=l,{x:C,y:A,width:e,height:l}}function TZ(I){return I.filter((function(I){return TI(I)})).length}function QZ(I){return I.filter((function(I){return function(I){if((SI(I)||FI(I))&&DI(I.y)&&I.y.axis&&"none"!==I.y.axis)return!0;if(FI(I)){var g=!1;return I.overlay.forEach((function(I){g||DI(I.y)&&I.y.axis&&"none"!==I.y.axis&&(g=!0)})),g}return!1}(I)})).length}var PZ=function(I,g,C){return JSON.parse(JSON.stringify({mark:"header",width:I.width,height:I.height,title:g,subtitle:C}))};function OZ(I,g,C,A,i){var e,l,o,t,c,n,d,s,a,Z,r,h,G,u,y=HI(g)[0];y.id||(y.id=sg());var B,V,p=y.assembly;if(JI(y.data)){var X,W;if(kI(y.data)){var H=(V=y.data.url).includes("tileset_info/?d=")&&(V.includes("https:")||V.includes("http:"))?{server:V.split("tileset_info/?d=")[0],tilesetUid:V.split("tileset_info/?d=")[1]}:{server:void 0,tilesetUid:void 0};X=H.server,W=H.tilesetUid}var Y=iZ(y),R=eZ(y),f=("x"===R||"xe"===R)&&DI(Y)?Y.domain:void 0,K=NI(y)&&DI(y.y)?y.y.domain:void 0,w=C.width-("circular"!==y.layout&&"vertical"===y.orientation&&TI(y)?sZ:0),J=C.height-("circular"!==y.layout&&"horizontal"===y.orientation&&TI(y)?sZ:0),S={uid:"".concat(y.id,"-track"),type:NI(y)?"gosling-2d-track":"gosling-track",server:X,tilesetUid:W,width:w,height:J,options:{showMousePosition:"circular"!==y.layout&&i.root.showMousePosition,mousePositionColor:i.root.mousePositionColor,name:"linear"===y.layout?y.title:" ",labelPosition:y.title?"left"===i.track.titleAlign?"topLeft":"topRight":"none",labelShowResolution:!1,labelColor:i.track.titleColor,labelBackgroundColor:i.track.titleBackground,labelBackgroundOpacity:.5,labelTextOpacity:1,labelLeftMargin:1,labelTopMargin:1,labelRightMargin:0,labelBottomMargin:0,backgroundColor:"transparent",spec:Object(m.a)({},g),theme:i}};if(y.data&&JI(y.data)){var F=y.data.type;"csv"===F||"json"===F||"bigwig"===F||"bam"===F||"vcf"===F?S.data=Object(m.a)(Object(m.a)({},y.data),{},{assembly:p}):"experimentalPlugin"===F&&(S.data=Object(m.a)(Object(m.a)({},y.data.options),{},{type:y.data.name,assembly:p}))}if(NI(B=y)&&"matrix"===B.data.type&&("bar"===B.mark||"rect"===B.mark)&&B.xe&&B.ye){S.type="heatmap";var N=DI(y.color)&&"string"===typeof y.color.range?y.color.range:"viridis";S.options.colorRange=function(){var I,g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,C=null!=(I=fI[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"viridis"])?I:fI.viridis;return Object(b.a)(Array(g)).map((function(I,A){return C(1/g*A)}))}(N),S.options.trackBorderWidth=null!=(l=null==(e=y.style)?void 0:e.outlineWidth)?l:i.track.outlineWidth,S.options.trackBorderColor=null!=(t=null==(o=y.style)?void 0:o.outline)?t:i.track.outline,S.options.extent=null!=(n=null==(c=y.style)?void 0:c.matrixExtent)?n:"full",S.options.colorbarPosition=(null==(d=y.color)?void 0:d.legend)?"lower-left"===S.options.extent?"bottomLeft":"topRight":"hidden"}y.overlayOnPreviousTrack?I.setViewOrientation(y.orientation).addTrackToCombined(S):I.setViewOrientation(y.orientation).setAssembly(p).addDefaultView(y.id,p).setDomain(f,null!=K?K:f).adjustDomain(y.orientation,w,J).setMainTrack(S).addTrackSourceServers(X).setZoomFixed(!0===y.static).setZoomLimits(null!=(s=y.zoomLimits)?s:[1,null]).setLayout(A);["x","y"].forEach((function(A){var e=y[A];if(DI(e)&&"axis"in e&&e.axis&&"none"!==e.axis&&"genomic"===e.type){var l=function(I){var g=arguments.length>2?arguments[2]:void 0,C=arguments.length>3?arguments[3]:void 0,A=400,i=200;return"horizontal"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"horizontal")?"x"===I&&g<=i||"y"===I&&C<=i?"narrower":"x"===I&&g<=A||"y"===I&&C<=A?"narrow":"regular":"x"===I&&C<=i||"y"===I&&g<=i?"narrower":"x"===I&&C<=A||"y"===I&&g<=A?"narrow":"regular"}(A,g.orientation,C.width,C.height);I.setAxisTrack(e.axis,l,{id:"".concat(y.id,"-").concat(e.axis,"-axis"),layout:y.layout,innerRadius:"top"===e.axis?y.outerRadius-sZ:y.innerRadius,outerRadius:"top"===e.axis?y.outerRadius:y.innerRadius+sZ,width:y.width,height:y.height,startAngle:y.startAngle,endAngle:y.endAngle,theme:i})}})),I.validateSpec(!0)}else"header"===y.mark&&(I.addDefaultView("".concat(y.id,"-title")).setLayout(A),"string"===typeof y.title&&I.setTextTrack(C.width,(null!=(a=i.root.titleFontSize)?a:18)+6,y.title,i.root.titleColor,null!=(Z=i.root.titleFontSize)?Z:18,i.root.titleFontWeight,i.root.titleAlign,i.root.titleBackgroundColor,null!=(r=i.root.titleFontFamily)?r:hI.fontFamily),"string"===typeof y.subtitle&&I.setTextTrack(C.width,(null!=(h=i.root.subtitleFontSize)?h:14)+6,y.subtitle,i.root.subtitleColor,null!=(G=i.root.subtitleFontSize)?G:14,i.root.subtitleFontWeight,i.root.subtitleAlign,i.root.subtitleBackgroundColor,null!=(u=i.root.subtitleFontFamily)?u:hI.fontFamily));return I}function jZ(I,g,C,A){if(0!==g.length){var i=new aZ;g.forEach((function(I){var g=I.track,C=I.boundingBox,e=I.layout;OZ(i,g,C,e,A)}));var e=function(I){var g=[];return I.spec().views.forEach((function(I){var C,A,i,e,l,o,t,c,n,d,s,a,Z,m,b,r=I.uid,h=null==(l=null==(e=null==(i=null==(A=null==(C=I.tracks.center)?void 0:C[0])?void 0:A.contents)?void 0:i[0])?void 0:e.options)?void 0:l.spec;h||(h=null==(d=null==(n=null==(c=null==(t=null==(o=I.tracks.left)?void 0:o[0])?void 0:t.contents)?void 0:c[0])?void 0:n.options)?void 0:d.spec)||(h=null==(b=null==(m=null==(Z=null==(a=null==(s=I.tracks.left)?void 0:s[1])?void 0:a.contents)?void 0:Z[0])?void 0:m.options)?void 0:b.spec),r&&h&&HI(h).forEach((function(I){VI.forEach((function(C){var A,i,e,l,o=I[C];DI(o)&&"linkingId"in o&&o.linkingId&&g.push({layout:"circular"===I.layout?"circular":"linear",viewId:r,linkId:o.linkingId,isBrush:"brush"===I.mark,style:{color:null==(A=I.color)?void 0:A.value,stroke:null==(i=I.stroke)?void 0:i.value,strokeWidth:null==(e=I.strokeWidth)?void 0:e.value,opacity:null==(l=I.opacity)?void 0:l.value,startAngle:I.startAngle,endAngle:I.endAngle,innerRadius:I.innerRadius,outerRadius:I.outerRadius}})}))}))})),g}(i);e.filter((function(I){return I.isBrush})).forEach((function(I){var g;i.addBrush(I.layout,I.viewId,A,null==(g=e.find((function(g){return!g.isBrush&&g.linkId===I.linkId})))?void 0:g.viewId,I.style)})),e.filter((function(I){return!I.isBrush})).forEach((function(I){i.spec().zoomLocks.locksByViewUid[I.viewId]=I.linkId,i.spec().locationLocks.locksByViewUid[I.viewId]=I.linkId})),Array.from(new Set(e.map((function(I){return I.linkId})))).forEach((function(I){i.spec().zoomLocks.locksDict[I]={uid:I},i.spec().locationLocks.locksDict[I]={uid:I},e.filter((function(I){return!I.isBrush})).filter((function(g){return g.linkId===I})).forEach((function(g){i.spec().zoomLocks.locksDict[I][g.viewId]=[124625310.5,124625310.5,249250.621],i.spec().locationLocks.locksDict[I][g.viewId]=[124625310.5,124625310.5,249250.621]}))})),C(i.spec(),MZ(g),I)}}function LZ(I,g,C,A,i){if("undefined"===typeof I._assignedWidth||"undefined"===typeof I._assignedHeight)return console.warn("Responsive spec cannot be used when width and height of a view is not determined yet."),!1;var e=!1,l=I.responsiveSpec,o=I._assignedWidth*g,t=I._assignedHeight*C,c={width:o,height:t,aspectRatio:o/t},n={width:A,height:i,aspectRatio:A/i};return l&&l.forEach((function(g){var C=g.spec;if(function(I,g,C){if(0===I.length)return!1;var A=!0;return I.forEach((function(I){var i=I.measure,e=I.operation,l=I.threshold,o=I.target;A=A&&1===ZZ(("container"===o?C:g)[i],e,l)})),A}(g.selectivity,c,n)&&!e)return Object.keys(C).forEach((function(g){I[g]=C[g]})),delete I.responsiveSpec,void(e=!0)})),"views"in I&&I.views.forEach((function(I){e=LZ(I,g,C,A,i)||e})),e}function EZ(I,g,C,A,i){var e,l,o=JSON.parse(JSON.stringify(I));!function(I){bg(I,(function(I,g,C){var A,i,e;if(I.data&&kI(I.data)&&!("alignment"in I)&&"data"in(A=I)&&"overrideTemplate"in A&&A.overrideTemplate)switch(I.data.type){case"vector":case"bigwig":C[g]=Object.assign({data:{type:"vector",url:"",column:i=I.data.column,value:e=I.data.value},mark:"bar",x:{field:i,type:"genomic",axis:"top"},y:{field:e,type:"quantitative"},width:400,height:100},I);break;case"multivec":C[g]=Object.assign(function(I,g,C,A){return A&&A.length<10?{data:{type:"multivec",url:"",row:I,column:g,value:C,categories:A},mark:"bar",x:{field:g,type:"genomic",axis:"top"},y:{field:C,type:"quantitative"},row:{field:I,type:"nominal",legend:!0},color:{field:I,type:"nominal"},width:400,height:100}:{data:{type:"multivec",url:"",row:I,column:g,value:C,categories:A},mark:"rect",x:{field:g,type:"genomic",axis:"top"},row:{field:I,type:"nominal",legend:!0},color:{field:C,type:"quantitative"},width:400,height:100}}(I.data.row,I.data.column,I.data.value,I.data.categories),I)}}))}(o),function(I,g){bg(I,(function(I,C,A){var i,e;if("template"in I){var l=I.template,o=g.find((function(I){return I.name===l}));if(!o)return I._invalidTrack=!0,void console.warn("There is no track template named '".concat(l,"'"));var t=!0;if(o.channels.forEach((function(g){!g.required||I.encoding&&g.name in I.encoding||(t=!1,console.warn("A template spec ('".concat(l,"') does not contain a required channel, ").concat(g.name)))})),t){var c=JSON.parse(JSON.stringify(I));"encoding"in c&&delete c.encoding;var n=Object(m.a)(Object(m.a)({},c),{},{alignment:"overlay",tracks:[],width:null!=(i=I.width)?i:100,height:null!=(e=I.height)?e:100});o.mapping.forEach((function(g){var C={data:I.data,mark:g.mark},A=g.dataTransform;A&&A.map((function(g){var C=g.base;C&&I.encoding&&C in I.encoding&&"field"in I.encoding[C]&&(delete g.base,g.field=I.encoding[C].field)}));var i=I.encoding;i?Object.keys(g).filter((function(I){return"mark"!==I})).forEach((function(I){var A=JSON.parse(JSON.stringify(g[I]));if("base"in A){var e=A.base;if(e in i){var l=JSON.parse(JSON.stringify(i[e]));delete A.base;var o=Object.assign(A,JSON.parse(JSON.stringify(l)));C[I]=o}else delete A.base,C[I]=A}else C[I]=A})):Object.keys(g).filter((function(I){return"mark"!==I})).forEach((function(I){var A=JSON.parse(JSON.stringify(g[I]));"base"in A&&delete A.base,C[I]=A})),n.tracks.push(C)})),A[C]=n}else I._invalidTrack=!0}}))}(o,C),ug(o);var t=UZ(o,A),c=t.trackInfos,n=t.size,d="object"===typeof I.responsiveSize&&(null==(e=I.responsiveSize)?void 0:e.width)||I.responsiveSize,s="object"===typeof I.responsiveSize&&(null==(l=I.responsiveSize)?void 0:l.height)||I.responsiveSize;LZ(o,d&&i.containerSize?i.containerSize.width/n.width:1,s&&i.containerSize?i.containerSize.height/n.height:1,i.containerParentSize?i.containerParentSize.width:Number.MAX_SAFE_INTEGER,i.containerParentSize?i.containerParentSize.height:Number.MAX_SAFE_INTEGER)&&(ug(o),c=UZ(o,A).trackInfos),jZ(JSON.parse(JSON.stringify(o)),c,g,A)}zZ||(Object(T.a)({name:"GoslingTrack",track:DZ,config:DZ.config}),Object(T.a)({name:"Gosling2DTrack",track:DZ,config:Object(m.a)(Object(m.a)({},DZ.config),{},{type:"gosling-2d-track",orientation:"2d"})}),Object(T.a)({name:"AxisTrack",track:_g,config:_g.config}),Object(T.a)({name:"TextTrack",track:Q.a,config:Q.a.config}),Object(T.a)({name:"BrushTrack",track:$g,config:$g.config}),Object(T.a)({dataFetcher:nC,config:nC.config},{pluginType:"dataFetcher"}),Object(T.a)({dataFetcher:dC,config:dC.config},{pluginType:"dataFetcher"}),Object(T.a)({dataFetcher:Nd,config:Nd.config},{pluginType:"dataFetcher"}),zZ=!0);var _Z=Object(lI.forwardRef)((function(I,g){var C,A=Object(lI.useState)(null!=(C=I.id)?C:sg()),i=Object(r.a)(A,2),e=i[0],l=i[1];Object(lI.useEffect)((function(){var g;l(null!=(g=I.id)?g:sg())}),[I.id]);var o=I.viewConfig||{},t=Object(lI.useMemo)((function(){return oI.a.createElement(tI.HiGlassComponent,{ref:g,options:{pixelPreciseMarginPadding:false,containerPaddingX:0,containerPaddingY:0,viewMarginTop:0,viewMarginBottom:0,viewMarginLeft:0,viewMarginRight:0,viewPaddingTop:0,viewPaddingBottom:0,viewPaddingLeft:0,viewPaddingRight:0,sizeMode:"bounded",rangeSelectionOnAlt:!0},viewConfig:o})}),[o,false]),c=I.options||{},n=c.padding,d=void 0===n?60:n,s=c.margin,a=void 0===s?0:s,Z=c.border,m=void 0===Z?"none":Z,b=c.background,h=c.alt,G=void 0===h?"Gosling visualization":h;return oI.a.createElement(oI.a.Fragment,null,oI.a.createElement("div",{id:e,className:"gosling-component ".concat(I.className||""),style:{position:"relative",padding:d,margin:a,border:m,background:b,width:I.options.responsiveWidth?"calc(100% - ".concat(2*d,"px)"):I.size.width,height:I.options.responsiveHeight?"calc(100% - ".concat(2*d,"px)"):I.size.height,textAlign:"left"},"aria-label":G,role:"graphics-document","aria-roledescription":"visualization"},oI.a.createElement("div",{key:JSON.stringify(o),id:"higlass-wrapper",className:"higlass-wrapper",style:{position:"relative",display:"block",background:b,margin:0,padding:0,width:I.options.responsiveWidth?"100%":I.size.width,height:I.options.responsiveHeight?"100%":I.size.height}},t)))}));_Z.displayName="HiGlassComponentWrapper";var $Z={exports:{}};!function(I,g){"undefined"!==typeof window&&window,I.exports=function(){if("undefined"===typeof window)return null;var I="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),g=I.requestAnimationFrame||I.mozRequestAnimationFrame||I.webkitRequestAnimationFrame||function(g){return I.setTimeout(g,20)},C=I.cancelAnimationFrame||I.mozCancelAnimationFrame||I.webkitCancelAnimationFrame||function(g){I.clearTimeout(g)};function A(I,g){var C=Object.prototype.toString.call(I),A="[object Array]"===C||"[object NodeList]"===C||"[object HTMLCollection]"===C||"[object Object]"===C||"undefined"!==typeof jQuery&&I instanceof jQuery||"undefined"!==typeof Elements&&I instanceof Elements,i=0,e=I.length;if(A)for(;i<e;i++)g(I[i]);else g(I)}function i(I){if(!I.getBoundingClientRect)return{width:I.offsetWidth,height:I.offsetHeight};var g=I.getBoundingClientRect();return{width:Math.round(g.width),height:Math.round(g.height)}}function e(I,g){Object.keys(g).forEach((function(C){I.style[C]=g[C]}))}var l=function I(l,o){var t=0;function c(){var I,g,C=[];this.add=function(I){C.push(I)},this.call=function(A){for(I=0,g=C.length;I<g;I++)C[I].call(this,A)},this.remove=function(A){var i=[];for(I=0,g=C.length;I<g;I++)C[I]!==A&&i.push(C[I]);C=i},this.length=function(){return C.length}}function n(I,C){if(I)if(I.resizedAttached)I.resizedAttached.add(C);else{I.resizedAttached=new c,I.resizedAttached.add(C),I.resizeSensor=document.createElement("div"),I.resizeSensor.dir="ltr",I.resizeSensor.className="resize-sensor";var A={pointerEvents:"none",position:"absolute",left:"0px",top:"0px",right:"0px",bottom:"0px",overflow:"hidden",zIndex:"-1",visibility:"hidden",maxWidth:"100%"},l={position:"absolute",left:"0px",top:"0px",transition:"0s"};e(I.resizeSensor,A);var o=document.createElement("div");o.className="resize-sensor-expand",e(o,A);var n=document.createElement("div");e(n,l),o.appendChild(n);var d=document.createElement("div");d.className="resize-sensor-shrink",e(d,A);var s=document.createElement("div");e(s,l),e(s,{width:"200%",height:"200%"}),d.appendChild(s),I.resizeSensor.appendChild(o),I.resizeSensor.appendChild(d),I.appendChild(I.resizeSensor);var a=window.getComputedStyle(I),Z=a?a.getPropertyValue("position"):null;"absolute"!==Z&&"relative"!==Z&&"fixed"!==Z&&"sticky"!==Z&&(I.style.position="relative");var m=!1,b=0,r=i(I),h=0,G=0,u=!0;t=0;var y=function(){var g=I.offsetWidth,C=I.offsetHeight;n.style.width=g+10+"px",n.style.height=C+10+"px",o.scrollLeft=g+10,o.scrollTop=C+10,d.scrollLeft=g+10,d.scrollTop=C+10},B=function C(){if(u){if(0===I.offsetWidth&&0===I.offsetHeight)return void(t||(t=g((function(){t=0,C()}))));u=!1}y()};I.resizeSensor.resetSensor=B;var V=function(){b=0,m&&(h=r.width,G=r.height,I.resizedAttached&&I.resizedAttached.call(r))},p=function(){r=i(I),(m=r.width!==h||r.height!==G)&&!b&&(b=g(V)),B()},X=function(I,g,C){I.attachEvent?I.attachEvent("on"+g,C):I.addEventListener(g,C)};X(o,"scroll",p),X(d,"scroll",p),t=g((function(){t=0,B()}))}}A(l,(function(I){n(I,o)})),this.detach=function(g){t||(C(t),t=0),I.detach(l,g)},this.reset=function(){l.resizeSensor.resetSensor()}};if(l.reset=function(I){A(I,(function(I){I.resizeSensor.resetSensor()}))},l.detach=function(I,g){A(I,(function(I){I&&(I.resizedAttached&&"function"===typeof g&&(I.resizedAttached.remove(g),I.resizedAttached.length())||I.resizeSensor&&(I.contains(I.resizeSensor)&&I.removeChild(I.resizeSensor),delete I.resizeSensor,delete I.resizedAttached))}))},"undefined"!==typeof MutationObserver){var o=new MutationObserver((function(I){for(var g in I)if(I.hasOwnProperty(g))for(var C=I[g].addedNodes,A=0;A<C.length;A++)C[A].resizeSensor&&l.reset(C[A])}));document.addEventListener("DOMContentLoaded",(function(I){o.observe(document.body,{childList:!0,subtree:!0})}))}return l}()}($Z);var qZ=$Z.exports;function Im(I,g,A){var l=function(g){var C,i,e=null!=(C=null==g?void 0:g.resolution)?C:4,l=null!=(i=null==g?void 0:g.transparentBackground)&&i,o=I.pixiRenderer,t=h.RenderTexture.create({width:o.width/2,height:o.height/2,resolution:e});o.render(I.pixiStage,t);var c=o.plugins.extract.canvas(t),n=document.createElement("canvas");n.width=c.width,n.height=c.height;var d=n.getContext("2d");return l||(d.fillStyle=A.root.background,d.fillRect(0,0,n.width,n.height)),d.drawImage(c,0,0),{canvas:n,resolution:e,canvasWidth:c.width,canvasHeight:c.height}};return{subscribe:XZ,unsubscribe:WZ,zoomTo:function(g,C){var A,i,e,l,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e3;if(C.includes("chr")){var c=C.split(":")[0],n=null==(i=null==(A=Qg().interval)?void 0:A[c])?void 0:i[0];if(c&&void 0!==typeof n){var d=null!=(l=null==(e=C.split(":")[1])?void 0:e.split("-"))?l:[0,Qg().size[c]],s=Object(r.a)(d,2),a=s[0],Z=s[1],m=+a+n-o,b=+Z+n+o;I.api.zoomTo(g,m,b,m,b,t)}else console.warn("Chromosome name is not valid",c)}else console.warn("Genomic interval you entered is not in a correct form.")},zoomToExtent:function(g){var C=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,A=[0,Qg().total],i=A[0],e=A[1];I.api.zoomTo(g,i,e,i,e,C)},zoomToGene:function(g,C){var A=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e3;I.api.zoomToGene(g,C,A,i)},suggestGene:function(g,C,A){I.api.suggestGene(g,C,A)},getViewIds:function(){if(!g)return[];var I,C,A=[];return C=function(I){I.uid&&A.push(I.uid)},(I=g)&&I.views&&Array.isArray(I.views)&&I.views.forEach((function(I){I&&I.uid&&C(I)})),A},getCanvas:l,exportPng:function(I){l({resolution:4,transparentBackground:I}).canvas.toBlob((function(I){var g=document.createElement("a");document.body.append(g),g.download="gosling-visualization",g.href=URL.createObjectURL(I),g.click(),g.remove()}),"image/png")},exportPdf:function(){var I=Object(e.a)(Object(i.a)().mark((function I(g){var A,e,o,t,c,n;return Object(i.a)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return I.next=2,C.e(4).then(C.bind(null,354));case 2:A=I.sent,e=A.jsPDF,o=l({resolution:4,transparentBackground:g}),t=o.canvas,c=t.toDataURL("image/jpeg",1),(n=new e({orientation:t.width<t.height?"p":"l",unit:"pt",format:[t.width,t.height]})).addImage(c,"JPEG",0,0,t.width,t.height),n.save("gosling-visualization.pdf");case 9:case"end":return I.stop()}}),I)})));return function(g){return I.apply(this,arguments)}}()}}var gm={exports:{}};function Cm(I,g){return gm.exports.cloneDeepWith(I,(function(I){I&&"object"===typeof I&&g.forEach((function(g){delete I[g]}))}))}!function(I,g){(function(){var C,A="Expected a function",i="__lodash_hash_undefined__",e="__lodash_placeholder__",l=16,o=32,t=64,c=128,n=256,d=1/0,s=9007199254740991,a=NaN,Z=4294967295,m=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",l],["flip",512],["partial",o],["partialRight",t],["rearg",n]],b="[object Arguments]",r="[object Array]",h="[object Boolean]",G="[object Date]",u="[object Error]",y="[object Function]",B="[object GeneratorFunction]",V="[object Map]",p="[object Number]",X="[object Object]",W="[object Promise]",H="[object RegExp]",Y="[object Set]",R="[object String]",f="[object Symbol]",K="[object WeakMap]",w="[object ArrayBuffer]",J="[object DataView]",S="[object Float32Array]",F="[object Float64Array]",N="[object Int8Array]",v="[object Int16Array]",k="[object Int32Array]",D="[object Uint8Array]",z="[object Uint8ClampedArray]",M="[object Uint16Array]",U="[object Uint32Array]",x=/\b__p \+= '';/g,T=/\b(__p \+=) '' \+/g,Q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,P=/&(?:amp|lt|gt|quot|#39);/g,O=/[&<>"']/g,j=RegExp(P.source),L=RegExp(O.source),E=/<%-([\s\S]+?)%>/g,_=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,II=/^\w*$/,gI=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,CI=/[\\^$.*+?()[\]{}|]/g,AI=RegExp(CI.source),iI=/^\s+/,eI=/\s/,lI=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,oI=/\{\n\/\* \[wrapped with (.+)\] \*/,tI=/,? & /,cI=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,nI=/[()=,{}\[\]\/\s]/,dI=/\\(\\)?/g,sI=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,aI=/\w*$/,ZI=/^[-+]0x[0-9a-f]+$/i,mI=/^0b[01]+$/i,bI=/^\[object .+?Constructor\]$/,rI=/^0o[0-7]+$/i,hI=/^(?:0|[1-9]\d*)$/,GI=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,uI=/($^)/,yI=/['\n\r\u2028\u2029\\]/g,BI="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",VI="\\u2700-\\u27bf",pI="a-z\\xdf-\\xf6\\xf8-\\xff",XI="A-Z\\xc0-\\xd6\\xd8-\\xde",WI="\\ufe0e\\ufe0f",HI="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",YI="['\u2019]",RI="[\\ud800-\\udfff]",fI="["+HI+"]",KI="["+BI+"]",wI="\\d+",JI="[\\u2700-\\u27bf]",SI="["+pI+"]",FI="[^\\ud800-\\udfff"+HI+wI+VI+pI+XI+"]",NI="\\ud83c[\\udffb-\\udfff]",vI="[^\\ud800-\\udfff]",kI="(?:\\ud83c[\\udde6-\\uddff]){2}",DI="[\\ud800-\\udbff][\\udc00-\\udfff]",zI="["+XI+"]",MI="(?:"+SI+"|"+FI+")",UI="(?:"+zI+"|"+FI+")",xI="(?:['\u2019](?:d|ll|m|re|s|t|ve))?",TI="(?:['\u2019](?:D|LL|M|RE|S|T|VE))?",QI="(?:"+KI+"|"+NI+")"+"?",PI="[\\ufe0e\\ufe0f]?",OI=PI+QI+("(?:\\u200d(?:"+[vI,kI,DI].join("|")+")"+PI+QI+")*"),jI="(?:"+[JI,kI,DI].join("|")+")"+OI,LI="(?:"+[vI+KI+"?",KI,kI,DI,RI].join("|")+")",EI=RegExp(YI,"g"),_I=RegExp(KI,"g"),$I=RegExp(NI+"(?="+NI+")|"+LI+OI,"g"),qI=RegExp([zI+"?"+SI+"+"+xI+"(?="+[fI,zI,"$"].join("|")+")",UI+"+"+TI+"(?="+[fI,zI+MI,"$"].join("|")+")",zI+"?"+MI+"+"+xI,zI+"+"+TI,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",wI,jI].join("|"),"g"),Ig=RegExp("[\\u200d\\ud800-\\udfff"+BI+WI+"]"),gg=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Cg=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ag=-1,ig={};ig[S]=ig[F]=ig[N]=ig[v]=ig[k]=ig[D]=ig[z]=ig[M]=ig[U]=!0,ig[b]=ig[r]=ig[w]=ig[h]=ig[J]=ig[G]=ig[u]=ig[y]=ig[V]=ig[p]=ig[X]=ig[H]=ig[Y]=ig[R]=ig[K]=!1;var eg={};eg[b]=eg[r]=eg[w]=eg[J]=eg[h]=eg[G]=eg[S]=eg[F]=eg[N]=eg[v]=eg[k]=eg[V]=eg[p]=eg[X]=eg[H]=eg[Y]=eg[R]=eg[f]=eg[D]=eg[z]=eg[M]=eg[U]=!0,eg[u]=eg[y]=eg[K]=!1;var lg={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},og=parseFloat,tg=parseInt,cg="object"==typeof sC&&sC&&sC.Object===Object&&sC,ng="object"==typeof self&&self&&self.Object===Object&&self,dg=cg||ng||Function("return this")(),sg=g&&!g.nodeType&&g,ag=sg&&I&&!I.nodeType&&I,Zg=ag&&ag.exports===sg,mg=Zg&&cg.process,bg=function(){try{var I=ag&&ag.require&&ag.require("util").types;return I||mg&&mg.binding&&mg.binding("util")}catch(im){}}(),rg=bg&&bg.isArrayBuffer,hg=bg&&bg.isDate,Gg=bg&&bg.isMap,ug=bg&&bg.isRegExp,yg=bg&&bg.isSet,Bg=bg&&bg.isTypedArray;function Vg(I,g,C){switch(C.length){case 0:return I.call(g);case 1:return I.call(g,C[0]);case 2:return I.call(g,C[0],C[1]);case 3:return I.call(g,C[0],C[1],C[2])}return I.apply(g,C)}function pg(I,g,C,A){for(var i=-1,e=null==I?0:I.length;++i<e;){var l=I[i];g(A,l,C(l),I)}return A}function Xg(I,g){for(var C=-1,A=null==I?0:I.length;++C<A&&!1!==g(I[C],C,I););return I}function Wg(I,g){for(var C=null==I?0:I.length;C--&&!1!==g(I[C],C,I););return I}function Hg(I,g){for(var C=-1,A=null==I?0:I.length;++C<A;)if(!g(I[C],C,I))return!1;return!0}function Yg(I,g){for(var C=-1,A=null==I?0:I.length,i=0,e=[];++C<A;){var l=I[C];g(l,C,I)&&(e[i++]=l)}return e}function Rg(I,g){return!!(null==I?0:I.length)&&Dg(I,g,0)>-1}function fg(I,g,C){for(var A=-1,i=null==I?0:I.length;++A<i;)if(C(g,I[A]))return!0;return!1}function Kg(I,g){for(var C=-1,A=null==I?0:I.length,i=Array(A);++C<A;)i[C]=g(I[C],C,I);return i}function wg(I,g){for(var C=-1,A=g.length,i=I.length;++C<A;)I[i+C]=g[C];return I}function Jg(I,g,C,A){var i=-1,e=null==I?0:I.length;for(A&&e&&(C=I[++i]);++i<e;)C=g(C,I[i],i,I);return C}function Sg(I,g,C,A){var i=null==I?0:I.length;for(A&&i&&(C=I[--i]);i--;)C=g(C,I[i],i,I);return C}function Fg(I,g){for(var C=-1,A=null==I?0:I.length;++C<A;)if(g(I[C],C,I))return!0;return!1}var Ng=xg("length");function vg(I,g,C){var A;return C(I,(function(I,C,i){if(g(I,C,i))return A=C,!1})),A}function kg(I,g,C,A){for(var i=I.length,e=C+(A?1:-1);A?e--:++e<i;)if(g(I[e],e,I))return e;return-1}function Dg(I,g,C){return g===g?function(I,g,C){var A=C-1,i=I.length;for(;++A<i;)if(I[A]===g)return A;return-1}(I,g,C):kg(I,Mg,C)}function zg(I,g,C,A){for(var i=C-1,e=I.length;++i<e;)if(A(I[i],g))return i;return-1}function Mg(I){return I!==I}function Ug(I,g){var C=null==I?0:I.length;return C?Pg(I,g)/C:a}function xg(I){return function(g){return null==g?C:g[I]}}function Tg(I){return function(g){return null==I?C:I[g]}}function Qg(I,g,C,A,i){return i(I,(function(I,i,e){C=A?(A=!1,I):g(C,I,i,e)})),C}function Pg(I,g){for(var A,i=-1,e=I.length;++i<e;){var l=g(I[i]);l!==C&&(A=A===C?l:A+l)}return A}function Og(I,g){for(var C=-1,A=Array(I);++C<I;)A[C]=g(C);return A}function jg(I){return I?I.slice(0,dC(I)+1).replace(iI,""):I}function Lg(I){return function(g){return I(g)}}function Eg(I,g){return Kg(g,(function(g){return I[g]}))}function _g(I,g){return I.has(g)}function $g(I,g){for(var C=-1,A=I.length;++C<A&&Dg(g,I[C],0)>-1;);return C}function qg(I,g){for(var C=I.length;C--&&Dg(g,I[C],0)>-1;);return C}function IC(I,g){for(var C=I.length,A=0;C--;)I[C]===g&&++A;return A}var gC=Tg({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i","\u012b":"i","\u012d":"i","\u012f":"i","\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r","\u015a":"S","\u015c":"S","\u015e":"S","\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij","\u0152":"Oe","\u0153":"oe","\u0149":"'n","\u017f":"s"}),CC=Tg({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function AC(I){return"\\"+lg[I]}function iC(I){return Ig.test(I)}function eC(I){var g=-1,C=Array(I.size);return I.forEach((function(I,A){C[++g]=[A,I]})),C}function lC(I,g){return function(C){return I(g(C))}}function oC(I,g){for(var C=-1,A=I.length,i=0,l=[];++C<A;){var o=I[C];o!==g&&o!==e||(I[C]=e,l[i++]=C)}return l}function tC(I){var g=-1,C=Array(I.size);return I.forEach((function(I){C[++g]=I})),C}function cC(I){return iC(I)?function(I){var g=$I.lastIndex=0;for(;$I.test(I);)++g;return g}(I):Ng(I)}function nC(I){return iC(I)?function(I){return I.match($I)||[]}(I):function(I){return I.split("")}(I)}function dC(I){for(var g=I.length;g--&&eI.test(I.charAt(g)););return g}var aC=Tg({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var ZC=function I(g){var eI=(g=null==g?dg:ZC.defaults(dg.Object(),g,ZC.pick(dg,Cg))).Array,BI=g.Date,VI=g.Error,pI=g.Function,XI=g.Math,WI=g.Object,HI=g.RegExp,YI=g.String,RI=g.TypeError,fI=eI.prototype,KI=pI.prototype,wI=WI.prototype,JI=g["__core-js_shared__"],SI=KI.toString,FI=wI.hasOwnProperty,NI=0,vI=function(){var I=/[^.]+$/.exec(JI&&JI.keys&&JI.keys.IE_PROTO||"");return I?"Symbol(src)_1."+I:""}(),kI=wI.toString,DI=SI.call(WI),zI=dg._,MI=HI("^"+SI.call(FI).replace(CI,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),UI=Zg?g.Buffer:C,xI=g.Symbol,TI=g.Uint8Array,QI=UI?UI.allocUnsafe:C,PI=lC(WI.getPrototypeOf,WI),OI=WI.create,jI=wI.propertyIsEnumerable,LI=fI.splice,$I=xI?xI.isConcatSpreadable:C,Ig=xI?xI.iterator:C,lg=xI?xI.toStringTag:C,cg=function(){try{var I=ne(WI,"defineProperty");return I({},"",{}),I}catch(im){}}(),ng=g.clearTimeout!==dg.clearTimeout&&g.clearTimeout,sg=BI&&BI.now!==dg.Date.now&&BI.now,ag=g.setTimeout!==dg.setTimeout&&g.setTimeout,mg=XI.ceil,bg=XI.floor,Ng=WI.getOwnPropertySymbols,Tg=UI?UI.isBuffer:C,sC=g.isFinite,mC=fI.join,bC=lC(WI.keys,WI),rC=XI.max,hC=XI.min,GC=BI.now,uC=g.parseInt,yC=XI.random,BC=fI.reverse,VC=ne(g,"DataView"),pC=ne(g,"Map"),XC=ne(g,"Promise"),WC=ne(g,"Set"),HC=ne(g,"WeakMap"),YC=ne(WI,"create"),RC=HC&&new HC,fC={},KC=ve(VC),wC=ve(pC),JC=ve(XC),SC=ve(WC),FC=ve(HC),NC=xI?xI.prototype:C,vC=NC?NC.valueOf:C,kC=NC?NC.toString:C;function DC(I){if(Io(I)&&!xl(I)&&!(I instanceof xC)){if(I instanceof UC)return I;if(FI.call(I,"__wrapped__"))return ke(I)}return new UC(I)}var zC=function(){function I(){}return function(g){if(!ql(g))return{};if(OI)return OI(g);I.prototype=g;var A=new I;return I.prototype=C,A}}();function MC(){}function UC(I,g){this.__wrapped__=I,this.__actions__=[],this.__chain__=!!g,this.__index__=0,this.__values__=C}function xC(I){this.__wrapped__=I,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Z,this.__views__=[]}function TC(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}function QC(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}function PC(I){var g=-1,C=null==I?0:I.length;for(this.clear();++g<C;){var A=I[g];this.set(A[0],A[1])}}function OC(I){var g=-1,C=null==I?0:I.length;for(this.__data__=new PC;++g<C;)this.add(I[g])}function jC(I){var g=this.__data__=new QC(I);this.size=g.size}function LC(I,g){var C=xl(I),A=!C&&Ul(I),i=!C&&!A&&Ol(I),e=!C&&!A&&!i&&to(I),l=C||A||i||e,o=l?Og(I.length,YI):[],t=o.length;for(var c in I)!g&&!FI.call(I,c)||l&&("length"==c||i&&("offset"==c||"parent"==c)||e&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||re(c,t))||o.push(c);return o}function EC(I){var g=I.length;return g?I[OA(0,g-1)]:C}function _C(I,g){return Se(Yi(I),lA(g,0,I.length))}function $C(I){return Se(Yi(I))}function qC(I,g,A){(A!==C&&!Dl(I[g],A)||A===C&&!(g in I))&&iA(I,g,A)}function IA(I,g,A){var i=I[g];FI.call(I,g)&&Dl(i,A)&&(A!==C||g in I)||iA(I,g,A)}function gA(I,g){for(var C=I.length;C--;)if(Dl(I[C][0],g))return C;return-1}function CA(I,g,C,A){return dA(I,(function(I,i,e){g(A,I,C(I),e)})),A}function AA(I,g){return I&&Ri(g,Ko(g),I)}function iA(I,g,C){"__proto__"==g&&cg?cg(I,g,{configurable:!0,enumerable:!0,value:C,writable:!0}):I[g]=C}function eA(I,g){for(var A=-1,i=g.length,e=eI(i),l=null==I;++A<i;)e[A]=l?C:Wo(I,g[A]);return e}function lA(I,g,A){return I===I&&(A!==C&&(I=I<=A?I:A),g!==C&&(I=I>=g?I:g)),I}function oA(I,g,A,i,e,l){var o,t=1&g,c=2&g,n=4&g;if(A&&(o=e?A(I,i,e,l):A(I)),o!==C)return o;if(!ql(I))return I;var d=xl(I);if(d){if(o=function(I){var g=I.length,C=new I.constructor(g);g&&"string"==typeof I[0]&&FI.call(I,"index")&&(C.index=I.index,C.input=I.input);return C}(I),!t)return Yi(I,o)}else{var s=ae(I),a=s==y||s==B;if(Ol(I))return Bi(I,t);if(s==X||s==b||a&&!e){if(o=c||a?{}:me(I),!t)return c?function(I,g){return Ri(I,se(I),g)}(I,function(I,g){return I&&Ri(g,wo(g),I)}(o,I)):function(I,g){return Ri(I,de(I),g)}(I,AA(o,I))}else{if(!eg[s])return e?I:{};o=function(I,g,C){var A=I.constructor;switch(g){case w:return Vi(I);case h:case G:return new A(+I);case J:return function(I,g){var C=g?Vi(I.buffer):I.buffer;return new I.constructor(C,I.byteOffset,I.byteLength)}(I,C);case S:case F:case N:case v:case k:case D:case z:case M:case U:return pi(I,C);case V:return new A;case p:case R:return new A(I);case H:return function(I){var g=new I.constructor(I.source,aI.exec(I));return g.lastIndex=I.lastIndex,g}(I);case Y:return new A;case f:return i=I,vC?WI(vC.call(i)):{}}var i}(I,s,t)}}l||(l=new jC);var Z=l.get(I);if(Z)return Z;l.set(I,o),eo(I)?I.forEach((function(C){o.add(oA(C,g,A,C,I,l))})):go(I)&&I.forEach((function(C,i){o.set(i,oA(C,g,A,i,I,l))}));var m=d?C:(n?c?Ae:Ce:c?wo:Ko)(I);return Xg(m||I,(function(C,i){m&&(C=I[i=C]),IA(o,i,oA(C,g,A,i,I,l))})),o}function tA(I,g,A){var i=A.length;if(null==I)return!i;for(I=WI(I);i--;){var e=A[i],l=g[e],o=I[e];if(o===C&&!(e in I)||!l(o))return!1}return!0}function cA(I,g,i){if("function"!=typeof I)throw new RI(A);return fe((function(){I.apply(C,i)}),g)}function nA(I,g,C,A){var i=-1,e=Rg,l=!0,o=I.length,t=[],c=g.length;if(!o)return t;C&&(g=Kg(g,Lg(C))),A?(e=fg,l=!1):g.length>=200&&(e=_g,l=!1,g=new OC(g));I:for(;++i<o;){var n=I[i],d=null==C?n:C(n);if(n=A||0!==n?n:0,l&&d===d){for(var s=c;s--;)if(g[s]===d)continue I;t.push(n)}else e(g,d,A)||t.push(n)}return t}DC.templateSettings={escape:E,evaluate:_,interpolate:$,variable:"",imports:{_:DC}},DC.prototype=MC.prototype,DC.prototype.constructor=DC,UC.prototype=zC(MC.prototype),UC.prototype.constructor=UC,xC.prototype=zC(MC.prototype),xC.prototype.constructor=xC,TC.prototype.clear=function(){this.__data__=YC?YC(null):{},this.size=0},TC.prototype.delete=function(I){var g=this.has(I)&&delete this.__data__[I];return this.size-=g?1:0,g},TC.prototype.get=function(I){var g=this.__data__;if(YC){var A=g[I];return A===i?C:A}return FI.call(g,I)?g[I]:C},TC.prototype.has=function(I){var g=this.__data__;return YC?g[I]!==C:FI.call(g,I)},TC.prototype.set=function(I,g){var A=this.__data__;return this.size+=this.has(I)?0:1,A[I]=YC&&g===C?i:g,this},QC.prototype.clear=function(){this.__data__=[],this.size=0},QC.prototype.delete=function(I){var g=this.__data__,C=gA(g,I);return!(C<0)&&(C==g.length-1?g.pop():LI.call(g,C,1),--this.size,!0)},QC.prototype.get=function(I){var g=this.__data__,A=gA(g,I);return A<0?C:g[A][1]},QC.prototype.has=function(I){return gA(this.__data__,I)>-1},QC.prototype.set=function(I,g){var C=this.__data__,A=gA(C,I);return A<0?(++this.size,C.push([I,g])):C[A][1]=g,this},PC.prototype.clear=function(){this.size=0,this.__data__={hash:new TC,map:new(pC||QC),string:new TC}},PC.prototype.delete=function(I){var g=te(this,I).delete(I);return this.size-=g?1:0,g},PC.prototype.get=function(I){return te(this,I).get(I)},PC.prototype.has=function(I){return te(this,I).has(I)},PC.prototype.set=function(I,g){var C=te(this,I),A=C.size;return C.set(I,g),this.size+=C.size==A?0:1,this},OC.prototype.add=OC.prototype.push=function(I){return this.__data__.set(I,i),this},OC.prototype.has=function(I){return this.__data__.has(I)},jC.prototype.clear=function(){this.__data__=new QC,this.size=0},jC.prototype.delete=function(I){var g=this.__data__,C=g.delete(I);return this.size=g.size,C},jC.prototype.get=function(I){return this.__data__.get(I)},jC.prototype.has=function(I){return this.__data__.has(I)},jC.prototype.set=function(I,g){var C=this.__data__;if(C instanceof QC){var A=C.__data__;if(!pC||A.length<199)return A.push([I,g]),this.size=++C.size,this;C=this.__data__=new PC(A)}return C.set(I,g),this.size=C.size,this};var dA=wi(GA),sA=wi(uA,!0);function aA(I,g){var C=!0;return dA(I,(function(I,A,i){return C=!!g(I,A,i)})),C}function ZA(I,g,A){for(var i=-1,e=I.length;++i<e;){var l=I[i],o=g(l);if(null!=o&&(t===C?o===o&&!oo(o):A(o,t)))var t=o,c=l}return c}function mA(I,g){var C=[];return dA(I,(function(I,A,i){g(I,A,i)&&C.push(I)})),C}function bA(I,g,C,A,i){var e=-1,l=I.length;for(C||(C=be),i||(i=[]);++e<l;){var o=I[e];g>0&&C(o)?g>1?bA(o,g-1,C,A,i):wg(i,o):A||(i[i.length]=o)}return i}var rA=Ji(),hA=Ji(!0);function GA(I,g){return I&&rA(I,g,Ko)}function uA(I,g){return I&&hA(I,g,Ko)}function yA(I,g){return Yg(g,(function(g){return El(I[g])}))}function BA(I,g){for(var A=0,i=(g=hi(g,I)).length;null!=I&&A<i;)I=I[Ne(g[A++])];return A&&A==i?I:C}function VA(I,g,C){var A=g(I);return xl(I)?A:wg(A,C(I))}function pA(I){return null==I?I===C?"[object Undefined]":"[object Null]":lg&&lg in WI(I)?function(I){var g=FI.call(I,lg),A=I[lg];try{I[lg]=C;var i=!0}catch(im){}var e=kI.call(I);i&&(g?I[lg]=A:delete I[lg]);return e}(I):function(I){return kI.call(I)}(I)}function XA(I,g){return I>g}function WA(I,g){return null!=I&&FI.call(I,g)}function HA(I,g){return null!=I&&g in WI(I)}function YA(I,g,A){for(var i=A?fg:Rg,e=I[0].length,l=I.length,o=l,t=eI(l),c=1/0,n=[];o--;){var d=I[o];o&&g&&(d=Kg(d,Lg(g))),c=hC(d.length,c),t[o]=!A&&(g||e>=120&&d.length>=120)?new OC(o&&d):C}d=I[0];var s=-1,a=t[0];I:for(;++s<e&&n.length<c;){var Z=d[s],m=g?g(Z):Z;if(Z=A||0!==Z?Z:0,!(a?_g(a,m):i(n,m,A))){for(o=l;--o;){var b=t[o];if(!(b?_g(b,m):i(I[o],m,A)))continue I}a&&a.push(m),n.push(Z)}}return n}function RA(I,g,A){var i=null==(I=We(I,g=hi(g,I)))?I:I[Ne(Le(g))];return null==i?C:Vg(i,I,A)}function fA(I){return Io(I)&&pA(I)==b}function KA(I,g,A,i,e){return I===g||(null==I||null==g||!Io(I)&&!Io(g)?I!==I&&g!==g:function(I,g,A,i,e,l){var o=xl(I),t=xl(g),c=o?r:ae(I),n=t?r:ae(g),d=(c=c==b?X:c)==X,s=(n=n==b?X:n)==X,a=c==n;if(a&&Ol(I)){if(!Ol(g))return!1;o=!0,d=!1}if(a&&!d)return l||(l=new jC),o||to(I)?Ie(I,g,A,i,e,l):function(I,g,C,A,i,e,l){switch(C){case J:if(I.byteLength!=g.byteLength||I.byteOffset!=g.byteOffset)return!1;I=I.buffer,g=g.buffer;case w:return!(I.byteLength!=g.byteLength||!e(new TI(I),new TI(g)));case h:case G:case p:return Dl(+I,+g);case u:return I.name==g.name&&I.message==g.message;case H:case R:return I==g+"";case V:var o=eC;case Y:var t=1&A;if(o||(o=tC),I.size!=g.size&&!t)return!1;var c=l.get(I);if(c)return c==g;A|=2,l.set(I,g);var n=Ie(o(I),o(g),A,i,e,l);return l.delete(I),n;case f:if(vC)return vC.call(I)==vC.call(g)}return!1}(I,g,c,A,i,e,l);if(!(1&A)){var Z=d&&FI.call(I,"__wrapped__"),m=s&&FI.call(g,"__wrapped__");if(Z||m){var y=Z?I.value():I,B=m?g.value():g;return l||(l=new jC),e(y,B,A,i,l)}}if(!a)return!1;return l||(l=new jC),function(I,g,A,i,e,l){var o=1&A,t=Ce(I),c=t.length,n=Ce(g).length;if(c!=n&&!o)return!1;var d=c;for(;d--;){var s=t[d];if(!(o?s in g:FI.call(g,s)))return!1}var a=l.get(I),Z=l.get(g);if(a&&Z)return a==g&&Z==I;var m=!0;l.set(I,g),l.set(g,I);var b=o;for(;++d<c;){var r=I[s=t[d]],h=g[s];if(i)var G=o?i(h,r,s,g,I,l):i(r,h,s,I,g,l);if(!(G===C?r===h||e(r,h,A,i,l):G)){m=!1;break}b||(b="constructor"==s)}if(m&&!b){var u=I.constructor,y=g.constructor;u==y||!("constructor"in I)||!("constructor"in g)||"function"==typeof u&&u instanceof u&&"function"==typeof y&&y instanceof y||(m=!1)}return l.delete(I),l.delete(g),m}(I,g,A,i,e,l)}(I,g,A,i,KA,e))}function wA(I,g,A,i){var e=A.length,l=e,o=!i;if(null==I)return!l;for(I=WI(I);e--;){var t=A[e];if(o&&t[2]?t[1]!==I[t[0]]:!(t[0]in I))return!1}for(;++e<l;){var c=(t=A[e])[0],n=I[c],d=t[1];if(o&&t[2]){if(n===C&&!(c in I))return!1}else{var s=new jC;if(i)var a=i(n,d,c,I,g,s);if(!(a===C?KA(d,n,3,i,s):a))return!1}}return!0}function JA(I){return!(!ql(I)||(g=I,vI&&vI in g))&&(El(I)?MI:bI).test(ve(I));var g}function SA(I){return"function"==typeof I?I:null==I?At:"object"==typeof I?xl(I)?zA(I[0],I[1]):DA(I):st(I)}function FA(I){if(!Be(I))return bC(I);var g=[];for(var C in WI(I))FI.call(I,C)&&"constructor"!=C&&g.push(C);return g}function NA(I){if(!ql(I))return function(I){var g=[];if(null!=I)for(var C in WI(I))g.push(C);return g}(I);var g=Be(I),C=[];for(var A in I)("constructor"!=A||!g&&FI.call(I,A))&&C.push(A);return C}function vA(I,g){return I<g}function kA(I,g){var C=-1,A=Ql(I)?eI(I.length):[];return dA(I,(function(I,i,e){A[++C]=g(I,i,e)})),A}function DA(I){var g=ce(I);return 1==g.length&&g[0][2]?pe(g[0][0],g[0][1]):function(C){return C===I||wA(C,I,g)}}function zA(I,g){return Ge(I)&&Ve(g)?pe(Ne(I),g):function(A){var i=Wo(A,I);return i===C&&i===g?Ho(A,I):KA(g,i,3)}}function MA(I,g,A,i,e){I!==g&&rA(g,(function(l,o){if(e||(e=new jC),ql(l))!function(I,g,A,i,e,l,o){var t=Ye(I,A),c=Ye(g,A),n=o.get(c);if(n)return void qC(I,A,n);var d=l?l(t,c,A+"",I,g,o):C,s=d===C;if(s){var a=xl(c),Z=!a&&Ol(c),m=!a&&!Z&&to(c);d=c,a||Z||m?xl(t)?d=t:Pl(t)?d=Yi(t):Z?(s=!1,d=Bi(c,!0)):m?(s=!1,d=pi(c,!0)):d=[]:Ao(c)||Ul(c)?(d=t,Ul(t)?d=ro(t):ql(t)&&!El(t)||(d=me(c))):s=!1}s&&(o.set(c,d),e(d,c,i,l,o),o.delete(c));qC(I,A,d)}(I,g,o,A,MA,i,e);else{var t=i?i(Ye(I,o),l,o+"",I,g,e):C;t===C&&(t=l),qC(I,o,t)}}),wo)}function UA(I,g){var A=I.length;if(A)return re(g+=g<0?A:0,A)?I[g]:C}function xA(I,g,C){g=g.length?Kg(g,(function(I){return xl(I)?function(g){return BA(g,1===I.length?I[0]:I)}:I})):[At];var A=-1;return g=Kg(g,Lg(oe())),function(I,g){var C=I.length;for(I.sort(g);C--;)I[C]=I[C].value;return I}(kA(I,(function(I,C,i){return{criteria:Kg(g,(function(g){return g(I)})),index:++A,value:I}})),(function(I,g){return function(I,g,C){var A=-1,i=I.criteria,e=g.criteria,l=i.length,o=C.length;for(;++A<l;){var t=Xi(i[A],e[A]);if(t)return A>=o?t:t*("desc"==C[A]?-1:1)}return I.index-g.index}(I,g,C)}))}function TA(I,g,C){for(var A=-1,i=g.length,e={};++A<i;){var l=g[A],o=BA(I,l);C(o,l)&&$A(e,hi(l,I),o)}return e}function QA(I,g,C,A){var i=A?zg:Dg,e=-1,l=g.length,o=I;for(I===g&&(g=Yi(g)),C&&(o=Kg(I,Lg(C)));++e<l;)for(var t=0,c=g[e],n=C?C(c):c;(t=i(o,n,t,A))>-1;)o!==I&&LI.call(o,t,1),LI.call(I,t,1);return I}function PA(I,g){for(var C=I?g.length:0,A=C-1;C--;){var i=g[C];if(C==A||i!==e){var e=i;re(i)?LI.call(I,i,1):ni(I,i)}}return I}function OA(I,g){return I+bg(yC()*(g-I+1))}function jA(I,g){var C="";if(!I||g<1||g>s)return C;do{g%2&&(C+=I),(g=bg(g/2))&&(I+=I)}while(g);return C}function LA(I,g){return Ke(Xe(I,g,At),I+"")}function EA(I){return EC(zo(I))}function _A(I,g){var C=zo(I);return Se(C,lA(g,0,C.length))}function $A(I,g,A,i){if(!ql(I))return I;for(var e=-1,l=(g=hi(g,I)).length,o=l-1,t=I;null!=t&&++e<l;){var c=Ne(g[e]),n=A;if("__proto__"===c||"constructor"===c||"prototype"===c)return I;if(e!=o){var d=t[c];(n=i?i(d,c,t):C)===C&&(n=ql(d)?d:re(g[e+1])?[]:{})}IA(t,c,n),t=t[c]}return I}var qA=RC?function(I,g){return RC.set(I,g),I}:At,Ii=cg?function(I,g){return cg(I,"toString",{configurable:!0,enumerable:!1,value:It(g),writable:!0})}:At;function gi(I){return Se(zo(I))}function Ci(I,g,C){var A=-1,i=I.length;g<0&&(g=-g>i?0:i+g),(C=C>i?i:C)<0&&(C+=i),i=g>C?0:C-g>>>0,g>>>=0;for(var e=eI(i);++A<i;)e[A]=I[A+g];return e}function Ai(I,g){var C;return dA(I,(function(I,A,i){return!(C=g(I,A,i))})),!!C}function ii(I,g,C){var A=0,i=null==I?A:I.length;if("number"==typeof g&&g===g&&i<=2147483647){for(;A<i;){var e=A+i>>>1,l=I[e];null!==l&&!oo(l)&&(C?l<=g:l<g)?A=e+1:i=e}return i}return ei(I,g,At,C)}function ei(I,g,A,i){var e=0,l=null==I?0:I.length;if(0===l)return 0;for(var o=(g=A(g))!==g,t=null===g,c=oo(g),n=g===C;e<l;){var d=bg((e+l)/2),s=A(I[d]),a=s!==C,Z=null===s,m=s===s,b=oo(s);if(o)var r=i||m;else r=n?m&&(i||a):t?m&&a&&(i||!Z):c?m&&a&&!Z&&(i||!b):!Z&&!b&&(i?s<=g:s<g);r?e=d+1:l=d}return hC(l,4294967294)}function li(I,g){for(var C=-1,A=I.length,i=0,e=[];++C<A;){var l=I[C],o=g?g(l):l;if(!C||!Dl(o,t)){var t=o;e[i++]=0===l?0:l}}return e}function oi(I){return"number"==typeof I?I:oo(I)?a:+I}function ti(I){if("string"==typeof I)return I;if(xl(I))return Kg(I,ti)+"";if(oo(I))return kC?kC.call(I):"";var g=I+"";return"0"==g&&1/I==-1/0?"-0":g}function ci(I,g,C){var A=-1,i=Rg,e=I.length,l=!0,o=[],t=o;if(C)l=!1,i=fg;else if(e>=200){var c=g?null:ji(I);if(c)return tC(c);l=!1,i=_g,t=new OC}else t=g?[]:o;I:for(;++A<e;){var n=I[A],d=g?g(n):n;if(n=C||0!==n?n:0,l&&d===d){for(var s=t.length;s--;)if(t[s]===d)continue I;g&&t.push(d),o.push(n)}else i(t,d,C)||(t!==o&&t.push(d),o.push(n))}return o}function ni(I,g){return null==(I=We(I,g=hi(g,I)))||delete I[Ne(Le(g))]}function di(I,g,C,A){return $A(I,g,C(BA(I,g)),A)}function si(I,g,C,A){for(var i=I.length,e=A?i:-1;(A?e--:++e<i)&&g(I[e],e,I););return C?Ci(I,A?0:e,A?e+1:i):Ci(I,A?e+1:0,A?i:e)}function ai(I,g){var C=I;return C instanceof xC&&(C=C.value()),Jg(g,(function(I,g){return g.func.apply(g.thisArg,wg([I],g.args))}),C)}function Zi(I,g,C){var A=I.length;if(A<2)return A?ci(I[0]):[];for(var i=-1,e=eI(A);++i<A;)for(var l=I[i],o=-1;++o<A;)o!=i&&(e[i]=nA(e[i]||l,I[o],g,C));return ci(bA(e,1),g,C)}function mi(I,g,A){for(var i=-1,e=I.length,l=g.length,o={};++i<e;){var t=i<l?g[i]:C;A(o,I[i],t)}return o}function bi(I){return Pl(I)?I:[]}function ri(I){return"function"==typeof I?I:At}function hi(I,g){return xl(I)?I:Ge(I,g)?[I]:Fe(ho(I))}var Gi=LA;function ui(I,g,A){var i=I.length;return A=A===C?i:A,!g&&A>=i?I:Ci(I,g,A)}var yi=ng||function(I){return dg.clearTimeout(I)};function Bi(I,g){if(g)return I.slice();var C=I.length,A=QI?QI(C):new I.constructor(C);return I.copy(A),A}function Vi(I){var g=new I.constructor(I.byteLength);return new TI(g).set(new TI(I)),g}function pi(I,g){var C=g?Vi(I.buffer):I.buffer;return new I.constructor(C,I.byteOffset,I.length)}function Xi(I,g){if(I!==g){var A=I!==C,i=null===I,e=I===I,l=oo(I),o=g!==C,t=null===g,c=g===g,n=oo(g);if(!t&&!n&&!l&&I>g||l&&o&&c&&!t&&!n||i&&o&&c||!A&&c||!e)return 1;if(!i&&!l&&!n&&I<g||n&&A&&e&&!i&&!l||t&&A&&e||!o&&e||!c)return-1}return 0}function Wi(I,g,C,A){for(var i=-1,e=I.length,l=C.length,o=-1,t=g.length,c=rC(e-l,0),n=eI(t+c),d=!A;++o<t;)n[o]=g[o];for(;++i<l;)(d||i<e)&&(n[C[i]]=I[i]);for(;c--;)n[o++]=I[i++];return n}function Hi(I,g,C,A){for(var i=-1,e=I.length,l=-1,o=C.length,t=-1,c=g.length,n=rC(e-o,0),d=eI(n+c),s=!A;++i<n;)d[i]=I[i];for(var a=i;++t<c;)d[a+t]=g[t];for(;++l<o;)(s||i<e)&&(d[a+C[l]]=I[i++]);return d}function Yi(I,g){var C=-1,A=I.length;for(g||(g=eI(A));++C<A;)g[C]=I[C];return g}function Ri(I,g,A,i){var e=!A;A||(A={});for(var l=-1,o=g.length;++l<o;){var t=g[l],c=i?i(A[t],I[t],t,A,I):C;c===C&&(c=I[t]),e?iA(A,t,c):IA(A,t,c)}return A}function fi(I,g){return function(C,A){var i=xl(C)?pg:CA,e=g?g():{};return i(C,I,oe(A,2),e)}}function Ki(I){return LA((function(g,A){var i=-1,e=A.length,l=e>1?A[e-1]:C,o=e>2?A[2]:C;for(l=I.length>3&&"function"==typeof l?(e--,l):C,o&&he(A[0],A[1],o)&&(l=e<3?C:l,e=1),g=WI(g);++i<e;){var t=A[i];t&&I(g,t,i,l)}return g}))}function wi(I,g){return function(C,A){if(null==C)return C;if(!Ql(C))return I(C,A);for(var i=C.length,e=g?i:-1,l=WI(C);(g?e--:++e<i)&&!1!==A(l[e],e,l););return C}}function Ji(I){return function(g,C,A){for(var i=-1,e=WI(g),l=A(g),o=l.length;o--;){var t=l[I?o:++i];if(!1===C(e[t],t,e))break}return g}}function Si(I){return function(g){var A=iC(g=ho(g))?nC(g):C,i=A?A[0]:g.charAt(0),e=A?ui(A,1).join(""):g.slice(1);return i[I]()+e}}function Fi(I){return function(g){return Jg(_o(xo(g).replace(EI,"")),I,"")}}function Ni(I){return function(){var g=arguments;switch(g.length){case 0:return new I;case 1:return new I(g[0]);case 2:return new I(g[0],g[1]);case 3:return new I(g[0],g[1],g[2]);case 4:return new I(g[0],g[1],g[2],g[3]);case 5:return new I(g[0],g[1],g[2],g[3],g[4]);case 6:return new I(g[0],g[1],g[2],g[3],g[4],g[5]);case 7:return new I(g[0],g[1],g[2],g[3],g[4],g[5],g[6])}var C=zC(I.prototype),A=I.apply(C,g);return ql(A)?A:C}}function vi(I){return function(g,A,i){var e=WI(g);if(!Ql(g)){var l=oe(A,3);g=Ko(g),A=function(I){return l(e[I],I,e)}}var o=I(g,A,i);return o>-1?e[l?g[o]:o]:C}}function ki(I){return ge((function(g){var i=g.length,e=i,l=UC.prototype.thru;for(I&&g.reverse();e--;){var o=g[e];if("function"!=typeof o)throw new RI(A);if(l&&!t&&"wrapper"==ee(o))var t=new UC([],!0)}for(e=t?e:i;++e<i;){var c=ee(o=g[e]),n="wrapper"==c?ie(o):C;t=n&&ue(n[0])&&424==n[1]&&!n[4].length&&1==n[9]?t[ee(n[0])].apply(t,n[3]):1==o.length&&ue(o)?t[c]():t.thru(o)}return function(){var I=arguments,C=I[0];if(t&&1==I.length&&xl(C))return t.plant(C).value();for(var A=0,e=i?g[A].apply(this,I):C;++A<i;)e=g[A].call(this,e);return e}}))}function Di(I,g,A,i,e,l,o,t,n,d){var s=g&c,a=1&g,Z=2&g,m=24&g,b=512&g,r=Z?C:Ni(I);return function C(){for(var c=arguments.length,h=eI(c),G=c;G--;)h[G]=arguments[G];if(m)var u=le(C),y=IC(h,u);if(i&&(h=Wi(h,i,e,m)),l&&(h=Hi(h,l,o,m)),c-=y,m&&c<d){var B=oC(h,u);return Pi(I,g,Di,C.placeholder,A,h,B,t,n,d-c)}var V=a?A:this,p=Z?V[I]:I;return c=h.length,t?h=He(h,t):b&&c>1&&h.reverse(),s&&n<c&&(h.length=n),this&&this!==dg&&this instanceof C&&(p=r||Ni(p)),p.apply(V,h)}}function zi(I,g){return function(C,A){return function(I,g,C,A){return GA(I,(function(I,i,e){g(A,C(I),i,e)})),A}(C,I,g(A),{})}}function Mi(I,g){return function(A,i){var e;if(A===C&&i===C)return g;if(A!==C&&(e=A),i!==C){if(e===C)return i;"string"==typeof A||"string"==typeof i?(A=ti(A),i=ti(i)):(A=oi(A),i=oi(i)),e=I(A,i)}return e}}function Ui(I){return ge((function(g){return g=Kg(g,Lg(oe())),LA((function(C){var A=this;return I(g,(function(I){return Vg(I,A,C)}))}))}))}function xi(I,g){var A=(g=g===C?" ":ti(g)).length;if(A<2)return A?jA(g,I):g;var i=jA(g,mg(I/cC(g)));return iC(g)?ui(nC(i),0,I).join(""):i.slice(0,I)}function Ti(I){return function(g,A,i){return i&&"number"!=typeof i&&he(g,A,i)&&(A=i=C),g=ao(g),A===C?(A=g,g=0):A=ao(A),function(I,g,C,A){for(var i=-1,e=rC(mg((g-I)/(C||1)),0),l=eI(e);e--;)l[A?e:++i]=I,I+=C;return l}(g,A,i=i===C?g<A?1:-1:ao(i),I)}}function Qi(I){return function(g,C){return"string"==typeof g&&"string"==typeof C||(g=bo(g),C=bo(C)),I(g,C)}}function Pi(I,g,A,i,e,l,c,n,d,s){var a=8&g;g|=a?o:t,4&(g&=~(a?t:o))||(g&=-4);var Z=[I,g,e,a?l:C,a?c:C,a?C:l,a?C:c,n,d,s],m=A.apply(C,Z);return ue(I)&&Re(m,Z),m.placeholder=i,we(m,I,g)}function Oi(I){var g=XI[I];return function(I,C){if(I=bo(I),(C=null==C?0:hC(Zo(C),292))&&sC(I)){var A=(ho(I)+"e").split("e");return+((A=(ho(g(A[0]+"e"+(+A[1]+C)))+"e").split("e"))[0]+"e"+(+A[1]-C))}return g(I)}}var ji=WC&&1/tC(new WC([,-0]))[1]==d?function(I){return new WC(I)}:tt;function Li(I){return function(g){var C=ae(g);return C==V?eC(g):C==Y?function(I){var g=-1,C=Array(I.size);return I.forEach((function(I){C[++g]=[I,I]})),C}(g):function(I,g){return Kg(g,(function(g){return[g,I[g]]}))}(g,I(g))}}function Ei(I,g,i,d,s,a,Z,m){var b=2&g;if(!b&&"function"!=typeof I)throw new RI(A);var r=d?d.length:0;if(r||(g&=-97,d=s=C),Z=Z===C?Z:rC(Zo(Z),0),m=m===C?m:Zo(m),r-=s?s.length:0,g&t){var h=d,G=s;d=s=C}var u=b?C:ie(I),y=[I,g,i,d,s,h,G,a,Z,m];if(u&&function(I,g){var C=I[1],A=g[1],i=C|A,l=i<131,o=A==c&&8==C||A==c&&C==n&&I[7].length<=g[8]||384==A&&g[7].length<=g[8]&&8==C;if(!l&&!o)return I;1&A&&(I[2]=g[2],i|=1&C?0:4);var t=g[3];if(t){var d=I[3];I[3]=d?Wi(d,t,g[4]):t,I[4]=d?oC(I[3],e):g[4]}(t=g[5])&&(d=I[5],I[5]=d?Hi(d,t,g[6]):t,I[6]=d?oC(I[5],e):g[6]);(t=g[7])&&(I[7]=t);A&c&&(I[8]=null==I[8]?g[8]:hC(I[8],g[8]));null==I[9]&&(I[9]=g[9]);I[0]=g[0],I[1]=i}(y,u),I=y[0],g=y[1],i=y[2],d=y[3],s=y[4],!(m=y[9]=y[9]===C?b?0:I.length:rC(y[9]-r,0))&&24&g&&(g&=-25),g&&1!=g)B=8==g||g==l?function(I,g,A){var i=Ni(I);return function e(){for(var l=arguments.length,o=eI(l),t=l,c=le(e);t--;)o[t]=arguments[t];var n=l<3&&o[0]!==c&&o[l-1]!==c?[]:oC(o,c);return(l-=n.length)<A?Pi(I,g,Di,e.placeholder,C,o,n,C,C,A-l):Vg(this&&this!==dg&&this instanceof e?i:I,this,o)}}(I,g,m):g!=o&&33!=g||s.length?Di.apply(C,y):function(I,g,C,A){var i=1&g,e=Ni(I);return function g(){for(var l=-1,o=arguments.length,t=-1,c=A.length,n=eI(c+o),d=this&&this!==dg&&this instanceof g?e:I;++t<c;)n[t]=A[t];for(;o--;)n[t++]=arguments[++l];return Vg(d,i?C:this,n)}}(I,g,i,d);else var B=function(I,g,C){var A=1&g,i=Ni(I);return function g(){return(this&&this!==dg&&this instanceof g?i:I).apply(A?C:this,arguments)}}(I,g,i);return we((u?qA:Re)(B,y),I,g)}function _i(I,g,A,i){return I===C||Dl(I,wI[A])&&!FI.call(i,A)?g:I}function $i(I,g,A,i,e,l){return ql(I)&&ql(g)&&(l.set(g,I),MA(I,g,C,$i,l),l.delete(g)),I}function qi(I){return Ao(I)?C:I}function Ie(I,g,A,i,e,l){var o=1&A,t=I.length,c=g.length;if(t!=c&&!(o&&c>t))return!1;var n=l.get(I),d=l.get(g);if(n&&d)return n==g&&d==I;var s=-1,a=!0,Z=2&A?new OC:C;for(l.set(I,g),l.set(g,I);++s<t;){var m=I[s],b=g[s];if(i)var r=o?i(b,m,s,g,I,l):i(m,b,s,I,g,l);if(r!==C){if(r)continue;a=!1;break}if(Z){if(!Fg(g,(function(I,g){if(!_g(Z,g)&&(m===I||e(m,I,A,i,l)))return Z.push(g)}))){a=!1;break}}else if(m!==b&&!e(m,b,A,i,l)){a=!1;break}}return l.delete(I),l.delete(g),a}function ge(I){return Ke(Xe(I,C,Te),I+"")}function Ce(I){return VA(I,Ko,de)}function Ae(I){return VA(I,wo,se)}var ie=RC?function(I){return RC.get(I)}:tt;function ee(I){for(var g=I.name+"",C=fC[g],A=FI.call(fC,g)?C.length:0;A--;){var i=C[A],e=i.func;if(null==e||e==I)return i.name}return g}function le(I){return(FI.call(DC,"placeholder")?DC:I).placeholder}function oe(){var I=DC.iteratee||it;return I=I===it?SA:I,arguments.length?I(arguments[0],arguments[1]):I}function te(I,g){var C=I.__data__;return function(I){var g=typeof I;return"string"==g||"number"==g||"symbol"==g||"boolean"==g?"__proto__"!==I:null===I}(g)?C["string"==typeof g?"string":"hash"]:C.map}function ce(I){for(var g=Ko(I),C=g.length;C--;){var A=g[C],i=I[A];g[C]=[A,i,Ve(i)]}return g}function ne(I,g){var A=function(I,g){return null==I?C:I[g]}(I,g);return JA(A)?A:C}var de=Ng?function(I){return null==I?[]:(I=WI(I),Yg(Ng(I),(function(g){return jI.call(I,g)})))}:mt,se=Ng?function(I){for(var g=[];I;)wg(g,de(I)),I=PI(I);return g}:mt,ae=pA;function Ze(I,g,C){for(var A=-1,i=(g=hi(g,I)).length,e=!1;++A<i;){var l=Ne(g[A]);if(!(e=null!=I&&C(I,l)))break;I=I[l]}return e||++A!=i?e:!!(i=null==I?0:I.length)&&$l(i)&&re(l,i)&&(xl(I)||Ul(I))}function me(I){return"function"!=typeof I.constructor||Be(I)?{}:zC(PI(I))}function be(I){return xl(I)||Ul(I)||!!($I&&I&&I[$I])}function re(I,g){var C=typeof I;return!!(g=null==g?s:g)&&("number"==C||"symbol"!=C&&hI.test(I))&&I>-1&&I%1==0&&I<g}function he(I,g,C){if(!ql(C))return!1;var A=typeof g;return!!("number"==A?Ql(C)&&re(g,C.length):"string"==A&&g in C)&&Dl(C[g],I)}function Ge(I,g){if(xl(I))return!1;var C=typeof I;return!("number"!=C&&"symbol"!=C&&"boolean"!=C&&null!=I&&!oo(I))||(II.test(I)||!q.test(I)||null!=g&&I in WI(g))}function ue(I){var g=ee(I),C=DC[g];if("function"!=typeof C||!(g in xC.prototype))return!1;if(I===C)return!0;var A=ie(C);return!!A&&I===A[0]}(VC&&ae(new VC(new ArrayBuffer(1)))!=J||pC&&ae(new pC)!=V||XC&&ae(XC.resolve())!=W||WC&&ae(new WC)!=Y||HC&&ae(new HC)!=K)&&(ae=function(I){var g=pA(I),A=g==X?I.constructor:C,i=A?ve(A):"";if(i)switch(i){case KC:return J;case wC:return V;case JC:return W;case SC:return Y;case FC:return K}return g});var ye=JI?El:bt;function Be(I){var g=I&&I.constructor;return I===("function"==typeof g&&g.prototype||wI)}function Ve(I){return I===I&&!ql(I)}function pe(I,g){return function(A){return null!=A&&(A[I]===g&&(g!==C||I in WI(A)))}}function Xe(I,g,A){return g=rC(g===C?I.length-1:g,0),function(){for(var C=arguments,i=-1,e=rC(C.length-g,0),l=eI(e);++i<e;)l[i]=C[g+i];i=-1;for(var o=eI(g+1);++i<g;)o[i]=C[i];return o[g]=A(l),Vg(I,this,o)}}function We(I,g){return g.length<2?I:BA(I,Ci(g,0,-1))}function He(I,g){for(var A=I.length,i=hC(g.length,A),e=Yi(I);i--;){var l=g[i];I[i]=re(l,A)?e[l]:C}return I}function Ye(I,g){if(("constructor"!==g||"function"!==typeof I[g])&&"__proto__"!=g)return I[g]}var Re=Je(qA),fe=ag||function(I,g){return dg.setTimeout(I,g)},Ke=Je(Ii);function we(I,g,C){var A=g+"";return Ke(I,function(I,g){var C=g.length;if(!C)return I;var A=C-1;return g[A]=(C>1?"& ":"")+g[A],g=g.join(C>2?", ":" "),I.replace(lI,"{\n/* [wrapped with "+g+"] */\n")}(A,function(I,g){return Xg(m,(function(C){var A="_."+C[0];g&C[1]&&!Rg(I,A)&&I.push(A)})),I.sort()}(function(I){var g=I.match(oI);return g?g[1].split(tI):[]}(A),C)))}function Je(I){var g=0,A=0;return function(){var i=GC(),e=16-(i-A);if(A=i,e>0){if(++g>=800)return arguments[0]}else g=0;return I.apply(C,arguments)}}function Se(I,g){var A=-1,i=I.length,e=i-1;for(g=g===C?i:g;++A<g;){var l=OA(A,e),o=I[l];I[l]=I[A],I[A]=o}return I.length=g,I}var Fe=function(I){var g=Jl(I,(function(I){return 500===C.size&&C.clear(),I})),C=g.cache;return g}((function(I){var g=[];return 46===I.charCodeAt(0)&&g.push(""),I.replace(gI,(function(I,C,A,i){g.push(A?i.replace(dI,"$1"):C||I)})),g}));function Ne(I){if("string"==typeof I||oo(I))return I;var g=I+"";return"0"==g&&1/I==-1/0?"-0":g}function ve(I){if(null!=I){try{return SI.call(I)}catch(im){}try{return I+""}catch(im){}}return""}function ke(I){if(I instanceof xC)return I.clone();var g=new UC(I.__wrapped__,I.__chain__);return g.__actions__=Yi(I.__actions__),g.__index__=I.__index__,g.__values__=I.__values__,g}var De=LA((function(I,g){return Pl(I)?nA(I,bA(g,1,Pl,!0)):[]})),ze=LA((function(I,g){var A=Le(g);return Pl(A)&&(A=C),Pl(I)?nA(I,bA(g,1,Pl,!0),oe(A,2)):[]})),Me=LA((function(I,g){var A=Le(g);return Pl(A)&&(A=C),Pl(I)?nA(I,bA(g,1,Pl,!0),C,A):[]}));function Ue(I,g,C){var A=null==I?0:I.length;if(!A)return-1;var i=null==C?0:Zo(C);return i<0&&(i=rC(A+i,0)),kg(I,oe(g,3),i)}function xe(I,g,A){var i=null==I?0:I.length;if(!i)return-1;var e=i-1;return A!==C&&(e=Zo(A),e=A<0?rC(i+e,0):hC(e,i-1)),kg(I,oe(g,3),e,!0)}function Te(I){return(null==I?0:I.length)?bA(I,1):[]}function Qe(I){return I&&I.length?I[0]:C}var Pe=LA((function(I){var g=Kg(I,bi);return g.length&&g[0]===I[0]?YA(g):[]})),Oe=LA((function(I){var g=Le(I),A=Kg(I,bi);return g===Le(A)?g=C:A.pop(),A.length&&A[0]===I[0]?YA(A,oe(g,2)):[]})),je=LA((function(I){var g=Le(I),A=Kg(I,bi);return(g="function"==typeof g?g:C)&&A.pop(),A.length&&A[0]===I[0]?YA(A,C,g):[]}));function Le(I){var g=null==I?0:I.length;return g?I[g-1]:C}var Ee=LA(_e);function _e(I,g){return I&&I.length&&g&&g.length?QA(I,g):I}var $e=ge((function(I,g){var C=null==I?0:I.length,A=eA(I,g);return PA(I,Kg(g,(function(I){return re(I,C)?+I:I})).sort(Xi)),A}));function qe(I){return null==I?I:BC.call(I)}var Il=LA((function(I){return ci(bA(I,1,Pl,!0))})),gl=LA((function(I){var g=Le(I);return Pl(g)&&(g=C),ci(bA(I,1,Pl,!0),oe(g,2))})),Cl=LA((function(I){var g=Le(I);return g="function"==typeof g?g:C,ci(bA(I,1,Pl,!0),C,g)}));function Al(I){if(!I||!I.length)return[];var g=0;return I=Yg(I,(function(I){if(Pl(I))return g=rC(I.length,g),!0})),Og(g,(function(g){return Kg(I,xg(g))}))}function il(I,g){if(!I||!I.length)return[];var A=Al(I);return null==g?A:Kg(A,(function(I){return Vg(g,C,I)}))}var el=LA((function(I,g){return Pl(I)?nA(I,g):[]})),ll=LA((function(I){return Zi(Yg(I,Pl))})),ol=LA((function(I){var g=Le(I);return Pl(g)&&(g=C),Zi(Yg(I,Pl),oe(g,2))})),tl=LA((function(I){var g=Le(I);return g="function"==typeof g?g:C,Zi(Yg(I,Pl),C,g)})),cl=LA(Al);var nl=LA((function(I){var g=I.length,A=g>1?I[g-1]:C;return A="function"==typeof A?(I.pop(),A):C,il(I,A)}));function dl(I){var g=DC(I);return g.__chain__=!0,g}function sl(I,g){return g(I)}var al=ge((function(I){var g=I.length,A=g?I[0]:0,i=this.__wrapped__,e=function(g){return eA(g,I)};return!(g>1||this.__actions__.length)&&i instanceof xC&&re(A)?((i=i.slice(A,+A+(g?1:0))).__actions__.push({func:sl,args:[e],thisArg:C}),new UC(i,this.__chain__).thru((function(I){return g&&!I.length&&I.push(C),I}))):this.thru(e)}));var Zl=fi((function(I,g,C){FI.call(I,C)?++I[C]:iA(I,C,1)}));var ml=vi(Ue),bl=vi(xe);function rl(I,g){return(xl(I)?Xg:dA)(I,oe(g,3))}function hl(I,g){return(xl(I)?Wg:sA)(I,oe(g,3))}var Gl=fi((function(I,g,C){FI.call(I,C)?I[C].push(g):iA(I,C,[g])}));var ul=LA((function(I,g,C){var A=-1,i="function"==typeof g,e=Ql(I)?eI(I.length):[];return dA(I,(function(I){e[++A]=i?Vg(g,I,C):RA(I,g,C)})),e})),yl=fi((function(I,g,C){iA(I,C,g)}));function Bl(I,g){return(xl(I)?Kg:kA)(I,oe(g,3))}var Vl=fi((function(I,g,C){I[C?0:1].push(g)}),(function(){return[[],[]]}));var pl=LA((function(I,g){if(null==I)return[];var C=g.length;return C>1&&he(I,g[0],g[1])?g=[]:C>2&&he(g[0],g[1],g[2])&&(g=[g[0]]),xA(I,bA(g,1),[])})),Xl=sg||function(){return dg.Date.now()};function Wl(I,g,A){return g=A?C:g,g=I&&null==g?I.length:g,Ei(I,c,C,C,C,C,g)}function Hl(I,g){var i;if("function"!=typeof g)throw new RI(A);return I=Zo(I),function(){return--I>0&&(i=g.apply(this,arguments)),I<=1&&(g=C),i}}var Yl=LA((function(I,g,C){var A=1;if(C.length){var i=oC(C,le(Yl));A|=o}return Ei(I,A,g,C,i)})),Rl=LA((function(I,g,C){var A=3;if(C.length){var i=oC(C,le(Rl));A|=o}return Ei(g,A,I,C,i)}));function fl(I,g,i){var e,l,o,t,c,n,d=0,s=!1,a=!1,Z=!0;if("function"!=typeof I)throw new RI(A);function m(g){var A=e,i=l;return e=l=C,d=g,t=I.apply(i,A)}function b(I){return d=I,c=fe(h,g),s?m(I):t}function r(I){var A=I-n;return n===C||A>=g||A<0||a&&I-d>=o}function h(){var I=Xl();if(r(I))return G(I);c=fe(h,function(I){var C=g-(I-n);return a?hC(C,o-(I-d)):C}(I))}function G(I){return c=C,Z&&e?m(I):(e=l=C,t)}function u(){var I=Xl(),A=r(I);if(e=arguments,l=this,n=I,A){if(c===C)return b(n);if(a)return yi(c),c=fe(h,g),m(n)}return c===C&&(c=fe(h,g)),t}return g=bo(g)||0,ql(i)&&(s=!!i.leading,o=(a="maxWait"in i)?rC(bo(i.maxWait)||0,g):o,Z="trailing"in i?!!i.trailing:Z),u.cancel=function(){c!==C&&yi(c),d=0,e=n=l=c=C},u.flush=function(){return c===C?t:G(Xl())},u}var Kl=LA((function(I,g){return cA(I,1,g)})),wl=LA((function(I,g,C){return cA(I,bo(g)||0,C)}));function Jl(I,g){if("function"!=typeof I||null!=g&&"function"!=typeof g)throw new RI(A);var C=function C(){var A=arguments,i=g?g.apply(this,A):A[0],e=C.cache;if(e.has(i))return e.get(i);var l=I.apply(this,A);return C.cache=e.set(i,l)||e,l};return C.cache=new(Jl.Cache||PC),C}function Sl(I){if("function"!=typeof I)throw new RI(A);return function(){var g=arguments;switch(g.length){case 0:return!I.call(this);case 1:return!I.call(this,g[0]);case 2:return!I.call(this,g[0],g[1]);case 3:return!I.call(this,g[0],g[1],g[2])}return!I.apply(this,g)}}Jl.Cache=PC;var Fl=Gi((function(I,g){var C=(g=1==g.length&&xl(g[0])?Kg(g[0],Lg(oe())):Kg(bA(g,1),Lg(oe()))).length;return LA((function(A){for(var i=-1,e=hC(A.length,C);++i<e;)A[i]=g[i].call(this,A[i]);return Vg(I,this,A)}))})),Nl=LA((function(I,g){var A=oC(g,le(Nl));return Ei(I,o,C,g,A)})),vl=LA((function(I,g){var A=oC(g,le(vl));return Ei(I,t,C,g,A)})),kl=ge((function(I,g){return Ei(I,n,C,C,C,g)}));function Dl(I,g){return I===g||I!==I&&g!==g}var zl=Qi(XA),Ml=Qi((function(I,g){return I>=g})),Ul=fA(function(){return arguments}())?fA:function(I){return Io(I)&&FI.call(I,"callee")&&!jI.call(I,"callee")},xl=eI.isArray,Tl=rg?Lg(rg):function(I){return Io(I)&&pA(I)==w};function Ql(I){return null!=I&&$l(I.length)&&!El(I)}function Pl(I){return Io(I)&&Ql(I)}var Ol=Tg||bt,jl=hg?Lg(hg):function(I){return Io(I)&&pA(I)==G};function Ll(I){if(!Io(I))return!1;var g=pA(I);return g==u||"[object DOMException]"==g||"string"==typeof I.message&&"string"==typeof I.name&&!Ao(I)}function El(I){if(!ql(I))return!1;var g=pA(I);return g==y||g==B||"[object AsyncFunction]"==g||"[object Proxy]"==g}function _l(I){return"number"==typeof I&&I==Zo(I)}function $l(I){return"number"==typeof I&&I>-1&&I%1==0&&I<=s}function ql(I){var g=typeof I;return null!=I&&("object"==g||"function"==g)}function Io(I){return null!=I&&"object"==typeof I}var go=Gg?Lg(Gg):function(I){return Io(I)&&ae(I)==V};function Co(I){return"number"==typeof I||Io(I)&&pA(I)==p}function Ao(I){if(!Io(I)||pA(I)!=X)return!1;var g=PI(I);if(null===g)return!0;var C=FI.call(g,"constructor")&&g.constructor;return"function"==typeof C&&C instanceof C&&SI.call(C)==DI}var io=ug?Lg(ug):function(I){return Io(I)&&pA(I)==H};var eo=yg?Lg(yg):function(I){return Io(I)&&ae(I)==Y};function lo(I){return"string"==typeof I||!xl(I)&&Io(I)&&pA(I)==R}function oo(I){return"symbol"==typeof I||Io(I)&&pA(I)==f}var to=Bg?Lg(Bg):function(I){return Io(I)&&$l(I.length)&&!!ig[pA(I)]};var co=Qi(vA),no=Qi((function(I,g){return I<=g}));function so(I){if(!I)return[];if(Ql(I))return lo(I)?nC(I):Yi(I);if(Ig&&I[Ig])return function(I){for(var g,C=[];!(g=I.next()).done;)C.push(g.value);return C}(I[Ig]());var g=ae(I);return(g==V?eC:g==Y?tC:zo)(I)}function ao(I){return I?(I=bo(I))===d||I===-1/0?17976931348623157e292*(I<0?-1:1):I===I?I:0:0===I?I:0}function Zo(I){var g=ao(I),C=g%1;return g===g?C?g-C:g:0}function mo(I){return I?lA(Zo(I),0,Z):0}function bo(I){if("number"==typeof I)return I;if(oo(I))return a;if(ql(I)){var g="function"==typeof I.valueOf?I.valueOf():I;I=ql(g)?g+"":g}if("string"!=typeof I)return 0===I?I:+I;I=jg(I);var C=mI.test(I);return C||rI.test(I)?tg(I.slice(2),C?2:8):ZI.test(I)?a:+I}function ro(I){return Ri(I,wo(I))}function ho(I){return null==I?"":ti(I)}var Go=Ki((function(I,g){if(Be(g)||Ql(g))Ri(g,Ko(g),I);else for(var C in g)FI.call(g,C)&&IA(I,C,g[C])})),uo=Ki((function(I,g){Ri(g,wo(g),I)})),yo=Ki((function(I,g,C,A){Ri(g,wo(g),I,A)})),Bo=Ki((function(I,g,C,A){Ri(g,Ko(g),I,A)})),Vo=ge(eA);var po=LA((function(I,g){I=WI(I);var A=-1,i=g.length,e=i>2?g[2]:C;for(e&&he(g[0],g[1],e)&&(i=1);++A<i;)for(var l=g[A],o=wo(l),t=-1,c=o.length;++t<c;){var n=o[t],d=I[n];(d===C||Dl(d,wI[n])&&!FI.call(I,n))&&(I[n]=l[n])}return I})),Xo=LA((function(I){return I.push(C,$i),Vg(So,C,I)}));function Wo(I,g,A){var i=null==I?C:BA(I,g);return i===C?A:i}function Ho(I,g){return null!=I&&Ze(I,g,HA)}var Yo=zi((function(I,g,C){null!=g&&"function"!=typeof g.toString&&(g=kI.call(g)),I[g]=C}),It(At)),Ro=zi((function(I,g,C){null!=g&&"function"!=typeof g.toString&&(g=kI.call(g)),FI.call(I,g)?I[g].push(C):I[g]=[C]}),oe),fo=LA(RA);function Ko(I){return Ql(I)?LC(I):FA(I)}function wo(I){return Ql(I)?LC(I,!0):NA(I)}var Jo=Ki((function(I,g,C){MA(I,g,C)})),So=Ki((function(I,g,C,A){MA(I,g,C,A)})),Fo=ge((function(I,g){var C={};if(null==I)return C;var A=!1;g=Kg(g,(function(g){return g=hi(g,I),A||(A=g.length>1),g})),Ri(I,Ae(I),C),A&&(C=oA(C,7,qi));for(var i=g.length;i--;)ni(C,g[i]);return C}));var No=ge((function(I,g){return null==I?{}:function(I,g){return TA(I,g,(function(g,C){return Ho(I,C)}))}(I,g)}));function vo(I,g){if(null==I)return{};var C=Kg(Ae(I),(function(I){return[I]}));return g=oe(g),TA(I,C,(function(I,C){return g(I,C[0])}))}var ko=Li(Ko),Do=Li(wo);function zo(I){return null==I?[]:Eg(I,Ko(I))}var Mo=Fi((function(I,g,C){return g=g.toLowerCase(),I+(C?Uo(g):g)}));function Uo(I){return Eo(ho(I).toLowerCase())}function xo(I){return(I=ho(I))&&I.replace(GI,gC).replace(_I,"")}var To=Fi((function(I,g,C){return I+(C?"-":"")+g.toLowerCase()})),Qo=Fi((function(I,g,C){return I+(C?" ":"")+g.toLowerCase()})),Po=Si("toLowerCase");var Oo=Fi((function(I,g,C){return I+(C?"_":"")+g.toLowerCase()}));var jo=Fi((function(I,g,C){return I+(C?" ":"")+Eo(g)}));var Lo=Fi((function(I,g,C){return I+(C?" ":"")+g.toUpperCase()})),Eo=Si("toUpperCase");function _o(I,g,A){return I=ho(I),(g=A?C:g)===C?function(I){return gg.test(I)}(I)?function(I){return I.match(qI)||[]}(I):function(I){return I.match(cI)||[]}(I):I.match(g)||[]}var $o=LA((function(I,g){try{return Vg(I,C,g)}catch(im){return Ll(im)?im:new VI(im)}})),qo=ge((function(I,g){return Xg(g,(function(g){g=Ne(g),iA(I,g,Yl(I[g],I))})),I}));function It(I){return function(){return I}}var gt=ki(),Ct=ki(!0);function At(I){return I}function it(I){return SA("function"==typeof I?I:oA(I,1))}var et=LA((function(I,g){return function(C){return RA(C,I,g)}})),lt=LA((function(I,g){return function(C){return RA(I,C,g)}}));function ot(I,g,C){var A=Ko(g),i=yA(g,A);null!=C||ql(g)&&(i.length||!A.length)||(C=g,g=I,I=this,i=yA(g,Ko(g)));var e=!(ql(C)&&"chain"in C)||!!C.chain,l=El(I);return Xg(i,(function(C){var A=g[C];I[C]=A,l&&(I.prototype[C]=function(){var g=this.__chain__;if(e||g){var C=I(this.__wrapped__),i=C.__actions__=Yi(this.__actions__);return i.push({func:A,args:arguments,thisArg:I}),C.__chain__=g,C}return A.apply(I,wg([this.value()],arguments))})})),I}function tt(){}var ct=Ui(Kg),nt=Ui(Hg),dt=Ui(Fg);function st(I){return Ge(I)?xg(Ne(I)):function(I){return function(g){return BA(g,I)}}(I)}var at=Ti(),Zt=Ti(!0);function mt(){return[]}function bt(){return!1}var rt=Mi((function(I,g){return I+g}),0),ht=Oi("ceil"),Gt=Mi((function(I,g){return I/g}),1),ut=Oi("floor");var yt=Mi((function(I,g){return I*g}),1),Bt=Oi("round"),Vt=Mi((function(I,g){return I-g}),0);return DC.after=function(I,g){if("function"!=typeof g)throw new RI(A);return I=Zo(I),function(){if(--I<1)return g.apply(this,arguments)}},DC.ary=Wl,DC.assign=Go,DC.assignIn=uo,DC.assignInWith=yo,DC.assignWith=Bo,DC.at=Vo,DC.before=Hl,DC.bind=Yl,DC.bindAll=qo,DC.bindKey=Rl,DC.castArray=function(){if(!arguments.length)return[];var I=arguments[0];return xl(I)?I:[I]},DC.chain=dl,DC.chunk=function(I,g,A){g=(A?he(I,g,A):g===C)?1:rC(Zo(g),0);var i=null==I?0:I.length;if(!i||g<1)return[];for(var e=0,l=0,o=eI(mg(i/g));e<i;)o[l++]=Ci(I,e,e+=g);return o},DC.compact=function(I){for(var g=-1,C=null==I?0:I.length,A=0,i=[];++g<C;){var e=I[g];e&&(i[A++]=e)}return i},DC.concat=function(){var I=arguments.length;if(!I)return[];for(var g=eI(I-1),C=arguments[0],A=I;A--;)g[A-1]=arguments[A];return wg(xl(C)?Yi(C):[C],bA(g,1))},DC.cond=function(I){var g=null==I?0:I.length,C=oe();return I=g?Kg(I,(function(I){if("function"!=typeof I[1])throw new RI(A);return[C(I[0]),I[1]]})):[],LA((function(C){for(var A=-1;++A<g;){var i=I[A];if(Vg(i[0],this,C))return Vg(i[1],this,C)}}))},DC.conforms=function(I){return function(I){var g=Ko(I);return function(C){return tA(C,I,g)}}(oA(I,1))},DC.constant=It,DC.countBy=Zl,DC.create=function(I,g){var C=zC(I);return null==g?C:AA(C,g)},DC.curry=function I(g,A,i){var e=Ei(g,8,C,C,C,C,C,A=i?C:A);return e.placeholder=I.placeholder,e},DC.curryRight=function I(g,A,i){var e=Ei(g,l,C,C,C,C,C,A=i?C:A);return e.placeholder=I.placeholder,e},DC.debounce=fl,DC.defaults=po,DC.defaultsDeep=Xo,DC.defer=Kl,DC.delay=wl,DC.difference=De,DC.differenceBy=ze,DC.differenceWith=Me,DC.drop=function(I,g,A){var i=null==I?0:I.length;return i?Ci(I,(g=A||g===C?1:Zo(g))<0?0:g,i):[]},DC.dropRight=function(I,g,A){var i=null==I?0:I.length;return i?Ci(I,0,(g=i-(g=A||g===C?1:Zo(g)))<0?0:g):[]},DC.dropRightWhile=function(I,g){return I&&I.length?si(I,oe(g,3),!0,!0):[]},DC.dropWhile=function(I,g){return I&&I.length?si(I,oe(g,3),!0):[]},DC.fill=function(I,g,A,i){var e=null==I?0:I.length;return e?(A&&"number"!=typeof A&&he(I,g,A)&&(A=0,i=e),function(I,g,A,i){var e=I.length;for((A=Zo(A))<0&&(A=-A>e?0:e+A),(i=i===C||i>e?e:Zo(i))<0&&(i+=e),i=A>i?0:mo(i);A<i;)I[A++]=g;return I}(I,g,A,i)):[]},DC.filter=function(I,g){return(xl(I)?Yg:mA)(I,oe(g,3))},DC.flatMap=function(I,g){return bA(Bl(I,g),1)},DC.flatMapDeep=function(I,g){return bA(Bl(I,g),d)},DC.flatMapDepth=function(I,g,A){return A=A===C?1:Zo(A),bA(Bl(I,g),A)},DC.flatten=Te,DC.flattenDeep=function(I){return(null==I?0:I.length)?bA(I,d):[]},DC.flattenDepth=function(I,g){return(null==I?0:I.length)?bA(I,g=g===C?1:Zo(g)):[]},DC.flip=function(I){return Ei(I,512)},DC.flow=gt,DC.flowRight=Ct,DC.fromPairs=function(I){for(var g=-1,C=null==I?0:I.length,A={};++g<C;){var i=I[g];A[i[0]]=i[1]}return A},DC.functions=function(I){return null==I?[]:yA(I,Ko(I))},DC.functionsIn=function(I){return null==I?[]:yA(I,wo(I))},DC.groupBy=Gl,DC.initial=function(I){return(null==I?0:I.length)?Ci(I,0,-1):[]},DC.intersection=Pe,DC.intersectionBy=Oe,DC.intersectionWith=je,DC.invert=Yo,DC.invertBy=Ro,DC.invokeMap=ul,DC.iteratee=it,DC.keyBy=yl,DC.keys=Ko,DC.keysIn=wo,DC.map=Bl,DC.mapKeys=function(I,g){var C={};return g=oe(g,3),GA(I,(function(I,A,i){iA(C,g(I,A,i),I)})),C},DC.mapValues=function(I,g){var C={};return g=oe(g,3),GA(I,(function(I,A,i){iA(C,A,g(I,A,i))})),C},DC.matches=function(I){return DA(oA(I,1))},DC.matchesProperty=function(I,g){return zA(I,oA(g,1))},DC.memoize=Jl,DC.merge=Jo,DC.mergeWith=So,DC.method=et,DC.methodOf=lt,DC.mixin=ot,DC.negate=Sl,DC.nthArg=function(I){return I=Zo(I),LA((function(g){return UA(g,I)}))},DC.omit=Fo,DC.omitBy=function(I,g){return vo(I,Sl(oe(g)))},DC.once=function(I){return Hl(2,I)},DC.orderBy=function(I,g,A,i){return null==I?[]:(xl(g)||(g=null==g?[]:[g]),xl(A=i?C:A)||(A=null==A?[]:[A]),xA(I,g,A))},DC.over=ct,DC.overArgs=Fl,DC.overEvery=nt,DC.overSome=dt,DC.partial=Nl,DC.partialRight=vl,DC.partition=Vl,DC.pick=No,DC.pickBy=vo,DC.property=st,DC.propertyOf=function(I){return function(g){return null==I?C:BA(I,g)}},DC.pull=Ee,DC.pullAll=_e,DC.pullAllBy=function(I,g,C){return I&&I.length&&g&&g.length?QA(I,g,oe(C,2)):I},DC.pullAllWith=function(I,g,A){return I&&I.length&&g&&g.length?QA(I,g,C,A):I},DC.pullAt=$e,DC.range=at,DC.rangeRight=Zt,DC.rearg=kl,DC.reject=function(I,g){return(xl(I)?Yg:mA)(I,Sl(oe(g,3)))},DC.remove=function(I,g){var C=[];if(!I||!I.length)return C;var A=-1,i=[],e=I.length;for(g=oe(g,3);++A<e;){var l=I[A];g(l,A,I)&&(C.push(l),i.push(A))}return PA(I,i),C},DC.rest=function(I,g){if("function"!=typeof I)throw new RI(A);return LA(I,g=g===C?g:Zo(g))},DC.reverse=qe,DC.sampleSize=function(I,g,A){return g=(A?he(I,g,A):g===C)?1:Zo(g),(xl(I)?_C:_A)(I,g)},DC.set=function(I,g,C){return null==I?I:$A(I,g,C)},DC.setWith=function(I,g,A,i){return i="function"==typeof i?i:C,null==I?I:$A(I,g,A,i)},DC.shuffle=function(I){return(xl(I)?$C:gi)(I)},DC.slice=function(I,g,A){var i=null==I?0:I.length;return i?(A&&"number"!=typeof A&&he(I,g,A)?(g=0,A=i):(g=null==g?0:Zo(g),A=A===C?i:Zo(A)),Ci(I,g,A)):[]},DC.sortBy=pl,DC.sortedUniq=function(I){return I&&I.length?li(I):[]},DC.sortedUniqBy=function(I,g){return I&&I.length?li(I,oe(g,2)):[]},DC.split=function(I,g,A){return A&&"number"!=typeof A&&he(I,g,A)&&(g=A=C),(A=A===C?Z:A>>>0)?(I=ho(I))&&("string"==typeof g||null!=g&&!io(g))&&!(g=ti(g))&&iC(I)?ui(nC(I),0,A):I.split(g,A):[]},DC.spread=function(I,g){if("function"!=typeof I)throw new RI(A);return g=null==g?0:rC(Zo(g),0),LA((function(C){var A=C[g],i=ui(C,0,g);return A&&wg(i,A),Vg(I,this,i)}))},DC.tail=function(I){var g=null==I?0:I.length;return g?Ci(I,1,g):[]},DC.take=function(I,g,A){return I&&I.length?Ci(I,0,(g=A||g===C?1:Zo(g))<0?0:g):[]},DC.takeRight=function(I,g,A){var i=null==I?0:I.length;return i?Ci(I,(g=i-(g=A||g===C?1:Zo(g)))<0?0:g,i):[]},DC.takeRightWhile=function(I,g){return I&&I.length?si(I,oe(g,3),!1,!0):[]},DC.takeWhile=function(I,g){return I&&I.length?si(I,oe(g,3)):[]},DC.tap=function(I,g){return g(I),I},DC.throttle=function(I,g,C){var i=!0,e=!0;if("function"!=typeof I)throw new RI(A);return ql(C)&&(i="leading"in C?!!C.leading:i,e="trailing"in C?!!C.trailing:e),fl(I,g,{leading:i,maxWait:g,trailing:e})},DC.thru=sl,DC.toArray=so,DC.toPairs=ko,DC.toPairsIn=Do,DC.toPath=function(I){return xl(I)?Kg(I,Ne):oo(I)?[I]:Yi(Fe(ho(I)))},DC.toPlainObject=ro,DC.transform=function(I,g,C){var A=xl(I),i=A||Ol(I)||to(I);if(g=oe(g,4),null==C){var e=I&&I.constructor;C=i?A?new e:[]:ql(I)&&El(e)?zC(PI(I)):{}}return(i?Xg:GA)(I,(function(I,A,i){return g(C,I,A,i)})),C},DC.unary=function(I){return Wl(I,1)},DC.union=Il,DC.unionBy=gl,DC.unionWith=Cl,DC.uniq=function(I){return I&&I.length?ci(I):[]},DC.uniqBy=function(I,g){return I&&I.length?ci(I,oe(g,2)):[]},DC.uniqWith=function(I,g){return g="function"==typeof g?g:C,I&&I.length?ci(I,C,g):[]},DC.unset=function(I,g){return null==I||ni(I,g)},DC.unzip=Al,DC.unzipWith=il,DC.update=function(I,g,C){return null==I?I:di(I,g,ri(C))},DC.updateWith=function(I,g,A,i){return i="function"==typeof i?i:C,null==I?I:di(I,g,ri(A),i)},DC.values=zo,DC.valuesIn=function(I){return null==I?[]:Eg(I,wo(I))},DC.without=el,DC.words=_o,DC.wrap=function(I,g){return Nl(ri(g),I)},DC.xor=ll,DC.xorBy=ol,DC.xorWith=tl,DC.zip=cl,DC.zipObject=function(I,g){return mi(I||[],g||[],IA)},DC.zipObjectDeep=function(I,g){return mi(I||[],g||[],$A)},DC.zipWith=nl,DC.entries=ko,DC.entriesIn=Do,DC.extend=uo,DC.extendWith=yo,ot(DC,DC),DC.add=rt,DC.attempt=$o,DC.camelCase=Mo,DC.capitalize=Uo,DC.ceil=ht,DC.clamp=function(I,g,A){return A===C&&(A=g,g=C),A!==C&&(A=(A=bo(A))===A?A:0),g!==C&&(g=(g=bo(g))===g?g:0),lA(bo(I),g,A)},DC.clone=function(I){return oA(I,4)},DC.cloneDeep=function(I){return oA(I,5)},DC.cloneDeepWith=function(I,g){return oA(I,5,g="function"==typeof g?g:C)},DC.cloneWith=function(I,g){return oA(I,4,g="function"==typeof g?g:C)},DC.conformsTo=function(I,g){return null==g||tA(I,g,Ko(g))},DC.deburr=xo,DC.defaultTo=function(I,g){return null==I||I!==I?g:I},DC.divide=Gt,DC.endsWith=function(I,g,A){I=ho(I),g=ti(g);var i=I.length,e=A=A===C?i:lA(Zo(A),0,i);return(A-=g.length)>=0&&I.slice(A,e)==g},DC.eq=Dl,DC.escape=function(I){return(I=ho(I))&&L.test(I)?I.replace(O,CC):I},DC.escapeRegExp=function(I){return(I=ho(I))&&AI.test(I)?I.replace(CI,"\\$&"):I},DC.every=function(I,g,A){var i=xl(I)?Hg:aA;return A&&he(I,g,A)&&(g=C),i(I,oe(g,3))},DC.find=ml,DC.findIndex=Ue,DC.findKey=function(I,g){return vg(I,oe(g,3),GA)},DC.findLast=bl,DC.findLastIndex=xe,DC.findLastKey=function(I,g){return vg(I,oe(g,3),uA)},DC.floor=ut,DC.forEach=rl,DC.forEachRight=hl,DC.forIn=function(I,g){return null==I?I:rA(I,oe(g,3),wo)},DC.forInRight=function(I,g){return null==I?I:hA(I,oe(g,3),wo)},DC.forOwn=function(I,g){return I&&GA(I,oe(g,3))},DC.forOwnRight=function(I,g){return I&&uA(I,oe(g,3))},DC.get=Wo,DC.gt=zl,DC.gte=Ml,DC.has=function(I,g){return null!=I&&Ze(I,g,WA)},DC.hasIn=Ho,DC.head=Qe,DC.identity=At,DC.includes=function(I,g,C,A){I=Ql(I)?I:zo(I),C=C&&!A?Zo(C):0;var i=I.length;return C<0&&(C=rC(i+C,0)),lo(I)?C<=i&&I.indexOf(g,C)>-1:!!i&&Dg(I,g,C)>-1},DC.indexOf=function(I,g,C){var A=null==I?0:I.length;if(!A)return-1;var i=null==C?0:Zo(C);return i<0&&(i=rC(A+i,0)),Dg(I,g,i)},DC.inRange=function(I,g,A){return g=ao(g),A===C?(A=g,g=0):A=ao(A),function(I,g,C){return I>=hC(g,C)&&I<rC(g,C)}(I=bo(I),g,A)},DC.invoke=fo,DC.isArguments=Ul,DC.isArray=xl,DC.isArrayBuffer=Tl,DC.isArrayLike=Ql,DC.isArrayLikeObject=Pl,DC.isBoolean=function(I){return!0===I||!1===I||Io(I)&&pA(I)==h},DC.isBuffer=Ol,DC.isDate=jl,DC.isElement=function(I){return Io(I)&&1===I.nodeType&&!Ao(I)},DC.isEmpty=function(I){if(null==I)return!0;if(Ql(I)&&(xl(I)||"string"==typeof I||"function"==typeof I.splice||Ol(I)||to(I)||Ul(I)))return!I.length;var g=ae(I);if(g==V||g==Y)return!I.size;if(Be(I))return!FA(I).length;for(var C in I)if(FI.call(I,C))return!1;return!0},DC.isEqual=function(I,g){return KA(I,g)},DC.isEqualWith=function(I,g,A){var i=(A="function"==typeof A?A:C)?A(I,g):C;return i===C?KA(I,g,C,A):!!i},DC.isError=Ll,DC.isFinite=function(I){return"number"==typeof I&&sC(I)},DC.isFunction=El,DC.isInteger=_l,DC.isLength=$l,DC.isMap=go,DC.isMatch=function(I,g){return I===g||wA(I,g,ce(g))},DC.isMatchWith=function(I,g,A){return A="function"==typeof A?A:C,wA(I,g,ce(g),A)},DC.isNaN=function(I){return Co(I)&&I!=+I},DC.isNative=function(I){if(ye(I))throw new VI("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return JA(I)},DC.isNil=function(I){return null==I},DC.isNull=function(I){return null===I},DC.isNumber=Co,DC.isObject=ql,DC.isObjectLike=Io,DC.isPlainObject=Ao,DC.isRegExp=io,DC.isSafeInteger=function(I){return _l(I)&&I>=-9007199254740991&&I<=s},DC.isSet=eo,DC.isString=lo,DC.isSymbol=oo,DC.isTypedArray=to,DC.isUndefined=function(I){return I===C},DC.isWeakMap=function(I){return Io(I)&&ae(I)==K},DC.isWeakSet=function(I){return Io(I)&&"[object WeakSet]"==pA(I)},DC.join=function(I,g){return null==I?"":mC.call(I,g)},DC.kebabCase=To,DC.last=Le,DC.lastIndexOf=function(I,g,A){var i=null==I?0:I.length;if(!i)return-1;var e=i;return A!==C&&(e=(e=Zo(A))<0?rC(i+e,0):hC(e,i-1)),g===g?function(I,g,C){for(var A=C+1;A--;)if(I[A]===g)return A;return A}(I,g,e):kg(I,Mg,e,!0)},DC.lowerCase=Qo,DC.lowerFirst=Po,DC.lt=co,DC.lte=no,DC.max=function(I){return I&&I.length?ZA(I,At,XA):C},DC.maxBy=function(I,g){return I&&I.length?ZA(I,oe(g,2),XA):C},DC.mean=function(I){return Ug(I,At)},DC.meanBy=function(I,g){return Ug(I,oe(g,2))},DC.min=function(I){return I&&I.length?ZA(I,At,vA):C},DC.minBy=function(I,g){return I&&I.length?ZA(I,oe(g,2),vA):C},DC.stubArray=mt,DC.stubFalse=bt,DC.stubObject=function(){return{}},DC.stubString=function(){return""},DC.stubTrue=function(){return!0},DC.multiply=yt,DC.nth=function(I,g){return I&&I.length?UA(I,Zo(g)):C},DC.noConflict=function(){return dg._===this&&(dg._=zI),this},DC.noop=tt,DC.now=Xl,DC.pad=function(I,g,C){I=ho(I);var A=(g=Zo(g))?cC(I):0;if(!g||A>=g)return I;var i=(g-A)/2;return xi(bg(i),C)+I+xi(mg(i),C)},DC.padEnd=function(I,g,C){I=ho(I);var A=(g=Zo(g))?cC(I):0;return g&&A<g?I+xi(g-A,C):I},DC.padStart=function(I,g,C){I=ho(I);var A=(g=Zo(g))?cC(I):0;return g&&A<g?xi(g-A,C)+I:I},DC.parseInt=function(I,g,C){return C||null==g?g=0:g&&(g=+g),uC(ho(I).replace(iI,""),g||0)},DC.random=function(I,g,A){if(A&&"boolean"!=typeof A&&he(I,g,A)&&(g=A=C),A===C&&("boolean"==typeof g?(A=g,g=C):"boolean"==typeof I&&(A=I,I=C)),I===C&&g===C?(I=0,g=1):(I=ao(I),g===C?(g=I,I=0):g=ao(g)),I>g){var i=I;I=g,g=i}if(A||I%1||g%1){var e=yC();return hC(I+e*(g-I+og("1e-"+((e+"").length-1))),g)}return OA(I,g)},DC.reduce=function(I,g,C){var A=xl(I)?Jg:Qg,i=arguments.length<3;return A(I,oe(g,4),C,i,dA)},DC.reduceRight=function(I,g,C){var A=xl(I)?Sg:Qg,i=arguments.length<3;return A(I,oe(g,4),C,i,sA)},DC.repeat=function(I,g,A){return g=(A?he(I,g,A):g===C)?1:Zo(g),jA(ho(I),g)},DC.replace=function(){var I=arguments,g=ho(I[0]);return I.length<3?g:g.replace(I[1],I[2])},DC.result=function(I,g,A){var i=-1,e=(g=hi(g,I)).length;for(e||(e=1,I=C);++i<e;){var l=null==I?C:I[Ne(g[i])];l===C&&(i=e,l=A),I=El(l)?l.call(I):l}return I},DC.round=Bt,DC.runInContext=I,DC.sample=function(I){return(xl(I)?EC:EA)(I)},DC.size=function(I){if(null==I)return 0;if(Ql(I))return lo(I)?cC(I):I.length;var g=ae(I);return g==V||g==Y?I.size:FA(I).length},DC.snakeCase=Oo,DC.some=function(I,g,A){var i=xl(I)?Fg:Ai;return A&&he(I,g,A)&&(g=C),i(I,oe(g,3))},DC.sortedIndex=function(I,g){return ii(I,g)},DC.sortedIndexBy=function(I,g,C){return ei(I,g,oe(C,2))},DC.sortedIndexOf=function(I,g){var C=null==I?0:I.length;if(C){var A=ii(I,g);if(A<C&&Dl(I[A],g))return A}return-1},DC.sortedLastIndex=function(I,g){return ii(I,g,!0)},DC.sortedLastIndexBy=function(I,g,C){return ei(I,g,oe(C,2),!0)},DC.sortedLastIndexOf=function(I,g){if(null==I?0:I.length){var C=ii(I,g,!0)-1;if(Dl(I[C],g))return C}return-1},DC.startCase=jo,DC.startsWith=function(I,g,C){return I=ho(I),C=null==C?0:lA(Zo(C),0,I.length),g=ti(g),I.slice(C,C+g.length)==g},DC.subtract=Vt,DC.sum=function(I){return I&&I.length?Pg(I,At):0},DC.sumBy=function(I,g){return I&&I.length?Pg(I,oe(g,2)):0},DC.template=function(I,g,A){var i=DC.templateSettings;A&&he(I,g,A)&&(g=C),I=ho(I),g=yo({},g,i,_i);var e,l,o=yo({},g.imports,i.imports,_i),t=Ko(o),c=Eg(o,t),n=0,d=g.interpolate||uI,s="__p += '",a=HI((g.escape||uI).source+"|"+d.source+"|"+(d===$?sI:uI).source+"|"+(g.evaluate||uI).source+"|$","g"),Z="//# sourceURL="+(FI.call(g,"sourceURL")?(g.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ag+"]")+"\n";I.replace(a,(function(g,C,A,i,o,t){return A||(A=i),s+=I.slice(n,t).replace(yI,AC),C&&(e=!0,s+="' +\n__e("+C+") +\n'"),o&&(l=!0,s+="';\n"+o+";\n__p += '"),A&&(s+="' +\n((__t = ("+A+")) == null ? '' : __t) +\n'"),n=t+g.length,g})),s+="';\n";var m=FI.call(g,"variable")&&g.variable;if(m){if(nI.test(m))throw new VI("Invalid `variable` option passed into `_.template`")}else s="with (obj) {\n"+s+"\n}\n";s=(l?s.replace(x,""):s).replace(T,"$1").replace(Q,"$1;"),s="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(e?", __e = _.escape":"")+(l?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var b=$o((function(){return pI(t,Z+"return "+s).apply(C,c)}));if(b.source=s,Ll(b))throw b;return b},DC.times=function(I,g){if((I=Zo(I))<1||I>s)return[];var C=Z,A=hC(I,Z);g=oe(g),I-=Z;for(var i=Og(A,g);++C<I;)g(C);return i},DC.toFinite=ao,DC.toInteger=Zo,DC.toLength=mo,DC.toLower=function(I){return ho(I).toLowerCase()},DC.toNumber=bo,DC.toSafeInteger=function(I){return I?lA(Zo(I),-9007199254740991,s):0===I?I:0},DC.toString=ho,DC.toUpper=function(I){return ho(I).toUpperCase()},DC.trim=function(I,g,A){if((I=ho(I))&&(A||g===C))return jg(I);if(!I||!(g=ti(g)))return I;var i=nC(I),e=nC(g);return ui(i,$g(i,e),qg(i,e)+1).join("")},DC.trimEnd=function(I,g,A){if((I=ho(I))&&(A||g===C))return I.slice(0,dC(I)+1);if(!I||!(g=ti(g)))return I;var i=nC(I);return ui(i,0,qg(i,nC(g))+1).join("")},DC.trimStart=function(I,g,A){if((I=ho(I))&&(A||g===C))return I.replace(iI,"");if(!I||!(g=ti(g)))return I;var i=nC(I);return ui(i,$g(i,nC(g))).join("")},DC.truncate=function(I,g){var A=30,i="...";if(ql(g)){var e="separator"in g?g.separator:e;A="length"in g?Zo(g.length):A,i="omission"in g?ti(g.omission):i}var l=(I=ho(I)).length;if(iC(I)){var o=nC(I);l=o.length}if(A>=l)return I;var t=A-cC(i);if(t<1)return i;var c=o?ui(o,0,t).join(""):I.slice(0,t);if(e===C)return c+i;if(o&&(t+=c.length-t),io(e)){if(I.slice(t).search(e)){var n,d=c;for(e.global||(e=HI(e.source,ho(aI.exec(e))+"g")),e.lastIndex=0;n=e.exec(d);)var s=n.index;c=c.slice(0,s===C?t:s)}}else if(I.indexOf(ti(e),t)!=t){var a=c.lastIndexOf(e);a>-1&&(c=c.slice(0,a))}return c+i},DC.unescape=function(I){return(I=ho(I))&&j.test(I)?I.replace(P,aC):I},DC.uniqueId=function(I){var g=++NI;return ho(I)+g},DC.upperCase=Lo,DC.upperFirst=Eo,DC.each=rl,DC.eachRight=hl,DC.first=Qe,ot(DC,function(){var I={};return GA(DC,(function(g,C){FI.call(DC.prototype,C)||(I[C]=g)})),I}(),{chain:!1}),DC.VERSION="4.17.21",Xg(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(I){DC[I].placeholder=DC})),Xg(["drop","take"],(function(I,g){xC.prototype[I]=function(A){A=A===C?1:rC(Zo(A),0);var i=this.__filtered__&&!g?new xC(this):this.clone();return i.__filtered__?i.__takeCount__=hC(A,i.__takeCount__):i.__views__.push({size:hC(A,Z),type:I+(i.__dir__<0?"Right":"")}),i},xC.prototype[I+"Right"]=function(g){return this.reverse()[I](g).reverse()}})),Xg(["filter","map","takeWhile"],(function(I,g){var C=g+1,A=1==C||3==C;xC.prototype[I]=function(I){var g=this.clone();return g.__iteratees__.push({iteratee:oe(I,3),type:C}),g.__filtered__=g.__filtered__||A,g}})),Xg(["head","last"],(function(I,g){var C="take"+(g?"Right":"");xC.prototype[I]=function(){return this[C](1).value()[0]}})),Xg(["initial","tail"],(function(I,g){var C="drop"+(g?"":"Right");xC.prototype[I]=function(){return this.__filtered__?new xC(this):this[C](1)}})),xC.prototype.compact=function(){return this.filter(At)},xC.prototype.find=function(I){return this.filter(I).head()},xC.prototype.findLast=function(I){return this.reverse().find(I)},xC.prototype.invokeMap=LA((function(I,g){return"function"==typeof I?new xC(this):this.map((function(C){return RA(C,I,g)}))})),xC.prototype.reject=function(I){return this.filter(Sl(oe(I)))},xC.prototype.slice=function(I,g){I=Zo(I);var A=this;return A.__filtered__&&(I>0||g<0)?new xC(A):(I<0?A=A.takeRight(-I):I&&(A=A.drop(I)),g!==C&&(A=(g=Zo(g))<0?A.dropRight(-g):A.take(g-I)),A)},xC.prototype.takeRightWhile=function(I){return this.reverse().takeWhile(I).reverse()},xC.prototype.toArray=function(){return this.take(Z)},GA(xC.prototype,(function(I,g){var A=/^(?:filter|find|map|reject)|While$/.test(g),i=/^(?:head|last)$/.test(g),e=DC[i?"take"+("last"==g?"Right":""):g],l=i||/^find/.test(g);e&&(DC.prototype[g]=function(){var g=this.__wrapped__,o=i?[1]:arguments,t=g instanceof xC,c=o[0],n=t||xl(g),d=function(I){var g=e.apply(DC,wg([I],o));return i&&s?g[0]:g};n&&A&&"function"==typeof c&&1!=c.length&&(t=n=!1);var s=this.__chain__,a=!!this.__actions__.length,Z=l&&!s,m=t&&!a;if(!l&&n){g=m?g:new xC(this);var b=I.apply(g,o);return b.__actions__.push({func:sl,args:[d],thisArg:C}),new UC(b,s)}return Z&&m?I.apply(this,o):(b=this.thru(d),Z?i?b.value()[0]:b.value():b)})})),Xg(["pop","push","shift","sort","splice","unshift"],(function(I){var g=fI[I],C=/^(?:push|sort|unshift)$/.test(I)?"tap":"thru",A=/^(?:pop|shift)$/.test(I);DC.prototype[I]=function(){var I=arguments;if(A&&!this.__chain__){var i=this.value();return g.apply(xl(i)?i:[],I)}return this[C]((function(C){return g.apply(xl(C)?C:[],I)}))}})),GA(xC.prototype,(function(I,g){var C=DC[g];if(C){var A=C.name+"";FI.call(fC,A)||(fC[A]=[]),fC[A].push({name:g,func:C})}})),fC[Di(C,2).name]=[{name:"wrapper",func:C}],xC.prototype.clone=function(){var I=new xC(this.__wrapped__);return I.__actions__=Yi(this.__actions__),I.__dir__=this.__dir__,I.__filtered__=this.__filtered__,I.__iteratees__=Yi(this.__iteratees__),I.__takeCount__=this.__takeCount__,I.__views__=Yi(this.__views__),I},xC.prototype.reverse=function(){if(this.__filtered__){var I=new xC(this);I.__dir__=-1,I.__filtered__=!0}else(I=this.clone()).__dir__*=-1;return I},xC.prototype.value=function(){var I=this.__wrapped__.value(),g=this.__dir__,C=xl(I),A=g<0,i=C?I.length:0,e=function(I,g,C){var A=-1,i=C.length;for(;++A<i;){var e=C[A],l=e.size;switch(e.type){case"drop":I+=l;break;case"dropRight":g-=l;break;case"take":g=hC(g,I+l);break;case"takeRight":I=rC(I,g-l)}}return{start:I,end:g}}(0,i,this.__views__),l=e.start,o=e.end,t=o-l,c=A?o:l-1,n=this.__iteratees__,d=n.length,s=0,a=hC(t,this.__takeCount__);if(!C||!A&&i==t&&a==t)return ai(I,this.__actions__);var Z=[];I:for(;t--&&s<a;){for(var m=-1,b=I[c+=g];++m<d;){var r=n[m],h=r.iteratee,G=r.type,u=h(b);if(2==G)b=u;else if(!u){if(1==G)continue I;break I}}Z[s++]=b}return Z},DC.prototype.at=al,DC.prototype.chain=function(){return dl(this)},DC.prototype.commit=function(){return new UC(this.value(),this.__chain__)},DC.prototype.next=function(){this.__values__===C&&(this.__values__=so(this.value()));var I=this.__index__>=this.__values__.length;return{done:I,value:I?C:this.__values__[this.__index__++]}},DC.prototype.plant=function(I){for(var g,A=this;A instanceof MC;){var i=ke(A);i.__index__=0,i.__values__=C,g?e.__wrapped__=i:g=i;var e=i;A=A.__wrapped__}return e.__wrapped__=I,g},DC.prototype.reverse=function(){var I=this.__wrapped__;if(I instanceof xC){var g=I;return this.__actions__.length&&(g=new xC(this)),(g=g.reverse()).__actions__.push({func:sl,args:[qe],thisArg:C}),new UC(g,this.__chain__)}return this.thru(qe)},DC.prototype.toJSON=DC.prototype.valueOf=DC.prototype.value=function(){return ai(this.__wrapped__,this.__actions__)},DC.prototype.first=DC.prototype.head,Ig&&(DC.prototype[Ig]=function(){return this}),DC}();ag?((ag.exports=ZC)._=ZC,sg._=ZC):dg._=ZC}).call(sC)}(gm,gm.exports);var Am=Object(lI.forwardRef)((function(I,g){var C,A,i,e=Object(lI.useState)(),l=Object(r.a)(e,2),o=l[0],t=l[1],c=Object(lI.useState)({width:200,height:200}),n=Object(r.a)(c,2),d=n[0],s=n[1],a=Object(lI.useRef)(),Z=Object(lI.useRef)(),m=Object(lI.useRef)(),b=Object(lI.useRef)(null),h=bZ(I.theme||"light"),G=null!=(C=I.id)?C:sg();Object(lI.useEffect)((function(){if(g&&(null==b?void 0:b.current)){var I=b.current,C=Im(I,o,h);"function"==typeof g?g({api:C,hgApi:I}):g.current={api:C,hgApi:I}}}),[o,h]);var u=Object(lI.useCallback)((function(){if(I.spec){if("error"===gZ(I.spec).state)return void console.warn("Gosling spec is not valid. Please refer to the console message.");EZ(I.spec,(function(g,C,A){var i,e;if(!m.current||!gm.exports.isEqual(Cm(m.current,["linkingId"]),Cm(A,["linkingId"]))){null==(i=I.compiled)||i.call(I,I.spec,g),s(C);var l="undefined"!==typeof o;(null==(e=I.experimental)?void 0:e.reactive)&&l?setTimeout((function(){var I;null==(I=b.current)||I.api.setViewConfig(g)}),300):t(g),m.current=A}}),[].concat(yg),h,{containerSize:a.current,containerParentSize:Z.current})}}),[I.spec,h]);Object(lI.useEffect)((function(){var I=document.getElementById(G);if(I){var g=new qZ(I,(function(I){a.current&&a.current.height===I.height&&a.current.width===I.width||(a.current=I,u())})),C=I.parentElement;if(C){var A=new qZ(C,(function(I){Z.current&&Z.current.height===I.height&&Z.current.width===I.width||(Z.current=I,u())}));return function(){g.detach(),A.detach()}}}})),Object(lI.useEffect)((function(){u()}),[I.spec,h]);var y="object"!==typeof(null==(A=I.spec)?void 0:A.responsiveSize)?null==(i=I.spec)?void 0:i.responsiveSize:I.spec.responsiveSize.height;return Object(lI.useMemo)((function(){var g,C,A;return oI.a.createElement(_Z,{ref:b,viewConfig:o,size:d,id:G,className:I.className,options:{padding:I.padding,border:I.border,margin:I.margin,responsiveWidth:"object"!==typeof(null==(g=I.spec)?void 0:g.responsiveSize)?null==(C=I.spec)?void 0:C.responsiveSize:I.spec.responsiveSize.width,responsiveHeight:y,background:h.root.background,alt:null==(A=I.spec)?void 0:A.description}})}),[o,d,h,y])}))}).call(this,C(65),C(70).Buffer)},244:function(I,g){},247:function(I,g){},336:function(I,g,C){},339:function(I,g,C){"use strict";C.r(g);var A=C(15),i=C.n(A),e=C(116),l=C.n(e),o=C(201),t=C(119),c=C(13),n=C(16),d=C(17),s=C(9),a=C(366),Z=C(216),m=[25,50,100,200,500,1e3,2e3,4e3,8e3,16e3,32e3,64e3,128e3],b=function(I,g,C){return C.chrPositions[I].pos+g};function r(I,g){var C={chrToAbs:function(){var I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],g=Object(s.a)(I,2),A=g[0],i=g[1];return C.chrPositions?b(A,i,C):null}};return Object(Z.a)(I,(function(I,A){if(I)g&&g(null);else{var i=function(I){for(var g=[],C={},A={},i=0,e=0;e<I.length;e++){var l=Number(I[e][1]);i+=l;var o={id:e,chr:I[e][0],pos:i-l};g.push(o),A[o.chr]=o,C[I[e][0]]=l}return{chrToAbs:function(I){var g=Object(s.a)(I,2),C=g[0],i=g[1];return b(C,i,{chrPositions:A})},cumPositions:g,chrPositions:A,totalLength:i,chromLengths:C}}(Object(a.b)(A));Object.keys(i).forEach((function(I){C[I]=i[I]})),g&&g(C)}}))}var h=function I(g){if(!(this instanceof I?this.constructor:void 0))throw new Error('Uncaught TypeError: Class constructor cannot be invoked without "new"');for(var C=function(){function I(g){Object(n.a)(this,I),this.dataConfig=g,this.bwFileHeader=null,this.bwFile=null,this.TILE_SIZE=1024,this.errorTxt="",this.dataPromises=[],this.dataPromises.push(this.loadChromsizes(g))}return Object(d.a)(I,[{key:"loadChromsizes",value:function(I){var g=this;return I.chromSizesUrl?new Promise((function(C){r(I.chromSizesUrl,(function(I){g.chromSizes=I,C()}))})):(console.error('Please enter a "chromSizesUrl" field to the data config'),null)}},{key:"tilesetInfo",value:function(I){var g=this;return this.tilesetInfoLoading=!0,Promise.all(this.dataPromises).then((function(){g.tilesetInfoLoading=!1;var C,A=g.chromSizes.totalLength;return C={tile_size:g.TILE_SIZE,max_zoom:Math.ceil(Math.log(A/g.TILE_SIZE)/Math.log(2)),max_width:Math.pow(2,Math.ceil(Math.log(A)/Math.log(2))),min_pos:[0],max_pos:[A]},I&&I(C),C})).catch((function(C){g.tilesetInfoLoading=!1,console.error(C),I&&I({error:"Error parsing bigwig: ".concat(C)})}))}},{key:"fetchTilesDebounced",value:function(I,g){var C,A={},i=[],e=[],l=Object(c.a)(g);try{for(l.s();!(C=l.n()).done;){var o=C.value,t=o.split("."),n=parseInt(t[0],10),d=parseInt(t[1],10);Number.isNaN(d)||Number.isNaN(n)?console.warn("Invalid tile zoom or position:",n,d):(i.push(o),e.push(this.tile(n,d)))}}catch(s){l.e(s)}finally{l.f()}return Promise.all(e).then((function(g){for(var C=0;C<g.length;C++){var e=i[C];A[e]=g[C],A[e].tilePositionId=e}I(A)})),A}},{key:"tile",value:function(I,g){var C=this;return this.tilesetInfo().then((function(A){for(var i=+A.max_width/Math.pow(2,+I),e=[],l={tilePos:[g],tileId:"bigwig."+I+"."+g,zoomLevel:I},o=A.min_pos[0]+g*i,t=o,c=A.min_pos[0]+(g+1)*i,n=function(I){var g=I/C.TILE_SIZE,A=m[m.length-1];return m.forEach((function(C){Math.abs(g-C)<Math.abs(g-A)&&I/C<500&&(A=C)})),A}(c-t),d=[],s=0;s<C.TILE_SIZE;s++)d.push(t+s*n);var a=C.chromSizes,Z=a.chromLengths,b=a.cumPositions,r=function(I,g,A,i){return fetch("http://develop.cistrome.org/cistrome/samples/".concat(C.dataConfig.cid,"/track?chrom=").concat(I,"&start_pos=").concat(g,"&end_pos=").concat(A,"&bin_length=").concat(n)).then((function(I){return I.json()})).then((function(I){var C=I.values,A=I.multiplier,e=I.bin_size;return C.map((function(I,C){return{value:I/A,start:i+g+C*e,end:i+g+(C+1)*e}}))}))};for(s=0;s<b.length;s++){var h=b[s].chr,G=b[s].pos,u=b[s].pos+Z[h],y=void 0,B=void 0;if(G<=t&&t<u){if(!(c>u)){if((c-t)/n>500)for(var V=Math.ceil((c-t)/n/500),p=Math.ceil((c-t)/V),X=0;t+p*X<c;X++)y=Math.floor(t+p*X-G),B=Math.ceil(t+Math.min(c,p*(X+1))-G),e.push(r(h,y,B,G));else y=Math.floor(t-G),B=Math.ceil(c-G),e.push(r(h,y,B,G));break}if((u-t)/n>500)for(var W=Math.ceil((u-t)/n/500),H=Math.ceil((u-t)/W),Y=0;t+H*Y<u;Y++)y=Math.floor(t+H*Y-G),B=Math.ceil(Math.min(u,t+H*(Y+1))-G),e.push(r(h,y,B,G));else y=t-G,B=u-G,e.push(r(h,y,B,G));t=u}}return Promise.all(e).then((function(I){for(var g=I.flat(),A=[],i=0;i<C.TILE_SIZE;i++)A.push(null);return d.forEach((function(I,C){if(!(I<o||I>c)){var i=g.filter((function(g){return I>=g.startAbs&&I<g.endAbs})).map((function(I){return I.score}));A[C]=i.length>0?i[0]:null}})),l.tabularData=g,l}))}))}},{key:"determineScale",value:function(I,g){var C=[1],A=g-I;this.bwFileHeader.zoomLevels.forEach((function(I){C.push(I.reductionLevel)}));for(var i=0;i<C.length;i++){var e=C[i];if(A/e<=20*this.TILE_SIZE)return e}return C.slice(-1)[0]}}]),I}(),A=arguments.length,i=new Array(A>1?A-1:0),e=1;e<A;e++)i[e-1]=arguments[e];return Object(t.a)(C,i)};h.config={type:"bigwig"};var G=h,u=C(215);Object(u.a)({dataFetcher:G,config:G.config},{pluginType:"dataFetcher",force:!0});var y=function(){return A.createElement(o.a,{spec:{tracks:[{data:{type:"experimentalPlugin",name:"bigwig",options:{cid:1,chromSizesUrl:"https://aveit.s3.amazonaws.com/higlass/data/sequence/hg38.chrom.sizes"}},title:"Gosling Track Based On Plugin Data-Fetcher",mark:"bar",x:{field:"start",type:"genomic"},xe:{field:"end",type:"genomic"},y:{field:"value",type:"quantitative",axis:"none"},color:{value:"#22908D"},tooltip:[{field:"start",type:"genomic"},{field:"end",type:"genomic"},{field:"value",type:"quantitative"}],style:{outlineWidth:0},width:600,height:100}]}})};C(336);l.a.render(i.a.createElement(y,null),document.getElementById("root"))}},[[339,1,2]]]);
//# sourceMappingURL=main.ce22009c.chunk.js.map